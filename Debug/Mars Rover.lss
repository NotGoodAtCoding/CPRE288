
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c2  00800100  00002066  000020fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002066  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  008002c2  008002c2  000022bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000320  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031e2  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f49  00000000  00000000  0000581a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a4b  00000000  00000000  00006763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000918  00000000  00000000  000081b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b40  00000000  00000000  00008ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000233a  00000000  00000000  00009608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000b942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
       6:	00 00       	nop
       8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
       a:	00 00       	nop
       c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
       e:	00 00       	nop
      10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
      12:	00 00       	nop
      14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
      16:	00 00       	nop
      18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_9>
      28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_11>
      30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
      36:	00 00       	nop
      38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
      42:	00 00       	nop
      44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
      46:	00 00       	nop
      48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
      56:	00 00       	nop
      58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
      76:	00 00       	nop
      78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
      82:	00 00       	nop
      84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
      86:	00 00       	nop
      88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <detectColoredBoundry+0x2e>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e6 e6       	ldi	r30, 0x66	; 102
      be:	f0 e2       	ldi	r31, 0x20	; 32
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a2 3c       	cpi	r26, 0xC2	; 194
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	23 e0       	ldi	r18, 0x03	; 3
      d2:	a2 ec       	ldi	r26, 0xC2	; 194
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ae 31       	cpi	r26, 0x1E	; 30
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	8d d5       	rcall	.+2842   	; 0xbfc <main>
      e2:	0c 94 31 10 	jmp	0x2062	; 0x2062 <_exit>

000000e6 <__bad_interrupt>:
      e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <serial_init>:
#define MYUBRR FOSC/16/BAUD-1

// Initialize serial communication over bluetooth
void serial_init(void) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (BAUD >> 8);
      e8:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)BAUD;
      ec:	82 e2       	ldi	r24, 0x22	; 34
      ee:	89 b9       	out	0x09, r24	; 9
	
	/* Enable double speed mode */
	UCSR0A = 0b00000010;
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	8b b9       	out	0x0b, r24	; 11
	
	/* Set frame format: 8 data bits, 2 stop bits */
	UCSR0C = 0b00001110;
      f4:	8e e0       	ldi	r24, 0x0E	; 14
      f6:	80 93 95 00 	sts	0x0095, r24
	
	/* Enable receiver and transmitter */
	UCSR0B = 0b00011000;
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	8a b9       	out	0x0a, r24	; 10
      fe:	08 95       	ret

00000100 <serial_getc>:
//Receive data from the serial connection
unsigned char serial_getc() {
	/* Wait for the receive complete flag (RXC) */
	//while ((UCSR0A & 0b10000000) == 0);
	
	while ( !(UCSR0A & 0b10000000) ) {}
     100:	5f 9b       	sbis	0x0b, 7	; 11
     102:	fe cf       	rjmp	.-4      	; 0x100 <serial_getc>
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
     104:	8c b1       	in	r24, 0x0c	; 12
}
     106:	08 95       	ret

00000108 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
     108:	5d 9b       	sbis	0x0b, 5	; 11
     10a:	fe cf       	rjmp	.-4      	; 0x108 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     10c:	8c b9       	out	0x0c, r24	; 12
     10e:	08 95       	ret

00000110 <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c1 55       	subi	r28, 0x51	; 81
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     130:	41 e5       	ldi	r20, 0x51	; 81
     132:	50 e0       	ldi	r21, 0x00	; 0
     134:	60 e2       	ldi	r22, 0x20	; 32
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	ce 01       	movw	r24, r28
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <memset>
	sprintf(buf, "%s", data);
     140:	b8 01       	movw	r22, r16
     142:	ce 01       	movw	r24, r28
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strcpy>
     14a:	8e 01       	movw	r16, r28
     14c:	0f 5f       	subi	r16, 0xFF	; 255
     14e:	1f 4f       	sbci	r17, 0xFF	; 255
     150:	7e 01       	movw	r14, r28
     152:	82 e5       	ldi	r24, 0x52	; 82
     154:	e8 0e       	add	r14, r24
     156:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     158:	f8 01       	movw	r30, r16
     15a:	81 91       	ld	r24, Z+
     15c:	8f 01       	movw	r16, r30
     15e:	d4 df       	rcall	.-88     	; 0x108 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     160:	0e 15       	cp	r16, r14
     162:	1f 05       	cpc	r17, r15
     164:	c9 f7       	brne	.-14     	; 0x158 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     166:	cf 5a       	subi	r28, 0xAF	; 175
     168:	df 4f       	sbci	r29, 0xFF	; 255
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	08 95       	ret

00000182 <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     182:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     184:	40 91 06 01 	lds	r20, 0x0106
     188:	50 91 07 01 	lds	r21, 0x0107
     18c:	48 17       	cp	r20, r24
     18e:	59 07       	cpc	r21, r25
     190:	54 f0       	brlt	.+20     	; 0x1a6 <linearRegression+0x24>
     192:	e8 e0       	ldi	r30, 0x08	; 8
     194:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     196:	21 e0       	ldi	r18, 0x01	; 1
     198:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     19a:	41 91       	ld	r20, Z+
     19c:	51 91       	ld	r21, Z+
     19e:	46 17       	cp	r20, r22
     1a0:	57 07       	cpc	r21, r23
     1a2:	5c f4       	brge	.+22     	; 0x1ba <linearRegression+0x38>
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     1aa:	f9 01       	movw	r30, r18
     1ac:	ee 0f       	add	r30, r30
     1ae:	ff 1f       	adc	r31, r31
     1b0:	ec 5f       	subi	r30, 0xFC	; 252
     1b2:	fe 4f       	sbci	r31, 0xFE	; 254
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     1b8:	09 c0       	rjmp	.+18     	; 0x1cc <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     1ba:	2f 5f       	subi	r18, 0xFF	; 255
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	20 31       	cpi	r18, 0x10	; 16
     1c0:	31 05       	cpc	r19, r1
     1c2:	59 f7       	brne	.-42     	; 0x19a <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1cc:	84 1b       	sub	r24, r20
     1ce:	95 0b       	sbc	r25, r21
     1d0:	64 1b       	sub	r22, r20
     1d2:	75 0b       	sbc	r23, r21
     1d4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1d8:	c9 01       	movw	r24, r18
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	82 0f       	add	r24, r18
     1e4:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1e6:	86 0f       	add	r24, r22
     1e8:	97 1f       	adc	r25, r23
     1ea:	08 95       	ret

000001ec <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1ec:	87 b1       	in	r24, 0x07	; 7
     1ee:	82 6c       	ori	r24, 0xC2	; 194
     1f0:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	87 6c       	ori	r24, 0xC7	; 199
     1f6:	86 b9       	out	0x06, r24	; 6
     1f8:	08 95       	ret

000001fa <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1fa:	86 b1       	in	r24, 0x06	; 6
     1fc:	80 6c       	ori	r24, 0xC0	; 192
     1fe:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     200:	36 99       	sbic	0x06, 6	; 6
     202:	fe cf       	rjmp	.-4      	; 0x200 <ADC_read+0x6>
	return linearRegression(ADC);
     204:	84 b1       	in	r24, 0x04	; 4
     206:	95 b1       	in	r25, 0x05	; 5
     208:	bc cf       	rjmp	.-136    	; 0x182 <linearRegression>
     20a:	08 95       	ret

0000020c <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     20c:	de 9a       	sbi	0x1b, 6	; 27
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	ee d7       	rcall	.+4060   	; 0x11ee <wait_ms>
     212:	de 98       	cbi	0x1b, 6	; 27
     214:	8b b3       	in	r24, 0x1b	; 27
     216:	80 7f       	andi	r24, 0xF0	; 240
     218:	8b bb       	out	0x1b, r24	; 27
     21a:	08 95       	ret

0000021c <lcd_command>:
     21c:	cf 93       	push	r28
     21e:	c8 2f       	mov	r28, r24
     220:	dc 98       	cbi	0x1b, 4	; 27
     222:	8b b3       	in	r24, 0x1b	; 27
     224:	9c 2f       	mov	r25, r28
     226:	92 95       	swap	r25
     228:	9f 70       	andi	r25, 0x0F	; 15
     22a:	89 2b       	or	r24, r25
     22c:	8b bb       	out	0x1b, r24	; 27
     22e:	82 e0       	ldi	r24, 0x02	; 2
     230:	ed df       	rcall	.-38     	; 0x20c <lcd_toggle_clear>
     232:	8b b3       	in	r24, 0x1b	; 27
     234:	cf 70       	andi	r28, 0x0F	; 15
     236:	c8 2b       	or	r28, r24
     238:	cb bb       	out	0x1b, r28	; 27
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	e7 df       	rcall	.-50     	; 0x20c <lcd_toggle_clear>
     23e:	dc 9a       	sbi	0x1b, 4	; 27
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <lcd_clear>:
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	ea df       	rcall	.-44     	; 0x21c <lcd_command>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	d0 c7       	rjmp	.+4000   	; 0x11ee <wait_ms>
     24e:	08 95       	ret

00000250 <lcd_home_line1>:
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	e4 cf       	rjmp	.-56     	; 0x21c <lcd_command>
     254:	08 95       	ret

00000256 <lcd_init>:
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	8a bb       	out	0x1a, r24	; 26
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	8b bb       	out	0x1b, r24	; 27
     25e:	de 9a       	sbi	0x1b, 6	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	c4 d7       	rcall	.+3976   	; 0x11ee <wait_ms>
     266:	de 98       	cbi	0x1b, 6	; 27
     268:	85 e0       	ldi	r24, 0x05	; 5
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	c0 d7       	rcall	.+3968   	; 0x11ee <wait_ms>
     26e:	de 9a       	sbi	0x1b, 6	; 27
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	bc d7       	rcall	.+3960   	; 0x11ee <wait_ms>
     276:	de 98       	cbi	0x1b, 6	; 27
     278:	de 9a       	sbi	0x1b, 6	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	b7 d7       	rcall	.+3950   	; 0x11ee <wait_ms>
     280:	de 98       	cbi	0x1b, 6	; 27
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	8b bb       	out	0x1b, r24	; 27
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	c1 df       	rcall	.-126    	; 0x20c <lcd_toggle_clear>
     28a:	8b b3       	in	r24, 0x1b	; 27
     28c:	8b bb       	out	0x1b, r24	; 27
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	bd df       	rcall	.-134    	; 0x20c <lcd_toggle_clear>
     292:	8b b3       	in	r24, 0x1b	; 27
     294:	8e 60       	ori	r24, 0x0E	; 14
     296:	8b bb       	out	0x1b, r24	; 27
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	b8 df       	rcall	.-144    	; 0x20c <lcd_toggle_clear>
     29c:	8b b3       	in	r24, 0x1b	; 27
     29e:	8b bb       	out	0x1b, r24	; 27
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	b4 df       	rcall	.-152    	; 0x20c <lcd_toggle_clear>
     2a4:	8b b3       	in	r24, 0x1b	; 27
     2a6:	86 60       	ori	r24, 0x06	; 6
     2a8:	8b bb       	out	0x1b, r24	; 27
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	af df       	rcall	.-162    	; 0x20c <lcd_toggle_clear>
     2ae:	8b b3       	in	r24, 0x1b	; 27
     2b0:	8b bb       	out	0x1b, r24	; 27
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	ab df       	rcall	.-170    	; 0x20c <lcd_toggle_clear>
     2b6:	d8 9a       	sbi	0x1b, 0	; 27
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	a8 df       	rcall	.-176    	; 0x20c <lcd_toggle_clear>
     2bc:	dc 9a       	sbi	0x1b, 4	; 27
     2be:	c8 cf       	rjmp	.-112    	; 0x250 <lcd_home_line1>
     2c0:	08 95       	ret

000002c2 <lcd_home_line2>:
     2c2:	80 ec       	ldi	r24, 0xC0	; 192
     2c4:	ab cf       	rjmp	.-170    	; 0x21c <lcd_command>
     2c6:	08 95       	ret

000002c8 <lcd_home_line3>:
     2c8:	84 e9       	ldi	r24, 0x94	; 148
     2ca:	a8 cf       	rjmp	.-176    	; 0x21c <lcd_command>
     2cc:	08 95       	ret

000002ce <lcd_home_line4>:
     2ce:	84 ed       	ldi	r24, 0xD4	; 212
     2d0:	a5 cf       	rjmp	.-182    	; 0x21c <lcd_command>
     2d2:	08 95       	ret

000002d4 <lcd_putc>:
     2d4:	cf 93       	push	r28
     2d6:	c8 2f       	mov	r28, r24
     2d8:	8b b3       	in	r24, 0x1b	; 27
     2da:	9c 2f       	mov	r25, r28
     2dc:	92 95       	swap	r25
     2de:	9f 70       	andi	r25, 0x0F	; 15
     2e0:	89 2b       	or	r24, r25
     2e2:	8b bb       	out	0x1b, r24	; 27
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	92 df       	rcall	.-220    	; 0x20c <lcd_toggle_clear>
     2e8:	8b b3       	in	r24, 0x1b	; 27
     2ea:	cf 70       	andi	r28, 0x0F	; 15
     2ec:	c8 2b       	or	r28, r24
     2ee:	cb bb       	out	0x1b, r28	; 27
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	8c df       	rcall	.-232    	; 0x20c <lcd_toggle_clear>
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	c1 55       	subi	r28, 0x51	; 81
     30e:	d1 09       	sbc	r29, r1
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	fe 01       	movw	r30, r28
     31c:	e4 5a       	subi	r30, 0xA4	; 164
     31e:	ff 4f       	sbci	r31, 0xFF	; 255
     320:	41 91       	ld	r20, Z+
     322:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     324:	9f 01       	movw	r18, r30
     326:	61 e5       	ldi	r22, 0x51	; 81
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	ce 01       	movw	r24, r28
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     332:	be 01       	movw	r22, r28
     334:	6f 5f       	subi	r22, 0xFF	; 255
     336:	7f 4f       	sbci	r23, 0xFF	; 255
     338:	82 ec       	ldi	r24, 0xC2	; 194
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     340:	89 2b       	or	r24, r25
     342:	09 f4       	brne	.+2      	; 0x346 <lprintf+0x4e>
     344:	43 c0       	rjmp	.+134    	; 0x3cc <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     346:	be 01       	movw	r22, r28
     348:	6f 5f       	subi	r22, 0xFF	; 255
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	82 ec       	ldi	r24, 0xC2	; 194
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 56 0d 	call	0x1aac	; 0x1aac <strcpy>
	lcd_clear();
     354:	77 df       	rcall	.-274    	; 0x244 <lcd_clear>
     356:	9e 01       	movw	r18, r28
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     35e:	00 e0       	ldi	r16, 0x00	; 0
     360:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     362:	0f 2e       	mov	r0, r31
     364:	f4 e1       	ldi	r31, 0x14	; 20
     366:	ef 2e       	mov	r14, r31
     368:	f1 2c       	mov	r15, r1
     36a:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     36c:	27 c0       	rjmp	.+78     	; 0x3bc <lprintf+0xc4>
		if (*str == '\n') {
     36e:	8a 30       	cpi	r24, 0x0A	; 10
     370:	51 f4       	brne	.+20     	; 0x386 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
     37a:	f7 01       	movw	r30, r14
     37c:	e8 1b       	sub	r30, r24
     37e:	f9 0b       	sbc	r31, r25
     380:	0e 0f       	add	r16, r30
     382:	1f 1f       	adc	r17, r31
     384:	03 c0       	rjmp	.+6      	; 0x38c <lprintf+0x94>
		} else {
			lcd_putc(*str);
     386:	a6 df       	rcall	.-180    	; 0x2d4 <lcd_putc>
			charnum++;
     388:	0f 5f       	subi	r16, 0xFF	; 255
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     38c:	c8 01       	movw	r24, r16
     38e:	b7 01       	movw	r22, r14
     390:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
     394:	89 2b       	or	r24, r25
     396:	91 f4       	brne	.+36     	; 0x3bc <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     398:	c8 01       	movw	r24, r16
     39a:	b7 01       	movw	r22, r14
     39c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodhi4>
     3a0:	62 30       	cpi	r22, 0x02	; 2
     3a2:	71 05       	cpc	r23, r1
     3a4:	41 f0       	breq	.+16     	; 0x3b6 <lprintf+0xbe>
     3a6:	63 30       	cpi	r22, 0x03	; 3
     3a8:	71 05       	cpc	r23, r1
     3aa:	39 f0       	breq	.+14     	; 0x3ba <lprintf+0xc2>
     3ac:	61 30       	cpi	r22, 0x01	; 1
     3ae:	71 05       	cpc	r23, r1
     3b0:	29 f4       	brne	.+10     	; 0x3bc <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     3b2:	87 df       	rcall	.-242    	; 0x2c2 <lcd_home_line2>
				break;
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     3b6:	88 df       	rcall	.-240    	; 0x2c8 <lcd_home_line3>
				break;
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     3ba:	89 df       	rcall	.-238    	; 0x2ce <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     3bc:	f6 01       	movw	r30, r12
     3be:	81 91       	ld	r24, Z+
     3c0:	6f 01       	movw	r12, r30
     3c2:	88 23       	and	r24, r24
     3c4:	19 f0       	breq	.+6      	; 0x3cc <lprintf+0xd4>
     3c6:	00 35       	cpi	r16, 0x50	; 80
     3c8:	11 05       	cpc	r17, r1
     3ca:	8c f2       	brlt	.-94     	; 0x36e <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3cc:	cf 5a       	subi	r28, 0xAF	; 175
     3ce:	df 4f       	sbci	r29, 0xFF	; 255
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <init_map>:
  double deg_to_rad(int degrees){
  	return (((double) degrees) * PI) / 180;
  }

//set all spaces to clear
  void init_map(map_t *m){
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	ec 01       	movw	r28, r24
     3fa:	bc 01       	movw	r22, r24
	  int i, j;
	  for(i=0; i<MAP_Y; i++){
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	80 5d       	subi	r24, 0xD0	; 208
     402:	93 4f       	sbci	r25, 0xF3	; 243
  double deg_to_rad(int degrees){
  	return (((double) degrees) * PI) / 180;
  }

//set all spaces to clear
  void init_map(map_t *m){
     404:	0f 2e       	mov	r0, r31
     406:	fd ed       	ldi	r31, 0xDD	; 221
     408:	ff 2e       	mov	r15, r31
     40a:	f0 2d       	mov	r31, r0
     40c:	0f ef       	ldi	r16, 0xFF	; 255
	  int i, j;
	  for(i=0; i<MAP_Y; i++){
		  for (j=0; j< MAP_X; j++) {
			  //Set marker for width of robo with '-'
			  (i == CENTER_Y && j>=CENTER_X-4 && j<=CENTER_X+4) ?
			   (m->map[i][j] = '-') : (m->map[i][j] = ' ');
     40e:	10 e2       	ldi	r17, 0x20	; 32
     410:	0f 2e       	mov	r0, r31
     412:	fd e2       	ldi	r31, 0x2D	; 45
     414:	ef 2e       	mov	r14, r31
     416:	f0 2d       	mov	r31, r0
     418:	17 c0       	rjmp	.+46     	; 0x448 <init_map+0x5c>
     41a:	47 32       	cpi	r20, 0x27	; 39
     41c:	51 05       	cpc	r21, r1
     41e:	29 f4       	brne	.+10     	; 0x42a <init_map+0x3e>
  void init_map(map_t *m){
	  int i, j;
	  for(i=0; i<MAP_Y; i++){
		  for (j=0; j< MAP_X; j++) {
			  //Set marker for width of robo with '-'
			  (i == CENTER_Y && j>=CENTER_X-4 && j<=CENTER_X+4) ?
     420:	29 30       	cpi	r18, 0x09	; 9
     422:	31 05       	cpc	r19, r1
     424:	10 f4       	brcc	.+4      	; 0x42a <init_map+0x3e>
			   (m->map[i][j] = '-') : (m->map[i][j] = ' ');
     426:	ec 92       	st	X, r14
     428:	01 c0       	rjmp	.+2      	; 0x42c <init_map+0x40>
     42a:	10 83       	st	Z, r17
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	31 96       	adiw	r30, 0x01	; 1
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255

//set all spaces to clear
  void init_map(map_t *m){
	  int i, j;
	  for(i=0; i<MAP_Y; i++){
		  for (j=0; j< MAP_X; j++) {
     434:	2d 32       	cpi	r18, 0x2D	; 45
     436:	31 05       	cpc	r19, r1
     438:	81 f7       	brne	.-32     	; 0x41a <init_map+0x2e>
  }

//set all spaces to clear
  void init_map(map_t *m){
	  int i, j;
	  for(i=0; i<MAP_Y; i++){
     43a:	4f 5f       	subi	r20, 0xFF	; 255
     43c:	5f 4f       	sbci	r21, 0xFF	; 255
     43e:	60 5b       	subi	r22, 0xB0	; 176
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	48 32       	cpi	r20, 0x28	; 40
     444:	51 05       	cpc	r21, r1
     446:	29 f0       	breq	.+10     	; 0x452 <init_map+0x66>
     448:	dc 01       	movw	r26, r24
  double deg_to_rad(int degrees){
  	return (((double) degrees) * PI) / 180;
  }

//set all spaces to clear
  void init_map(map_t *m){
     44a:	fb 01       	movw	r30, r22
     44c:	2f 2d       	mov	r18, r15
     44e:	30 2f       	mov	r19, r16
     450:	e4 cf       	rjmp	.-56     	; 0x41a <init_map+0x2e>
			  (i == CENTER_Y && j>=CENTER_X-4 && j<=CENTER_X+4) ?
			   (m->map[i][j] = '-') : (m->map[i][j] = ' ');
		  }
	  }
	  //Center Marker
	  m->map[CENTER_Y][CENTER_X] = 'X';
     452:	fe 01       	movw	r30, r28
     454:	e9 5a       	subi	r30, 0xA9	; 169
     456:	f3 4f       	sbci	r31, 0xF3	; 243
     458:	88 e5       	ldi	r24, 0x58	; 88
     45a:	80 83       	st	Z, r24
	  m->map[30][CENTER_X]         = '2';
     45c:	e0 5d       	subi	r30, 0xD0	; 208
     45e:	f2 40       	sbci	r31, 0x02	; 2
     460:	82 e3       	ldi	r24, 0x32	; 50
     462:	80 83       	st	Z, r24
	  m->map[20][CENTER_X]         = '4';
     464:	e0 52       	subi	r30, 0x20	; 32
     466:	f3 40       	sbci	r31, 0x03	; 3
     468:	84 e3       	ldi	r24, 0x34	; 52
     46a:	80 83       	st	Z, r24
	  m->map[10][CENTER_X]         = '6';
     46c:	e0 52       	subi	r30, 0x20	; 32
     46e:	f3 40       	sbci	r31, 0x03	; 3
     470:	86 e3       	ldi	r24, 0x36	; 54
     472:	80 83       	st	Z, r24
	  m->map[0][CENTER_X]          = '8';
     474:	88 e3       	ldi	r24, 0x38	; 56
     476:	8f a3       	std	Y+39, r24	; 0x27
  }
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	08 95       	ret

00000486 <place_point>:

//populate the cartesian map. Fills from contact to edge of map
  void place_point(map_t *m, terrain t, float distance, int angle){
     486:	3f 92       	push	r3
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	ec 01       	movw	r28, r24
     4aa:	36 2e       	mov	r3, r22
     4ac:	ca 01       	movw	r24, r20
     4ae:	b9 01       	movw	r22, r18
  	int x, y;
	
	x = (int) (CENTER_X + ((int)(distance / 2) * cos(deg_to_rad(angle))));
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e0       	ldi	r20, 0x00	; 0
     4b6:	5f e3       	ldi	r21, 0x3F	; 63
     4b8:	0e 94 14 0b 	call	0x1628	; 0x1628 <__mulsf3>
     4bc:	99 d7       	rcall	.+3890   	; 0x13f0 <__fixsfsi>
     4be:	88 27       	eor	r24, r24
     4c0:	77 fd       	sbrc	r23, 7
     4c2:	80 95       	com	r24
     4c4:	98 2f       	mov	r25, r24
     4c6:	c7 d7       	rcall	.+3982   	; 0x1456 <__floatsisf>
     4c8:	4b 01       	movw	r8, r22
     4ca:	5c 01       	movw	r10, r24

#include "map.h"

//utility deg to rad
  double deg_to_rad(int degrees){
  	return (((double) degrees) * PI) / 180;
     4cc:	b8 01       	movw	r22, r16
     4ce:	88 27       	eor	r24, r24
     4d0:	77 fd       	sbrc	r23, 7
     4d2:	80 95       	com	r24
     4d4:	98 2f       	mov	r25, r24
     4d6:	bf d7       	rcall	.+3966   	; 0x1456 <__floatsisf>
     4d8:	2b ed       	ldi	r18, 0xDB	; 219
     4da:	3f e0       	ldi	r19, 0x0F	; 15
     4dc:	49 e4       	ldi	r20, 0x49	; 73
     4de:	50 e4       	ldi	r21, 0x40	; 64
     4e0:	0e 94 14 0b 	call	0x1628	; 0x1628 <__mulsf3>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	44 e3       	ldi	r20, 0x34	; 52
     4ea:	53 e4       	ldi	r21, 0x43	; 67
     4ec:	19 d7       	rcall	.+3634   	; 0x1320 <__divsf3>
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24

//populate the cartesian map. Fills from contact to edge of map
  void place_point(map_t *m, terrain t, float distance, int angle){
  	int x, y;
	
	x = (int) (CENTER_X + ((int)(distance / 2) * cos(deg_to_rad(angle))));
     4f2:	13 d7       	rcall	.+3622   	; 0x131a <cos>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c5 01       	movw	r24, r10
     4fa:	b4 01       	movw	r22, r8
     4fc:	0e 94 14 0b 	call	0x1628	; 0x1628 <__mulsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	4c e1       	ldi	r20, 0x1C	; 28
     506:	52 e4       	ldi	r21, 0x42	; 66
     508:	a0 d6       	rcall	.+3392   	; 0x124a <__addsf3>
     50a:	72 d7       	rcall	.+3812   	; 0x13f0 <__fixsfsi>
     50c:	2b 01       	movw	r4, r22
     50e:	3c 01       	movw	r6, r24
     510:	8b 01       	movw	r16, r22
	y = (int) (CENTER_Y - ((int)(distance / 2) * sin(deg_to_rad(angle))));
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 77 0b 	call	0x16ee	; 0x16ee <sin>
		   	
	if (x >= 0 && x < MAP_X && y < MAP_Y && y >= 0) {
     51a:	00 35       	cpi	r16, 0x50	; 80
     51c:	11 05       	cpc	r17, r1
     51e:	08 f0       	brcs	.+2      	; 0x522 <place_point+0x9c>
     520:	3e c0       	rjmp	.+124    	; 0x59e <place_point+0x118>
//populate the cartesian map. Fills from contact to edge of map
  void place_point(map_t *m, terrain t, float distance, int angle){
  	int x, y;
	
	x = (int) (CENTER_X + ((int)(distance / 2) * cos(deg_to_rad(angle))));
	y = (int) (CENTER_Y - ((int)(distance / 2) * sin(deg_to_rad(angle))));
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24
     526:	c5 01       	movw	r24, r10
     528:	b4 01       	movw	r22, r8
     52a:	0e 94 14 0b 	call	0x1628	; 0x1628 <__mulsf3>
     52e:	9b 01       	movw	r18, r22
     530:	ac 01       	movw	r20, r24
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	8c e1       	ldi	r24, 0x1C	; 28
     538:	92 e4       	ldi	r25, 0x42	; 66
     53a:	86 d6       	rcall	.+3340   	; 0x1248 <__subsf3>
     53c:	59 d7       	rcall	.+3762   	; 0x13f0 <__fixsfsi>
		   	
	if (x >= 0 && x < MAP_X && y < MAP_Y && y >= 0) {
     53e:	68 32       	cpi	r22, 0x28	; 40
     540:	71 05       	cpc	r23, r1
     542:	68 f5       	brcc	.+90     	; 0x59e <place_point+0x118>
		//Double Mark denoted by 'X'
		(m->map[y][x] != ' ') ? (m->map[y][x] = 'X') :
     544:	20 e5       	ldi	r18, 0x50	; 80
     546:	26 9f       	mul	r18, r22
     548:	f0 01       	movw	r30, r0
     54a:	27 9f       	mul	r18, r23
     54c:	f0 0d       	add	r31, r0
     54e:	11 24       	eor	r1, r1
     550:	e4 0d       	add	r30, r4
     552:	f5 1d       	adc	r31, r5
     554:	ec 0f       	add	r30, r28
     556:	fd 1f       	adc	r31, r29
     558:	20 81       	ld	r18, Z
     55a:	20 32       	cpi	r18, 0x20	; 32
     55c:	19 f0       	breq	.+6      	; 0x564 <place_point+0xde>
     55e:	88 e5       	ldi	r24, 0x58	; 88
     560:	80 83       	st	Z, r24
     562:	1d c0       	rjmp	.+58     	; 0x59e <place_point+0x118>
		//IR denoted '#' , PING denoted '*'
		(t == IR) ? (m->map[y][x] = '#') : (m->map[y][x] = '*') ;
     564:	31 10       	cpse	r3, r1
     566:	0e c0       	rjmp	.+28     	; 0x584 <place_point+0xfe>
     568:	40 e5       	ldi	r20, 0x50	; 80
     56a:	46 9f       	mul	r20, r22
     56c:	90 01       	movw	r18, r0
     56e:	47 9f       	mul	r20, r23
     570:	30 0d       	add	r19, r0
     572:	11 24       	eor	r1, r1
     574:	42 0e       	add	r4, r18
     576:	53 1e       	adc	r5, r19
     578:	fe 01       	movw	r30, r28
     57a:	e4 0d       	add	r30, r4
     57c:	f5 1d       	adc	r31, r5
     57e:	83 e2       	ldi	r24, 0x23	; 35
     580:	80 83       	st	Z, r24
     582:	0d c0       	rjmp	.+26     	; 0x59e <place_point+0x118>
     584:	40 e5       	ldi	r20, 0x50	; 80
     586:	46 9f       	mul	r20, r22
     588:	90 01       	movw	r18, r0
     58a:	47 9f       	mul	r20, r23
     58c:	30 0d       	add	r19, r0
     58e:	11 24       	eor	r1, r1
     590:	42 0e       	add	r4, r18
     592:	53 1e       	adc	r5, r19
     594:	fe 01       	movw	r30, r28
     596:	e4 0d       	add	r30, r4
     598:	f5 1d       	adc	r31, r5
     59a:	8a e2       	ldi	r24, 0x2A	; 42
     59c:	80 83       	st	Z, r24
		
	}
  
  }
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	3f 90       	pop	r3
     5c0:	08 95       	ret

000005c2 <init>:

// System libraries and components
#include "rover.h"

// Initialize all necessary components
oi_t * init(){
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
	lcd_init();
     5c6:	47 de       	rcall	.-882    	; 0x256 <lcd_init>
	serial_init();
     5c8:	8f dd       	rcall	.-1250   	; 0xe8 <serial_init>
	sei();
     5ca:	78 94       	sei
	ADC_init();
     5cc:	0f de       	rcall	.-994    	; 0x1ec <ADC_init>
	timer1_init();
     5ce:	ce d5       	rcall	.+2972   	; 0x116c <timer1_init>
	timer3_init();
     5d0:	51 d5       	rcall	.+2722   	; 0x1074 <timer3_init>
	oi_t *sensor_data = oi_alloc();
     5d2:	e7 d3       	rcall	.+1998   	; 0xda2 <oi_alloc>
     5d4:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
     5d6:	22 d5       	rcall	.+2628   	; 0x101c <oi_init>
	
	serial_puts("Initialized.");
     5d8:	85 e9       	ldi	r24, 0x95	; 149
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	99 dd       	rcall	.-1230   	; 0x110 <serial_puts>
	return sensor_data;	
}
     5de:	ce 01       	movw	r24, r28
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <determineBoundryType>:
	
	return NO_BOUNDRY;
}

int determineBoundryType(int reading){
	if ( reading < WHITE_BOUNDRY_LOWER ) {
     5e6:	8e 3e       	cpi	r24, 0xEE	; 238
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	92 07       	cpc	r25, r18
     5ec:	44 f0       	brlt	.+16     	; 0x5fe <determineBoundryType+0x18>
		return NO_BOUNDRY;
	} else if ( reading >= WHITE_BOUNDRY_LOWER && reading < WHITE_BOUNDRY_UPPER ) {
     5ee:	8e 5e       	subi	r24, 0xEE	; 238
     5f0:	92 40       	sbci	r25, 0x02	; 2
     5f2:	8a 3f       	cpi	r24, 0xFA	; 250
     5f4:	91 05       	cpc	r25, r1
     5f6:	30 f4       	brcc	.+12     	; 0x604 <determineBoundryType+0x1e>
		return WHITE_BOUNDRY;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	08 95       	ret
	return NO_BOUNDRY;
}

int determineBoundryType(int reading){
	if ( reading < WHITE_BOUNDRY_LOWER ) {
		return NO_BOUNDRY;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	08 95       	ret
	} else if ( reading >= WHITE_BOUNDRY_LOWER && reading < WHITE_BOUNDRY_UPPER ) {
		return WHITE_BOUNDRY;
	} else {
		return FINISH_BOUNDRY;
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     608:	08 95       	ret

0000060a <winProcedure>:
		boundarySprint+=10;
		craterSprint+=10;
	}
}

void winProcedure(oi_t * sensorData){
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	c2 56       	subi	r28, 0x62	; 98
     618:	d1 09       	sbc	r29, r1
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	8c 01       	movw	r16, r24
	unsigned char mario1NumNotes = 49;
	unsigned char mario1Notes[49]    = {48, 60, 45, 57, 46, 58,  0, 48, 60, 45, 57, 46, 58,  0, 41, 53, 38, 50, 39, 51,  0, 41, 53, 38, 50, 39, 51,  0, 51, 50, 49, 48, 51, 50, 44, 43, 49, 48, 54, 53, 52, 58, 57, 56, 51, 47, 46, 45, 44 };
     626:	81 e3       	ldi	r24, 0x31	; 49
     628:	e8 e2       	ldi	r30, 0x28	; 40
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	de 01       	movw	r26, r28
     62e:	11 96       	adiw	r26, 0x01	; 1
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <winProcedure+0x26>
	unsigned char mario1Duration[49] = {12, 12, 12, 12, 12, 12, 62, 12, 12, 12, 12, 12, 12, 62, 12, 12, 12, 12, 12, 12, 62, 12, 12, 12, 12, 12, 12, 48,  8,  8,  8, 24, 24, 24, 24, 24, 24,  8,  8,  8,  8,  8,  8, 16, 16, 16, 16, 16, 16 };
     638:	81 e3       	ldi	r24, 0x31	; 49
     63a:	e9 e5       	ldi	r30, 0x59	; 89
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	de 01       	movw	r26, r28
     640:	d2 96       	adiw	r26, 0x32	; 50
     642:	01 90       	ld	r0, Z+
     644:	0d 92       	st	X+, r0
     646:	8a 95       	dec	r24
     648:	e1 f7       	brne	.-8      	; 0x642 <winProcedure+0x38>
	oi_load_song(MARIO_UNDERWORLD, mario1NumNotes, mario1Notes, mario1Duration);
     64a:	9e 01       	movw	r18, r28
     64c:	2e 5c       	subi	r18, 0xCE	; 206
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	ae 01       	movw	r20, r28
     652:	4f 5f       	subi	r20, 0xFF	; 255
     654:	5f 4f       	sbci	r21, 0xFF	; 255
     656:	61 e3       	ldi	r22, 0x31	; 49
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	e2 d3       	rcall	.+1988   	; 0xe24 <oi_load_song>
	oi_play_song(MARIO_UNDERWORLD);
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	10 d4       	rcall	.+2080   	; 0xe86 <oi_play_song>
	
	turn(1000, sensorData);
     666:	b8 01       	movw	r22, r16
     668:	88 ee       	ldi	r24, 0xE8	; 232
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	f1 d2       	rcall	.+1506   	; 0xc50 <turn>
}
     66e:	ce 59       	subi	r28, 0x9E	; 158
     670:	df 4f       	sbci	r29, 0xFF	; 255
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <receiveCommand>:

int receiveCommand(){
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	2a 97       	sbiw	r28, 0x0a	; 10
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
	// Ignore garbage before command
	while ( (serial_getc() != '!') ) {}
     69e:	30 dd       	rcall	.-1440   	; 0x100 <serial_getc>
     6a0:	81 32       	cpi	r24, 0x21	; 33
     6a2:	e9 f7       	brne	.-6      	; 0x69e <receiveCommand+0x18>
	
	char command[10] = "\0\0\0\0\0\0\0\0\0\0";
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	ea e8       	ldi	r30, 0x8A	; 138
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	de 01       	movw	r26, r28
     6ac:	11 96       	adiw	r26, 0x01	; 1
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	8a 95       	dec	r24
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <receiveCommand+0x28>
     6b6:	8e 01       	movw	r16, r28
     6b8:	0f 5f       	subi	r16, 0xFF	; 255
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255
	int commandCharIndex = 0;
	char currentChar;
	
	// Read command
	while ( (currentChar = serial_getc()) != ' ') {
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <receiveCommand+0x3e>
		command[commandCharIndex] = currentChar;
     6be:	f8 01       	movw	r30, r16
     6c0:	81 93       	st	Z+, r24
     6c2:	8f 01       	movw	r16, r30
	char command[10] = "\0\0\0\0\0\0\0\0\0\0";
	int commandCharIndex = 0;
	char currentChar;
	
	// Read command
	while ( (currentChar = serial_getc()) != ' ') {
     6c4:	1d dd       	rcall	.-1478   	; 0x100 <serial_getc>
     6c6:	80 32       	cpi	r24, 0x20	; 32
     6c8:	d1 f7       	brne	.-12     	; 0x6be <receiveCommand+0x38>
		command[commandCharIndex] = currentChar;
		commandCharIndex++;
	}
	
	if ( !strcmp(command, "TURN") || !strcmp(command, "turn") ) {
     6ca:	62 ea       	ldi	r22, 0xA2	; 162
     6cc:	71 e0       	ldi	r23, 0x01	; 1
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     6d6:	89 2b       	or	r24, r25
     6d8:	59 f1       	breq	.+86     	; 0x730 <receiveCommand+0xaa>
     6da:	67 ea       	ldi	r22, 0xA7	; 167
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	ce 01       	movw	r24, r28
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     6e6:	89 2b       	or	r24, r25
     6e8:	31 f1       	breq	.+76     	; 0x736 <receiveCommand+0xb0>
		return TURN;
	}
	
	if ( !strcmp(command, "MOVE") || !strcmp(command, "move") ) {
     6ea:	6c ea       	ldi	r22, 0xAC	; 172
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     6f6:	89 2b       	or	r24, r25
     6f8:	09 f1       	breq	.+66     	; 0x73c <receiveCommand+0xb6>
     6fa:	61 eb       	ldi	r22, 0xB1	; 177
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     706:	89 2b       	or	r24, r25
     708:	e1 f0       	breq	.+56     	; 0x742 <receiveCommand+0xbc>
		return MOVE;
	}
	
	if ( !strcmp(command, "WIN") || !strcmp(command, "win") ) {
     70a:	66 eb       	ldi	r22, 0xB6	; 182
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     716:	89 2b       	or	r24, r25
     718:	b9 f0       	breq	.+46     	; 0x748 <receiveCommand+0xc2>
     71a:	6a eb       	ldi	r22, 0xBA	; 186
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	ce 01       	movw	r24, r28
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <strcmp>
     726:	89 2b       	or	r24, r25
     728:	91 f4       	brne	.+36     	; 0x74e <receiveCommand+0xc8>
		return WIN;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	11 c0       	rjmp	.+34     	; 0x752 <receiveCommand+0xcc>
		command[commandCharIndex] = currentChar;
		commandCharIndex++;
	}
	
	if ( !strcmp(command, "TURN") || !strcmp(command, "turn") ) {
		return TURN;
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e c0       	rjmp	.+28     	; 0x752 <receiveCommand+0xcc>
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0b c0       	rjmp	.+22     	; 0x752 <receiveCommand+0xcc>
	}
	
	if ( !strcmp(command, "MOVE") || !strcmp(command, "move") ) {
		return MOVE;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	08 c0       	rjmp	.+16     	; 0x752 <receiveCommand+0xcc>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	05 c0       	rjmp	.+10     	; 0x752 <receiveCommand+0xcc>
	}
	
	if ( !strcmp(command, "WIN") || !strcmp(command, "win") ) {
		return WIN;
     748:	83 e0       	ldi	r24, 0x03	; 3
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <receiveCommand+0xcc>
	}
	
	return NONE;
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
}
     752:	2a 96       	adiw	r28, 0x0a	; 10
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <receiveQuantity>:

int receiveQuantity(){
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	2a 97       	sbiw	r28, 0x0a	; 10
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	7c 01       	movw	r14, r24
	char quantity[10];
	int quantityCharIndex = 0;
     78a:	00 e0       	ldi	r16, 0x00	; 0
     78c:	10 e0       	ldi	r17, 0x00	; 0
	char currentChar;
	
	// Read quantity
	while ( (currentChar = serial_getc()) != '!') {
     78e:	05 c0       	rjmp	.+10     	; 0x79a <receiveQuantity+0x32>
		quantity[quantityCharIndex] = currentChar;
     790:	f7 01       	movw	r30, r14
     792:	81 93       	st	Z+, r24
     794:	7f 01       	movw	r14, r30
		quantityCharIndex++;
     796:	0f 5f       	subi	r16, 0xFF	; 255
     798:	1f 4f       	sbci	r17, 0xFF	; 255
	char quantity[10];
	int quantityCharIndex = 0;
	char currentChar;
	
	// Read quantity
	while ( (currentChar = serial_getc()) != '!') {
     79a:	b2 dc       	rcall	.-1692   	; 0x100 <serial_getc>
     79c:	81 32       	cpi	r24, 0x21	; 33
     79e:	c1 f7       	brne	.-16     	; 0x790 <receiveQuantity+0x28>
		quantity[quantityCharIndex] = currentChar;
		quantityCharIndex++;
	}
	
	if ( quantityCharIndex == 0 ) {
     7a0:	01 2b       	or	r16, r17
     7a2:	29 f0       	breq	.+10     	; 0x7ae <receiveQuantity+0x46>
		return 0;
	}
	
	return atoi(quantity);
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <atoi>
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <receiveQuantity+0x4a>
		quantity[quantityCharIndex] = currentChar;
		quantityCharIndex++;
	}
	
	if ( quantityCharIndex == 0 ) {
		return 0;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return atoi(quantity);
}
     7b2:	2a 96       	adiw	r28, 0x0a	; 10
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	08 95       	ret

000007cc <print>:
		default:
			break;
	}
}

void print(char* s){
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	d8 2f       	mov	r29, r24
     7d2:	c9 2f       	mov	r28, r25
	lprintf(s);
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	8f dd       	rcall	.-1250   	; 0x2f8 <lprintf>
	serial_puts(s);
     7da:	8d 2f       	mov	r24, r29
     7dc:	9c 2f       	mov	r25, r28
     7de:	98 dc       	rcall	.-1744   	; 0x110 <serial_puts>
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <slowFullScan>:
	serial_puts("Initialized.");
	return sensor_data;	
}

// Full 180 degree scan to populate and display map
void slowFullScan(map_t *m){
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	7c 01       	movw	r14, r24
	print("Scanning...");
     7fc:	8e eb       	ldi	r24, 0xBE	; 190
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	e5 df       	rcall	.-54     	; 0x7cc <print>
	int angle = 0;
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Do a 180 degree sweep, populate amp
	while(angle <= 180)
	{
		move_servo(angle);
     806:	ce 01       	movw	r24, r28
     808:	4b d4       	rcall	.+2198   	; 0x10a0 <move_servo>

		place_point(m, IR, ADC_read(),  angle);
     80a:	f7 dc       	rcall	.-1554   	; 0x1fa <ADC_read>
     80c:	bc 01       	movw	r22, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	1f d6       	rcall	.+3134   	; 0x1452 <__floatunsisf>
     814:	9b 01       	movw	r18, r22
     816:	ac 01       	movw	r20, r24
     818:	8e 01       	movw	r16, r28
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	c7 01       	movw	r24, r14
     81e:	33 de       	rcall	.-922    	; 0x486 <place_point>
		place_point(m, P,  ping_read(), angle);
     820:	bf d4       	rcall	.+2430   	; 0x11a0 <ping_read>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	c7 01       	movw	r24, r14
     82a:	2d de       	rcall	.-934    	; 0x486 <place_point>
		
		angle +=2;
     82c:	22 96       	adiw	r28, 0x02	; 2
		wait_ms(75);
     82e:	8b e4       	ldi	r24, 0x4B	; 75
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	dd d4       	rcall	.+2490   	; 0x11ee <wait_ms>
void slowFullScan(map_t *m){
	print("Scanning...");
	int angle = 0;
	
	//Do a 180 degree sweep, populate amp
	while(angle <= 180)
     834:	c6 3b       	cpi	r28, 0xB6	; 182
     836:	d1 05       	cpc	r29, r1
     838:	31 f7       	brne	.-52     	; 0x806 <slowFullScan+0x1c>
     83a:	e7 01       	movw	r28, r14
     83c:	67 01       	movw	r12, r14
     83e:	80 e8       	ldi	r24, 0x80	; 128
     840:	c8 1a       	sub	r12, r24
     842:	83 ef       	ldi	r24, 0xF3	; 243
     844:	d8 0a       	sbc	r13, r24
     846:	09 c0       	rjmp	.+18     	; 0x85a <slowFullScan+0x70>
	
	//Display Map
	int i, j;
	for(i=0; i < MAP_Y; i++){
		for(j=0; j < MAP_X; j++){
			serial_putc(m->map[i][j]);
     848:	89 91       	ld	r24, Y+
     84a:	5e dc       	rcall	.-1860   	; 0x108 <serial_putc>
	}
	
	//Display Map
	int i, j;
	for(i=0; i < MAP_Y; i++){
		for(j=0; j < MAP_X; j++){
     84c:	c0 17       	cp	r28, r16
     84e:	d1 07       	cpc	r29, r17
     850:	d9 f7       	brne	.-10     	; 0x848 <slowFullScan+0x5e>
		wait_ms(75);
	}
	
	//Display Map
	int i, j;
	for(i=0; i < MAP_Y; i++){
     852:	c0 16       	cp	r12, r16
     854:	d1 06       	cpc	r13, r17
     856:	29 f0       	breq	.+10     	; 0x862 <slowFullScan+0x78>
     858:	e8 01       	movw	r28, r16
     85a:	8e 01       	movw	r16, r28
     85c:	00 5b       	subi	r16, 0xB0	; 176
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	f3 cf       	rjmp	.-26     	; 0x848 <slowFullScan+0x5e>
		for(j=0; j < MAP_X; j++){
			serial_putc(m->map[i][j]);
		}
	}

	init_map(m);
     862:	c7 01       	movw	r24, r14
     864:	c3 dd       	rcall	.-1146   	; 0x3ec <init_map>
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	08 95       	ret

00000878 <rapidForwardScan>:

// Do a short / RAPID forward scan from approx 45 - 135 to prevent collisions
//CHANGED: Lessened sweep angle, lessened detect distance to 15 cm
int rapidForwardScan(){
     878:	2f 92       	push	r2
     87a:	3f 92       	push	r3
     87c:	4f 92       	push	r4
     87e:	5f 92       	push	r5
     880:	6f 92       	push	r6
     882:	7f 92       	push	r7
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <rapidForwardScan+0x26>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <rapidForwardScan+0x28>
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	0f 2e       	mov	r0, r31
     8a6:	fe e2       	ldi	r31, 0x2E	; 46
     8a8:	2f 2e       	mov	r2, r31
     8aa:	31 2c       	mov	r3, r1
     8ac:	f0 2d       	mov	r31, r0
		float angle = 45;
		float pingAvg = 100;
		float irAvg = 100;
     8ae:	0f 2e       	mov	r0, r31
     8b0:	41 2c       	mov	r4, r1
     8b2:	51 2c       	mov	r5, r1
     8b4:	f8 ec       	ldi	r31, 0xC8	; 200
     8b6:	6f 2e       	mov	r6, r31
     8b8:	f2 e4       	ldi	r31, 0x42	; 66
     8ba:	7f 2e       	mov	r7, r31
     8bc:	f0 2d       	mov	r31, r0

// Do a short / RAPID forward scan from approx 45 - 135 to prevent collisions
//CHANGED: Lessened sweep angle, lessened detect distance to 15 cm
int rapidForwardScan(){
		float angle = 45;
		float pingAvg = 100;
     8be:	53 01       	movw	r10, r6
     8c0:	42 01       	movw	r8, r4
}

// Do a short / RAPID forward scan from approx 45 - 135 to prevent collisions
//CHANGED: Lessened sweep angle, lessened detect distance to 15 cm
int rapidForwardScan(){
		float angle = 45;
     8c2:	0f 2e       	mov	r0, r31
     8c4:	c1 2c       	mov	r12, r1
     8c6:	d1 2c       	mov	r13, r1
     8c8:	f4 e3       	ldi	r31, 0x34	; 52
     8ca:	ef 2e       	mov	r14, r31
     8cc:	f2 e4       	ldi	r31, 0x42	; 66
     8ce:	ff 2e       	mov	r15, r31
     8d0:	f0 2d       	mov	r31, r0
		float irAvg = 100;
		
		//Do a 180 degree sweep
		while(angle <= 135)
		{
			move_servo(angle);
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	91 d5       	rcall	.+2850   	; 0x13fa <__fixunssfsi>
     8d8:	cb 01       	movw	r24, r22
     8da:	e2 d3       	rcall	.+1988   	; 0x10a0 <move_servo>
			
			//PING
			pingAvg = (ping_read() * 0.33) + (pingAvg * 0.66);
     8dc:	61 d4       	rcall	.+2242   	; 0x11a0 <ping_read>
     8de:	69 83       	std	Y+1, r22	; 0x01
     8e0:	7a 83       	std	Y+2, r23	; 0x02
     8e2:	8b 83       	std	Y+3, r24	; 0x03
     8e4:	9c 83       	std	Y+4, r25	; 0x04
     8e6:	23 ec       	ldi	r18, 0xC3	; 195
     8e8:	35 ef       	ldi	r19, 0xF5	; 245
     8ea:	48 e2       	ldi	r20, 0x28	; 40
     8ec:	5f e3       	ldi	r21, 0x3F	; 63
     8ee:	c5 01       	movw	r24, r10
     8f0:	b4 01       	movw	r22, r8
     8f2:	9a d6       	rcall	.+3380   	; 0x1628 <__mulsf3>
     8f4:	4b 01       	movw	r8, r22
     8f6:	5c 01       	movw	r10, r24
     8f8:	23 ec       	ldi	r18, 0xC3	; 195
     8fa:	35 ef       	ldi	r19, 0xF5	; 245
     8fc:	48 ea       	ldi	r20, 0xA8	; 168
     8fe:	5e e3       	ldi	r21, 0x3E	; 62
     900:	69 81       	ldd	r22, Y+1	; 0x01
     902:	7a 81       	ldd	r23, Y+2	; 0x02
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	9c 81       	ldd	r25, Y+4	; 0x04
     908:	8f d6       	rcall	.+3358   	; 0x1628 <__mulsf3>
     90a:	a5 01       	movw	r20, r10
     90c:	94 01       	movw	r18, r8
     90e:	9d d4       	rcall	.+2362   	; 0x124a <__addsf3>
     910:	4b 01       	movw	r8, r22
     912:	5c 01       	movw	r10, r24
			
			//IR
			irAvg = (linearRegression(ADC_read()) * 0.33) + (irAvg * 0.66);
     914:	72 dc       	rcall	.-1820   	; 0x1fa <ADC_read>
     916:	35 dc       	rcall	.-1942   	; 0x182 <linearRegression>
     918:	8c 01       	movw	r16, r24
     91a:	23 ec       	ldi	r18, 0xC3	; 195
     91c:	35 ef       	ldi	r19, 0xF5	; 245
     91e:	48 e2       	ldi	r20, 0x28	; 40
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	c3 01       	movw	r24, r6
     924:	b2 01       	movw	r22, r4
     926:	80 d6       	rcall	.+3328   	; 0x1628 <__mulsf3>
     928:	2b 01       	movw	r4, r22
     92a:	3c 01       	movw	r6, r24
     92c:	b8 01       	movw	r22, r16
     92e:	88 27       	eor	r24, r24
     930:	77 fd       	sbrc	r23, 7
     932:	80 95       	com	r24
     934:	98 2f       	mov	r25, r24
     936:	8f d5       	rcall	.+2846   	; 0x1456 <__floatsisf>
     938:	23 ec       	ldi	r18, 0xC3	; 195
     93a:	35 ef       	ldi	r19, 0xF5	; 245
     93c:	48 ea       	ldi	r20, 0xA8	; 168
     93e:	5e e3       	ldi	r21, 0x3E	; 62
     940:	73 d6       	rcall	.+3302   	; 0x1628 <__mulsf3>
     942:	a3 01       	movw	r20, r6
     944:	92 01       	movw	r18, r4
     946:	81 d4       	rcall	.+2306   	; 0x124a <__addsf3>
     948:	2b 01       	movw	r4, r22
     94a:	3c 01       	movw	r6, r24
			
			//TODO: To 15
			if ( pingAvg < 25 || irAvg < 25 ) {
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	48 ec       	ldi	r20, 0xC8	; 200
     952:	51 e4       	ldi	r21, 0x41	; 65
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	dc d4       	rcall	.+2488   	; 0x1312 <__cmpsf2>
     95a:	88 23       	and	r24, r24
     95c:	4c f0       	brlt	.+18     	; 0x970 <rapidForwardScan+0xf8>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	48 ec       	ldi	r20, 0xC8	; 200
     964:	51 e4       	ldi	r21, 0x41	; 65
     966:	c3 01       	movw	r24, r6
     968:	b2 01       	movw	r22, r4
     96a:	d3 d4       	rcall	.+2470   	; 0x1312 <__cmpsf2>
     96c:	88 23       	and	r24, r24
     96e:	1c f4       	brge	.+6      	; 0x976 <rapidForwardScan+0xfe>
				print("Collision detected");
     970:	8a ec       	ldi	r24, 0xCA	; 202
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	2b df       	rcall	.-426    	; 0x7cc <print>
			}
			
			angle +=2;
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e4       	ldi	r21, 0x40	; 64
     97e:	c7 01       	movw	r24, r14
     980:	b6 01       	movw	r22, r12
     982:	63 d4       	rcall	.+2246   	; 0x124a <__addsf3>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	28 1a       	sub	r2, r24
     98c:	31 08       	sbc	r3, r1
		float angle = 45;
		float pingAvg = 100;
		float irAvg = 100;
		
		//Do a 180 degree sweep
		while(angle <= 135)
     98e:	21 14       	cp	r2, r1
     990:	31 04       	cpc	r3, r1
     992:	09 f0       	breq	.+2      	; 0x996 <rapidForwardScan+0x11e>
     994:	9e cf       	rjmp	.-196    	; 0x8d2 <rapidForwardScan+0x5a>
			
			angle +=2;
		}
		
		return 0;
}
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	7f 90       	pop	r7
     9bc:	6f 90       	pop	r6
     9be:	5f 90       	pop	r5
     9c0:	4f 90       	pop	r4
     9c2:	3f 90       	pop	r3
     9c4:	2f 90       	pop	r2
     9c6:	08 95       	ret

000009c8 <detectColoredBoundry>:

// Detect tape boundry with light sensor
int detectColoredBoundry(oi_t * sensor_data){
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
	int left_sensor = sensor_data->cliff_left_signal;
	int front_left_sensor = sensor_data->cliff_frontleft_signal;
	int front_right_sensor = sensor_data->cliff_frontright_signal;
	int right_sensor = sensor_data->cliff_right_signal;
	
	int left_reading = determineBoundryType(left_sensor);
     9da:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9de:	03 de       	rcall	.-1018   	; 0x5e6 <determineBoundryType>
     9e0:	8c 01       	movw	r16, r24
	int front_left_reading = determineBoundryType(front_left_sensor);
     9e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9e6:	ff dd       	rcall	.-1026   	; 0x5e6 <determineBoundryType>
     9e8:	6c 01       	movw	r12, r24
	int front_right_reading = determineBoundryType(front_right_sensor);
     9ea:	88 a1       	ldd	r24, Y+32	; 0x20
     9ec:	99 a1       	ldd	r25, Y+33	; 0x21
     9ee:	fb dd       	rcall	.-1034   	; 0x5e6 <determineBoundryType>
     9f0:	7c 01       	movw	r14, r24
	int right_reading = determineBoundryType(right_sensor);
     9f2:	8a a1       	ldd	r24, Y+34	; 0x22
     9f4:	9b a1       	ldd	r25, Y+35	; 0x23
     9f6:	f7 dd       	rcall	.-1042   	; 0x5e6 <determineBoundryType>
	
	if ( left_reading == WHITE_BOUNDRY || front_right_reading == WHITE_BOUNDRY || front_left_reading == WHITE_BOUNDRY || right_reading == WHITE_BOUNDRY ) {
     9f8:	01 30       	cpi	r16, 0x01	; 1
     9fa:	11 05       	cpc	r17, r1
     9fc:	61 f0       	breq	.+24     	; 0xa16 <detectColoredBoundry+0x4e>
     9fe:	21 e0       	ldi	r18, 0x01	; 1
     a00:	e2 16       	cp	r14, r18
     a02:	f1 04       	cpc	r15, r1
     a04:	61 f0       	breq	.+24     	; 0xa1e <detectColoredBoundry+0x56>
     a06:	21 e0       	ldi	r18, 0x01	; 1
     a08:	c2 16       	cp	r12, r18
     a0a:	d1 04       	cpc	r13, r1
     a0c:	41 f0       	breq	.+16     	; 0xa1e <detectColoredBoundry+0x56>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	91 05       	cpc	r25, r1
     a12:	b9 f4       	brne	.+46     	; 0xa42 <detectColoredBoundry+0x7a>
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <detectColoredBoundry+0x5e>
		if ( left_reading == WHITE_BOUNDRY ) {
			print("Left  Boundary detected");
     a16:	8d ed       	ldi	r24, 0xDD	; 221
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	d8 de       	rcall	.-592    	; 0x7cc <print>
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <detectColoredBoundry+0x64>
		} else if ( front_left_reading == WHITE_BOUNDRY || front_right_reading == WHITE_BOUNDRY ) {
			print("Forward boundary detected");
     a1e:	85 ef       	ldi	r24, 0xF5	; 245
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	d4 de       	rcall	.-600    	; 0x7cc <print>
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <detectColoredBoundry+0x64>
		} else {
			print("Right boundary detected");
     a26:	8f e0       	ldi	r24, 0x0F	; 15
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	d0 de       	rcall	.-608    	; 0x7cc <print>
		}
		
		move(-100, -100, 50, sensor_data);
     a2c:	9e 01       	movw	r18, r28
     a2e:	42 e3       	ldi	r20, 0x32	; 50
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	6c e9       	ldi	r22, 0x9C	; 156
     a34:	7f ef       	ldi	r23, 0xFF	; 255
     a36:	8c e9       	ldi	r24, 0x9C	; 156
     a38:	9f ef       	ldi	r25, 0xFF	; 255
     a3a:	6c d1       	rcall	.+728    	; 0xd14 <move>
		return WHITE_BOUNDRY;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	17 c0       	rjmp	.+46     	; 0xa70 <detectColoredBoundry+0xa8>
	}
	
	if ( left_reading == FINISH_BOUNDRY || front_right_reading == FINISH_BOUNDRY || front_left_reading == FINISH_BOUNDRY || right_reading == FINISH_BOUNDRY ) {
     a42:	02 30       	cpi	r16, 0x02	; 2
     a44:	11 05       	cpc	r17, r1
     a46:	51 f0       	breq	.+20     	; 0xa5c <detectColoredBoundry+0x94>
     a48:	22 e0       	ldi	r18, 0x02	; 2
     a4a:	e2 16       	cp	r14, r18
     a4c:	f1 04       	cpc	r15, r1
     a4e:	31 f0       	breq	.+12     	; 0xa5c <detectColoredBoundry+0x94>
     a50:	22 e0       	ldi	r18, 0x02	; 2
     a52:	c2 16       	cp	r12, r18
     a54:	d1 04       	cpc	r13, r1
     a56:	11 f0       	breq	.+4      	; 0xa5c <detectColoredBoundry+0x94>
     a58:	02 97       	sbiw	r24, 0x02	; 2
     a5a:	41 f4       	brne	.+16     	; 0xa6c <detectColoredBoundry+0xa4>
		print("Finish Detected.");
     a5c:	87 e2       	ldi	r24, 0x27	; 39
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	b5 de       	rcall	.-662    	; 0x7cc <print>
		winProcedure(sensor_data);
     a62:	ce 01       	movw	r24, r28
     a64:	d2 dd       	rcall	.-1116   	; 0x60a <winProcedure>
		return FINISH_BOUNDRY;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <detectColoredBoundry+0xa8>
	}
	
	return NO_BOUNDRY;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
}
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	08 95       	ret

00000a82 <detectCrater>:
		return FINISH_BOUNDRY;
	}
}

// Crater detection
int detectCrater(oi_t * sensor_data){
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
	int left_cliff = sensor_data->cliff_left_signal;
	int front_left_cliff = sensor_data->cliff_frontleft_signal;
     a88:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a8a:	2f 8d       	ldd	r18, Y+31	; 0x1f
	int front_right_cliff = sensor_data->cliff_frontright_signal;
     a8c:	78 a1       	ldd	r23, Y+32	; 0x20
     a8e:	69 a1       	ldd	r22, Y+33	; 0x21
	int right_cliff = sensor_data->cliff_right_signal;
     a90:	4a a1       	ldd	r20, Y+34	; 0x22
     a92:	5b a1       	ldd	r21, Y+35	; 0x23
	
	// Naive cliff detection
	if ( !left_cliff || !right_cliff || !front_right_cliff || !front_left_cliff ) {
     a94:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a96:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a98:	89 2b       	or	r24, r25
     a9a:	69 f0       	breq	.+26     	; 0xab6 <detectCrater+0x34>
}

// Crater detection
int detectCrater(oi_t * sensor_data){
	int left_cliff = sensor_data->cliff_left_signal;
	int front_left_cliff = sensor_data->cliff_frontleft_signal;
     a9c:	83 2f       	mov	r24, r19
     a9e:	92 2f       	mov	r25, r18
	int front_right_cliff = sensor_data->cliff_frontright_signal;
     aa0:	27 2f       	mov	r18, r23
     aa2:	36 2f       	mov	r19, r22
	int right_cliff = sensor_data->cliff_right_signal;
	
	// Naive cliff detection
	if ( !left_cliff || !right_cliff || !front_right_cliff || !front_left_cliff ) {
     aa4:	45 2b       	or	r20, r21
     aa6:	59 f0       	breq	.+22     	; 0xabe <detectCrater+0x3c>
     aa8:	23 2b       	or	r18, r19
     aaa:	69 f0       	breq	.+26     	; 0xac6 <detectCrater+0x44>
     aac:	89 2b       	or	r24, r25
     aae:	59 f0       	breq	.+22     	; 0xac6 <detectCrater+0x44>
		
		move(-100,-100,100,sensor_data);
		return 1;
	}

	return 0;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	19 c0       	rjmp	.+50     	; 0xae8 <detectCrater+0x66>
	int right_cliff = sensor_data->cliff_right_signal;
	
	// Naive cliff detection
	if ( !left_cliff || !right_cliff || !front_right_cliff || !front_left_cliff ) {
		if ( !left_cliff ) {
			print("Left Cliff detected");
     ab6:	88 e3       	ldi	r24, 0x38	; 56
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	88 de       	rcall	.-752    	; 0x7cc <print>
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <detectCrater+0x52>
		} else if ( !front_left_cliff || !front_right_cliff ) {
     abe:	89 2b       	or	r24, r25
     ac0:	11 f0       	breq	.+4      	; 0xac6 <detectCrater+0x44>
     ac2:	23 2b       	or	r18, r19
     ac4:	21 f4       	brne	.+8      	; 0xace <detectCrater+0x4c>
			print("Front Cliff Detected");
     ac6:	8c e4       	ldi	r24, 0x4C	; 76
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	80 de       	rcall	.-768    	; 0x7cc <print>
     acc:	03 c0       	rjmp	.+6      	; 0xad4 <detectCrater+0x52>
		} else {
			print("Right Cliff Detected");
     ace:	81 e6       	ldi	r24, 0x61	; 97
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	7c de       	rcall	.-776    	; 0x7cc <print>
		}
		
		move(-100,-100,100,sensor_data);
     ad4:	9e 01       	movw	r18, r28
     ad6:	44 e6       	ldi	r20, 0x64	; 100
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	6c e9       	ldi	r22, 0x9C	; 156
     adc:	7f ef       	ldi	r23, 0xFF	; 255
     ade:	8c e9       	ldi	r24, 0x9C	; 156
     ae0:	9f ef       	ldi	r25, 0xFF	; 255
     ae2:	18 d1       	rcall	.+560    	; 0xd14 <move>
		return 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
	}

	return 0;
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <moveCautiously>:

void moveCautiously(int cm, oi_t * sensorData){
     aee:	6f 92       	push	r6
     af0:	7f 92       	push	r7
     af2:	8f 92       	push	r8
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	4c 01       	movw	r8, r24
     b0c:	5b 01       	movw	r10, r22
	int currentDistanceTravelled = 0;
	int detectedAngle = 0;
	int scanSprint = -1, boundarySprint = -1, craterSprint = -1;
	
	while ( currentDistanceTravelled < cm) {
     b0e:	18 16       	cp	r1, r24
     b10:	19 06       	cpc	r1, r25
     b12:	0c f0       	brlt	.+2      	; 0xb16 <moveCautiously+0x28>
     b14:	46 c0       	rjmp	.+140    	; 0xba2 <moveCautiously+0xb4>
}

void moveCautiously(int cm, oi_t * sensorData){
	int currentDistanceTravelled = 0;
	int detectedAngle = 0;
	int scanSprint = -1, boundarySprint = -1, craterSprint = -1;
     b16:	ee 24       	eor	r14, r14
     b18:	ea 94       	dec	r14
     b1a:	fe 2c       	mov	r15, r14
     b1c:	0f ef       	ldi	r16, 0xFF	; 255
     b1e:	1f ef       	ldi	r17, 0xFF	; 255
     b20:	cf ef       	ldi	r28, 0xFF	; 255
     b22:	df ef       	ldi	r29, 0xFF	; 255

	return 0;
}

void moveCautiously(int cm, oi_t * sensorData){
	int currentDistanceTravelled = 0;
     b24:	c1 2c       	mov	r12, r1
     b26:	d1 2c       	mov	r13, r1
	
	while ( currentDistanceTravelled < cm) {
		
		// Scan every 10CM, prevent collisions
		if ( scanSprint > 100 || scanSprint == -1 ) {
			scanSprint = 0;
     b28:	61 2c       	mov	r6, r1
     b2a:	71 2c       	mov	r7, r1
	int scanSprint = -1, boundarySprint = -1, craterSprint = -1;
	
	while ( currentDistanceTravelled < cm) {
		
		// Scan every 10CM, prevent collisions
		if ( scanSprint > 100 || scanSprint == -1 ) {
     b2c:	c5 36       	cpi	r28, 0x65	; 101
     b2e:	d1 05       	cpc	r29, r1
     b30:	24 f4       	brge	.+8      	; 0xb3a <moveCautiously+0x4c>
     b32:	cf 3f       	cpi	r28, 0xFF	; 255
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	d8 07       	cpc	r29, r24
     b38:	29 f4       	brne	.+10     	; 0xb44 <moveCautiously+0x56>
			scanSprint = 0;
			detectedAngle = rapidForwardScan();
     b3a:	9e de       	rcall	.-708    	; 0x878 <rapidForwardScan>
			if ( detectedAngle ) {
     b3c:	89 2b       	or	r24, r25
     b3e:	89 f5       	brne	.+98     	; 0xba2 <moveCautiously+0xb4>
	
	while ( currentDistanceTravelled < cm) {
		
		// Scan every 10CM, prevent collisions
		if ( scanSprint > 100 || scanSprint == -1 ) {
			scanSprint = 0;
     b40:	c6 2d       	mov	r28, r6
     b42:	d7 2d       	mov	r29, r7
				break;
			}
		}
		
		// Scan every 2.5CM, prevent driving over boundaries
		if ( boundarySprint > 25 || boundarySprint == -1 ) {
     b44:	0a 31       	cpi	r16, 0x1A	; 26
     b46:	11 05       	cpc	r17, r1
     b48:	24 f4       	brge	.+8      	; 0xb52 <moveCautiously+0x64>
     b4a:	0f 3f       	cpi	r16, 0xFF	; 255
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	18 07       	cpc	r17, r24
     b50:	31 f4       	brne	.+12     	; 0xb5e <moveCautiously+0x70>
			boundarySprint = 0;
			
			if ( detectColoredBoundry(sensorData) ) {
     b52:	c5 01       	movw	r24, r10
     b54:	39 df       	rcall	.-398    	; 0x9c8 <detectColoredBoundry>
     b56:	89 2b       	or	r24, r25
     b58:	21 f5       	brne	.+72     	; 0xba2 <moveCautiously+0xb4>
			}
		}
		
		// Scan every 2.5CM, prevent driving over boundaries
		if ( boundarySprint > 25 || boundarySprint == -1 ) {
			boundarySprint = 0;
     b5a:	06 2d       	mov	r16, r6
     b5c:	17 2d       	mov	r17, r7
				break;
			}
		}
		
		// Scan ever 1CM, prevent falling in craters
		if ( craterSprint > 10 || craterSprint == -1) {
     b5e:	8b e0       	ldi	r24, 0x0B	; 11
     b60:	e8 16       	cp	r14, r24
     b62:	f1 04       	cpc	r15, r1
     b64:	24 f4       	brge	.+8      	; 0xb6e <moveCautiously+0x80>
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	e8 16       	cp	r14, r24
     b6a:	f8 06       	cpc	r15, r24
     b6c:	31 f4       	brne	.+12     	; 0xb7a <moveCautiously+0x8c>
			craterSprint = 0;
			
			if ( detectCrater(sensorData) ) {
     b6e:	c5 01       	movw	r24, r10
     b70:	88 df       	rcall	.-240    	; 0xa82 <detectCrater>
     b72:	89 2b       	or	r24, r25
     b74:	b1 f4       	brne	.+44     	; 0xba2 <moveCautiously+0xb4>
			}
		}
		
		// Scan ever 1CM, prevent falling in craters
		if ( craterSprint > 10 || craterSprint == -1) {
			craterSprint = 0;
     b76:	e6 2c       	mov	r14, r6
     b78:	f7 2c       	mov	r15, r7
				break;
			}
		}
		
		//Move 1CM
		move(120,120,10,sensorData);
     b7a:	95 01       	movw	r18, r10
     b7c:	4a e0       	ldi	r20, 0x0A	; 10
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	68 e7       	ldi	r22, 0x78	; 120
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	88 e7       	ldi	r24, 0x78	; 120
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	c5 d0       	rcall	.+394    	; 0xd14 <move>
		
		//Update scan sprint distances
		currentDistanceTravelled+=10;
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	c8 0e       	add	r12, r24
     b8e:	d1 1c       	adc	r13, r1
		scanSprint+=10;
     b90:	2a 96       	adiw	r28, 0x0a	; 10
		boundarySprint+=10;
     b92:	06 5f       	subi	r16, 0xF6	; 246
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
		craterSprint+=10;
     b96:	8a e0       	ldi	r24, 0x0A	; 10
     b98:	e8 0e       	add	r14, r24
     b9a:	f1 1c       	adc	r15, r1
void moveCautiously(int cm, oi_t * sensorData){
	int currentDistanceTravelled = 0;
	int detectedAngle = 0;
	int scanSprint = -1, boundarySprint = -1, craterSprint = -1;
	
	while ( currentDistanceTravelled < cm) {
     b9c:	c8 14       	cp	r12, r8
     b9e:	d9 04       	cpc	r13, r9
     ba0:	2c f2       	brlt	.-118    	; 0xb2c <moveCautiously+0x3e>
		currentDistanceTravelled+=10;
		scanSprint+=10;
		boundarySprint+=10;
		craterSprint+=10;
	}
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	08 95       	ret

00000bc0 <executeCommand>:
	}
	
	return atoi(quantity);
}

void executeCommand(int command, int quantity, oi_t * sensor_data){
     bc0:	9b 01       	movw	r18, r22
	switch(command) {
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	91 05       	cpc	r25, r1
     bc6:	99 f0       	breq	.+38     	; 0xbee <executeCommand+0x2e>
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 f0       	breq	.+40     	; 0xbf6 <executeCommand+0x36>
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	a1 f4       	brne	.+40     	; 0xbfa <executeCommand+0x3a>
		case MOVE:
			moveCautiously(quantity * 10, sensor_data);
     bd2:	cb 01       	movw	r24, r22
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	22 0f       	add	r18, r18
     be2:	33 1f       	adc	r19, r19
     be4:	ba 01       	movw	r22, r20
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	81 cf       	rjmp	.-254    	; 0xaee <moveCautiously>
			break;
     bec:	08 95       	ret
		case TURN:
			turn(quantity, sensor_data);
     bee:	ba 01       	movw	r22, r20
     bf0:	c9 01       	movw	r24, r18
     bf2:	2e c0       	rjmp	.+92     	; 0xc50 <turn>
			break;
     bf4:	08 95       	ret
		case WIN:
			winProcedure(sensor_data);
     bf6:	ca 01       	movw	r24, r20
     bf8:	08 cd       	rjmp	.-1520   	; 0x60a <winProcedure>
     bfa:	08 95       	ret

00000bfc <main>:
// -- What if we hit the crater? (I've seen it setup so they often try and trick you to hit the craters)
// -- Position ourselves to move in the exact center of two posts
// -- Move straight through them. Detection does the rest

int main(void)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	c0 58       	subi	r28, 0x80	; 128
     c06:	dc 40       	sbci	r29, 0x0C	; 12
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
	oi_t * sensor_data = init();
     c12:	d7 dc       	rcall	.-1618   	; 0x5c2 <init>
     c14:	8c 01       	movw	r16, r24
	
	map_t map;
	init_map(&map);
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	e8 db       	rcall	.-2096   	; 0x3ec <init_map>
	int command = -1, quantity = -1;
	
	
	while (1) {
		
		print("Scanning...");
     c1c:	8e eb       	ldi	r24, 0xBE	; 190
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	d5 dd       	rcall	.-1110   	; 0x7cc <print>
		slowFullScan(&map);
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	e1 dd       	rcall	.-1086   	; 0x7ea <slowFullScan>
		
		print("Receiving Command...");
     c28:	86 e7       	ldi	r24, 0x76	; 118
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	cf dd       	rcall	.-1122   	; 0x7cc <print>
		command = receiveCommand();
     c2e:	2b dd       	rcall	.-1450   	; 0x686 <receiveCommand>
     c30:	7c 01       	movw	r14, r24
		
		print("Receiving Magnitude...");
     c32:	8b e8       	ldi	r24, 0x8B	; 139
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	ca dd       	rcall	.-1132   	; 0x7cc <print>
		quantity = receiveQuantity();
     c38:	97 dd       	rcall	.-1234   	; 0x768 <receiveQuantity>
     c3a:	6c 01       	movw	r12, r24
		
		print("Executing Command...");
     c3c:	82 ea       	ldi	r24, 0xA2	; 162
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	c5 dd       	rcall	.-1142   	; 0x7cc <print>
		executeCommand(command, quantity, sensor_data);
     c42:	a8 01       	movw	r20, r16
     c44:	b6 01       	movw	r22, r12
     c46:	c7 01       	movw	r24, r14
     c48:	bb df       	rcall	.-138    	; 0xbc0 <executeCommand>
		
		oi_update(sensor_data);
     c4a:	c8 01       	movw	r24, r16
     c4c:	2c d1       	rcall	.+600    	; 0xea6 <oi_update>
     c4e:	e6 cf       	rjmp	.-52     	; 0xc1c <main+0x20>

00000c50 <turn>:
	
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
     c5e:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
     c60:	88 27       	eor	r24, r24
     c62:	99 27       	eor	r25, r25
     c64:	8c 1b       	sub	r24, r28
     c66:	9d 0b       	sbc	r25, r29
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	b9 01       	movw	r22, r18
     c6e:	89 d5       	rcall	.+2834   	; 0x1782 <__divmodhi4>
     c70:	fb 01       	movw	r30, r22
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ce 01       	movw	r24, r28
     c78:	b9 01       	movw	r22, r18
     c7a:	83 d5       	rcall	.+2822   	; 0x1782 <__divmodhi4>
     c7c:	cb 01       	movw	r24, r22
     c7e:	bf 01       	movw	r22, r30
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	b8 d0       	rcall	.+368    	; 0xdf6 <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     c86:	7e 01       	movw	r14, r28
     c88:	dd 23       	and	r29, r29
     c8a:	24 f4       	brge	.+8      	; 0xc94 <turn+0x44>
     c8c:	ee 24       	eor	r14, r14
     c8e:	ff 24       	eor	r15, r15
     c90:	ec 1a       	sub	r14, r28
     c92:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     c94:	1e 14       	cp	r1, r14
     c96:	1f 04       	cpc	r1, r15
     c98:	a4 f4       	brge	.+40     	; 0xcc2 <turn+0x72>
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     c9e:	88 e2       	ldi	r24, 0x28	; 40
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a5 d2       	rcall	.+1354   	; 0x11ee <wait_ms>
		oi_update(sensor_data);
     ca4:	c8 01       	movw	r24, r16
     ca6:	ff d0       	rcall	.+510    	; 0xea6 <oi_update>
		currentDegrees += abs(sensor_data->angle);
     ca8:	f8 01       	movw	r30, r16
     caa:	26 85       	ldd	r18, Z+14	; 0x0e
     cac:	37 85       	ldd	r19, Z+15	; 0x0f
     cae:	33 23       	and	r19, r19
     cb0:	1c f4       	brge	.+6      	; 0xcb8 <turn+0x68>
     cb2:	31 95       	neg	r19
     cb4:	21 95       	neg	r18
     cb6:	31 09       	sbc	r19, r1
     cb8:	c2 0f       	add	r28, r18
     cba:	d3 1f       	adc	r29, r19
	
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     cbc:	ce 15       	cp	r28, r14
     cbe:	df 05       	cpc	r29, r15
     cc0:	74 f3       	brlt	.-36     	; 0xc9e <turn+0x4e>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	95 d0       	rcall	.+298    	; 0xdf6 <oi_set_wheels>
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	08 95       	ret

00000cda <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     ce0:	88 81       	ld	r24, Y
     ce2:	98 2f       	mov	r25, r24
     ce4:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     ce6:	81 fd       	sbrc	r24, 1
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <detectCollision+0x14>
     cea:	99 23       	and	r25, r25
     cec:	71 f0       	breq	.+28     	; 0xd0a <detectCollision+0x30>
		print("Collision!");
     cee:	87 eb       	ldi	r24, 0xB7	; 183
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	6c dd       	rcall	.-1320   	; 0x7cc <print>
		move(-100, -100, 150, sensor_data);
     cf4:	9e 01       	movw	r18, r28
     cf6:	46 e9       	ldi	r20, 0x96	; 150
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	6c e9       	ldi	r22, 0x9C	; 156
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	8c e9       	ldi	r24, 0x9C	; 156
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	08 d0       	rcall	.+16     	; 0xd14 <move>
		return 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <detectCollision+0x34>
	} else {
		return 0;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <move>:
#include <avr/io.h>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	cf 92       	push	r12
     d1a:	df 92       	push	r13
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	7c 01       	movw	r14, r24
     d2a:	5b 01       	movw	r10, r22
     d2c:	ea 01       	movw	r28, r20
     d2e:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
     d30:	62 d0       	rcall	.+196    	; 0xdf6 <oi_set_wheels>
	
	distance = abs(distance);
     d32:	6e 01       	movw	r12, r28
     d34:	dd 23       	and	r29, r29
     d36:	24 f4       	brge	.+8      	; 0xd40 <move+0x2c>
     d38:	cc 24       	eor	r12, r12
     d3a:	dd 24       	eor	r13, r13
     d3c:	cc 1a       	sub	r12, r28
     d3e:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     d40:	1c 14       	cp	r1, r12
     d42:	1d 04       	cpc	r1, r13
     d44:	f4 f4       	brge	.+60     	; 0xd82 <move+0x6e>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     d46:	c0 e0       	ldi	r28, 0x00	; 0
     d48:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     d4a:	c8 01       	movw	r24, r16
     d4c:	ac d0       	rcall	.+344    	; 0xea6 <oi_update>

		if ( right > 0 && left > 0 ) {
     d4e:	1e 14       	cp	r1, r14
     d50:	1f 04       	cpc	r1, r15
     d52:	54 f4       	brge	.+20     	; 0xd68 <move+0x54>
     d54:	1a 14       	cp	r1, r10
     d56:	1b 04       	cpc	r1, r11
     d58:	3c f4       	brge	.+14     	; 0xd68 <move+0x54>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     d5a:	c8 01       	movw	r24, r16
     d5c:	be df       	rcall	.-132    	; 0xcda <detectCollision>
     d5e:	89 2b       	or	r24, r25
     d60:	19 f0       	breq	.+6      	; 0xd68 <move+0x54>
				oi_set_wheels(right, left);
     d62:	b5 01       	movw	r22, r10
     d64:	c7 01       	movw	r24, r14
     d66:	47 d0       	rcall	.+142    	; 0xdf6 <oi_set_wheels>
			}
		}

		sum += abs(sensor_data->distance);
     d68:	f8 01       	movw	r30, r16
     d6a:	44 85       	ldd	r20, Z+12	; 0x0c
     d6c:	55 85       	ldd	r21, Z+13	; 0x0d
     d6e:	55 23       	and	r21, r21
     d70:	1c f4       	brge	.+6      	; 0xd78 <move+0x64>
     d72:	51 95       	neg	r21
     d74:	41 95       	neg	r20
     d76:	51 09       	sbc	r21, r1
     d78:	c4 0f       	add	r28, r20
     d7a:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     d7c:	cc 15       	cp	r28, r12
     d7e:	dd 05       	cpc	r29, r13
     d80:	24 f3       	brlt	.-56     	; 0xd4a <move+0x36>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	35 d0       	rcall	.+106    	; 0xdf6 <oi_set_wheels>
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	08 95       	ret

00000da2 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     da2:	64 e3       	ldi	r22, 0x34	; 52
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	12 c5       	rjmp	.+2596   	; 0x17d0 <calloc>
     dac:	08 95       	ret

00000dae <oi_byte_tx>:
     dae:	eb e9       	ldi	r30, 0x9B	; 155
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	90 81       	ld	r25, Z
     db4:	95 ff       	sbrs	r25, 5
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <oi_byte_tx+0x4>
     db8:	80 93 9c 00 	sts	0x009C, r24
     dbc:	08 95       	ret

00000dbe <oi_set_leds>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	08 2f       	mov	r16, r24
     dc8:	16 2f       	mov	r17, r22
     dca:	d4 2f       	mov	r29, r20
     dcc:	c2 2f       	mov	r28, r18
     dce:	8b e8       	ldi	r24, 0x8B	; 139
     dd0:	ee df       	rcall	.-36     	; 0xdae <oi_byte_tx>
     dd2:	11 23       	and	r17, r17
     dd4:	29 f0       	breq	.+10     	; 0xde0 <oi_set_leds+0x22>
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	01 11       	cpse	r16, r1
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <oi_set_leds+0x24>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <oi_set_leds+0x24>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	e5 df       	rcall	.-54     	; 0xdae <oi_byte_tx>
     de4:	8d 2f       	mov	r24, r29
     de6:	e3 df       	rcall	.-58     	; 0xdae <oi_byte_tx>
     de8:	8c 2f       	mov	r24, r28
     dea:	e1 df       	rcall	.-62     	; 0xdae <oi_byte_tx>
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	08 95       	ret

00000df6 <oi_set_wheels>:
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	18 2f       	mov	r17, r24
     e00:	09 2f       	mov	r16, r25
     e02:	c6 2f       	mov	r28, r22
     e04:	d7 2f       	mov	r29, r23
     e06:	81 e9       	ldi	r24, 0x91	; 145
     e08:	d2 df       	rcall	.-92     	; 0xdae <oi_byte_tx>
     e0a:	80 2f       	mov	r24, r16
     e0c:	d0 df       	rcall	.-96     	; 0xdae <oi_byte_tx>
     e0e:	81 2f       	mov	r24, r17
     e10:	ce df       	rcall	.-100    	; 0xdae <oi_byte_tx>
     e12:	8d 2f       	mov	r24, r29
     e14:	cc df       	rcall	.-104    	; 0xdae <oi_byte_tx>
     e16:	8c 2f       	mov	r24, r28
     e18:	ca df       	rcall	.-108    	; 0xdae <oi_byte_tx>
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <oi_load_song>:
     e24:	af 92       	push	r10
     e26:	bf 92       	push	r11
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	c8 2f       	mov	r28, r24
     e3a:	7b 01       	movw	r14, r22
     e3c:	6a 01       	movw	r12, r20
     e3e:	a2 2e       	mov	r10, r18
     e40:	b3 2e       	mov	r11, r19
     e42:	8c e8       	ldi	r24, 0x8C	; 140
     e44:	b4 df       	rcall	.-152    	; 0xdae <oi_byte_tx>
     e46:	8c 2f       	mov	r24, r28
     e48:	b2 df       	rcall	.-156    	; 0xdae <oi_byte_tx>
     e4a:	8e 2d       	mov	r24, r14
     e4c:	b0 df       	rcall	.-160    	; 0xdae <oi_byte_tx>
     e4e:	1e 14       	cp	r1, r14
     e50:	1f 04       	cpc	r1, r15
     e52:	74 f4       	brge	.+28     	; 0xe70 <oi_load_song+0x4c>
     e54:	e6 01       	movw	r28, r12
     e56:	0a 2d       	mov	r16, r10
     e58:	1b 2d       	mov	r17, r11
     e5a:	ec 0c       	add	r14, r12
     e5c:	fd 1c       	adc	r15, r13
     e5e:	89 91       	ld	r24, Y+
     e60:	a6 df       	rcall	.-180    	; 0xdae <oi_byte_tx>
     e62:	f8 01       	movw	r30, r16
     e64:	81 91       	ld	r24, Z+
     e66:	8f 01       	movw	r16, r30
     e68:	a2 df       	rcall	.-188    	; 0xdae <oi_byte_tx>
     e6a:	ce 15       	cp	r28, r14
     e6c:	df 05       	cpc	r29, r15
     e6e:	b9 f7       	brne	.-18     	; 0xe5e <oi_load_song+0x3a>
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	08 95       	ret

00000e86 <oi_play_song>:
     e86:	cf 93       	push	r28
     e88:	c8 2f       	mov	r28, r24
     e8a:	8d e8       	ldi	r24, 0x8D	; 141
     e8c:	90 df       	rcall	.-224    	; 0xdae <oi_byte_tx>
     e8e:	8c 2f       	mov	r24, r28
     e90:	8e df       	rcall	.-228    	; 0xdae <oi_byte_tx>
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     e96:	eb e9       	ldi	r30, 0x9B	; 155
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	ec f7       	brge	.-6      	; 0xe9a <oi_byte_rx+0x4>

	return UDR1;
     ea0:	80 91 9c 00 	lds	r24, 0x009C
     ea4:	08 95       	ret

00000ea6 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     eb4:	80 91 9b 00 	lds	r24, 0x009B
     eb8:	88 23       	and	r24, r24
     eba:	44 f4       	brge	.+16     	; 0xecc <oi_update+0x26>
		i = UDR1;
     ebc:	ac e9       	ldi	r26, 0x9C	; 156
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ec0:	eb e9       	ldi	r30, 0x9B	; 155
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     ec4:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ec6:	80 81       	ld	r24, Z
     ec8:	88 23       	and	r24, r24
     eca:	e4 f3       	brlt	.-8      	; 0xec4 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     ecc:	8e e8       	ldi	r24, 0x8E	; 142
     ece:	6f df       	rcall	.-290    	; 0xdae <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     ed0:	86 e0       	ldi	r24, 0x06	; 6
     ed2:	6d df       	rcall	.-294    	; 0xdae <oi_byte_tx>
     ed4:	e7 01       	movw	r28, r14
     ed6:	87 01       	movw	r16, r14
     ed8:	0c 5c       	subi	r16, 0xCC	; 204
     eda:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     edc:	dc df       	rcall	.-72     	; 0xe96 <oi_byte_rx>
     ede:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     ee0:	c0 17       	cp	r28, r16
     ee2:	d1 07       	cpc	r29, r17
     ee4:	d9 f7       	brne	.-10     	; 0xedc <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     ee6:	f7 01       	movw	r30, r14
     ee8:	84 85       	ldd	r24, Z+12	; 0x0c
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	98 2f       	mov	r25, r24
     eee:	88 27       	eor	r24, r24
     ef0:	25 85       	ldd	r18, Z+13	; 0x0d
     ef2:	82 0f       	add	r24, r18
     ef4:	91 1d       	adc	r25, r1
     ef6:	95 87       	std	Z+13, r25	; 0x0d
     ef8:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     efa:	86 85       	ldd	r24, Z+14	; 0x0e
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	98 2f       	mov	r25, r24
     f00:	88 27       	eor	r24, r24
     f02:	27 85       	ldd	r18, Z+15	; 0x0f
     f04:	82 0f       	add	r24, r18
     f06:	91 1d       	adc	r25, r1
     f08:	97 87       	std	Z+15, r25	; 0x0f
     f0a:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     f0c:	81 89       	ldd	r24, Z+17	; 0x11
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	98 2f       	mov	r25, r24
     f12:	88 27       	eor	r24, r24
     f14:	22 89       	ldd	r18, Z+18	; 0x12
     f16:	82 0f       	add	r24, r18
     f18:	91 1d       	adc	r25, r1
     f1a:	92 8b       	std	Z+18, r25	; 0x12
     f1c:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     f1e:	83 89       	ldd	r24, Z+19	; 0x13
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	98 2f       	mov	r25, r24
     f24:	88 27       	eor	r24, r24
     f26:	24 89       	ldd	r18, Z+20	; 0x14
     f28:	82 0f       	add	r24, r18
     f2a:	91 1d       	adc	r25, r1
     f2c:	94 8b       	std	Z+20, r25	; 0x14
     f2e:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     f30:	86 89       	ldd	r24, Z+22	; 0x16
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 2f       	mov	r25, r24
     f36:	88 27       	eor	r24, r24
     f38:	27 89       	ldd	r18, Z+23	; 0x17
     f3a:	82 0f       	add	r24, r18
     f3c:	91 1d       	adc	r25, r1
     f3e:	97 8b       	std	Z+23, r25	; 0x17
     f40:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     f42:	80 8d       	ldd	r24, Z+24	; 0x18
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	98 2f       	mov	r25, r24
     f48:	88 27       	eor	r24, r24
     f4a:	21 8d       	ldd	r18, Z+25	; 0x19
     f4c:	82 0f       	add	r24, r18
     f4e:	91 1d       	adc	r25, r1
     f50:	91 8f       	std	Z+25, r25	; 0x19
     f52:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     f54:	82 8d       	ldd	r24, Z+26	; 0x1a
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	98 2f       	mov	r25, r24
     f5a:	88 27       	eor	r24, r24
     f5c:	23 8d       	ldd	r18, Z+27	; 0x1b
     f5e:	82 0f       	add	r24, r18
     f60:	91 1d       	adc	r25, r1
     f62:	93 8f       	std	Z+27, r25	; 0x1b
     f64:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     f66:	84 8d       	ldd	r24, Z+28	; 0x1c
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	98 2f       	mov	r25, r24
     f6c:	88 27       	eor	r24, r24
     f6e:	25 8d       	ldd	r18, Z+29	; 0x1d
     f70:	82 0f       	add	r24, r18
     f72:	91 1d       	adc	r25, r1
     f74:	95 8f       	std	Z+29, r25	; 0x1d
     f76:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     f78:	86 8d       	ldd	r24, Z+30	; 0x1e
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	98 2f       	mov	r25, r24
     f7e:	88 27       	eor	r24, r24
     f80:	27 8d       	ldd	r18, Z+31	; 0x1f
     f82:	82 0f       	add	r24, r18
     f84:	91 1d       	adc	r25, r1
     f86:	97 8f       	std	Z+31, r25	; 0x1f
     f88:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     f8a:	80 a1       	ldd	r24, Z+32	; 0x20
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	98 2f       	mov	r25, r24
     f90:	88 27       	eor	r24, r24
     f92:	21 a1       	ldd	r18, Z+33	; 0x21
     f94:	82 0f       	add	r24, r18
     f96:	91 1d       	adc	r25, r1
     f98:	91 a3       	std	Z+33, r25	; 0x21
     f9a:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     f9c:	82 a1       	ldd	r24, Z+34	; 0x22
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	98 2f       	mov	r25, r24
     fa2:	88 27       	eor	r24, r24
     fa4:	23 a1       	ldd	r18, Z+35	; 0x23
     fa6:	82 0f       	add	r24, r18
     fa8:	91 1d       	adc	r25, r1
     faa:	93 a3       	std	Z+35, r25	; 0x23
     fac:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     fae:	82 a5       	ldd	r24, Z+42	; 0x2a
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	21 a5       	ldd	r18, Z+41	; 0x29
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	32 2f       	mov	r19, r18
     fb8:	22 27       	eor	r18, r18
     fba:	28 0f       	add	r18, r24
     fbc:	39 1f       	adc	r19, r25
     fbe:	36 a3       	std	Z+38, r19	; 0x26
     fc0:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     fc2:	20 a9       	ldd	r18, Z+48	; 0x30
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	32 2f       	mov	r19, r18
     fc8:	22 27       	eor	r18, r18
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	95 a7       	std	Z+45, r25	; 0x2d
     fd0:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     fd2:	82 a9       	ldd	r24, Z+50	; 0x32
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	98 2f       	mov	r25, r24
     fd8:	88 27       	eor	r24, r24
     fda:	23 a9       	ldd	r18, Z+51	; 0x33
     fdc:	82 0f       	add	r24, r18
     fde:	91 1d       	adc	r25, r1
     fe0:	97 a7       	std	Z+47, r25	; 0x2f
     fe2:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     fe4:	84 a9       	ldd	r24, Z+52	; 0x34
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	98 2f       	mov	r25, r24
     fea:	88 27       	eor	r24, r24
     fec:	25 a9       	ldd	r18, Z+53	; 0x35
     fee:	82 0f       	add	r24, r18
     ff0:	91 1d       	adc	r25, r1
     ff2:	91 ab       	std	Z+49, r25	; 0x31
     ff4:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     ff6:	86 a9       	ldd	r24, Z+54	; 0x36
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	98 2f       	mov	r25, r24
     ffc:	88 27       	eor	r24, r24
     ffe:	27 a9       	ldd	r18, Z+55	; 0x37
    1000:	82 0f       	add	r24, r18
    1002:	91 1d       	adc	r25, r1
    1004:	93 ab       	std	Z+51, r25	; 0x33
    1006:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    1008:	83 e2       	ldi	r24, 0x23	; 35
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	f0 d0       	rcall	.+480    	; 0x11ee <wait_ms>
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    1026:	09 e9       	ldi	r16, 0x99	; 153
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	f8 01       	movw	r30, r16
    102e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    1030:	88 e1       	ldi	r24, 0x18	; 24
    1032:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    1036:	86 e0       	ldi	r24, 0x06	; 6
    1038:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	b7 de       	rcall	.-658    	; 0xdae <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    1040:	81 e8       	ldi	r24, 0x81	; 129
    1042:	b5 de       	rcall	.-662    	; 0xdae <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    1044:	88 e0       	ldi	r24, 0x08	; 8
    1046:	b3 de       	rcall	.-666    	; 0xdae <oi_byte_tx>
	wait_ms(100);
    1048:	84 e6       	ldi	r24, 0x64	; 100
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	d0 d0       	rcall	.+416    	; 0x11ee <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    104e:	81 e2       	ldi	r24, 0x21	; 33
    1050:	f8 01       	movw	r30, r16
    1052:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    1054:	84 e8       	ldi	r24, 0x84	; 132
    1056:	ab de       	rcall	.-682    	; 0xdae <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    1058:	2f ef       	ldi	r18, 0xFF	; 255
    105a:	47 e0       	ldi	r20, 0x07	; 7
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	ae de       	rcall	.-676    	; 0xdbe <oi_set_leds>
	
	oi_update(self);
    1062:	ce 01       	movw	r24, r28
    1064:	20 df       	rcall	.-448    	; 0xea6 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    1066:	ce 01       	movw	r24, r28
    1068:	1e df       	rcall	.-452    	; 0xea6 <oi_update>
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <timer3_init>:
#define DEGREE_MULTIPLIER 20.5
#define DEGREE_OFFSET 700

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
    1074:	83 e2       	ldi	r24, 0x23	; 35
    1076:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
    107a:	8a e1       	ldi	r24, 0x1A	; 26
    107c:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
    1080:	88 ef       	ldi	r24, 0xF8	; 248
    1082:	97 ea       	ldi	r25, 0xA7	; 167
    1084:	90 93 87 00 	sts	0x0087, r25
    1088:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
    108c:	80 91 26 01 	lds	r24, 0x0126
    1090:	90 91 27 01 	lds	r25, 0x0127
    1094:	90 93 85 00 	sts	0x0085, r25
    1098:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
    109c:	14 9a       	sbi	0x02, 4	; 2
    109e:	08 95       	ret

000010a0 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
    10a0:	bc 01       	movw	r22, r24
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	d5 d1       	rcall	.+938    	; 0x1452 <__floatunsisf>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	44 ea       	ldi	r20, 0xA4	; 164
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	bb d2       	rcall	.+1398   	; 0x1628 <__mulsf3>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	4f e2       	ldi	r20, 0x2F	; 47
    10b8:	54 e4       	ldi	r21, 0x44	; 68
    10ba:	c7 d0       	rcall	.+398    	; 0x124a <__addsf3>
    10bc:	9e d1       	rcall	.+828    	; 0x13fa <__fixunssfsi>
    10be:	70 93 27 01 	sts	0x0127, r23
    10c2:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
    10c6:	70 93 85 00 	sts	0x0085, r23
    10ca:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
    10ce:	8e e1       	ldi	r24, 0x1E	; 30
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	8d c0       	rjmp	.+282    	; 0x11ee <wait_ms>
    10d4:	08 95       	ret

000010d6 <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
    10e4:	80 91 17 03 	lds	r24, 0x0317
    10e8:	81 11       	cpse	r24, r1
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <__stack+0x7>
		rising_time = ICR1;
    10ec:	86 b5       	in	r24, 0x26	; 38
    10ee:	97 b5       	in	r25, 0x27	; 39
    10f0:	90 93 16 03 	sts	0x0316, r25
    10f4:	80 93 15 03 	sts	0x0315, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
    10f8:	8e b5       	in	r24, 0x2e	; 46
    10fa:	8f 7b       	andi	r24, 0xBF	; 191
    10fc:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 17 03 	sts	0x0317, r24
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <__stack+0x21>
		} else if ( state == FALLING) {
    1106:	80 91 17 03 	lds	r24, 0x0317
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	49 f4       	brne	.+18     	; 0x1120 <__stack+0x21>
		falling_time = ICR1;
    110e:	86 b5       	in	r24, 0x26	; 38
    1110:	97 b5       	in	r25, 0x27	; 39
    1112:	90 93 14 03 	sts	0x0314, r25
    1116:	80 93 13 03 	sts	0x0313, r24
		state = DONE;
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	80 93 17 03 	sts	0x0317, r24
	}
}
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
    112e:	60 91 13 03 	lds	r22, 0x0313
    1132:	70 91 14 03 	lds	r23, 0x0314
    1136:	80 91 15 03 	lds	r24, 0x0315
    113a:	90 91 16 03 	lds	r25, 0x0316
    113e:	68 1b       	sub	r22, r24
    1140:	79 0b       	sbc	r23, r25
    1142:	76 95       	lsr	r23
    1144:	67 95       	ror	r22
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	83 d1       	rcall	.+774    	; 0x1452 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	34 e2       	ldi	r19, 0x24	; 36
    1150:	44 e7       	ldi	r20, 0x74	; 116
    1152:	56 e4       	ldi	r21, 0x46	; 70
    1154:	e5 d0       	rcall	.+458    	; 0x1320 <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a ea       	ldi	r20, 0xAA	; 170
    115c:	53 e4       	ldi	r21, 0x43	; 67
    115e:	64 d2       	rcall	.+1224   	; 0x1628 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	48 ec       	ldi	r20, 0xC8	; 200
    1166:	52 e4       	ldi	r21, 0x42	; 66
    1168:	5f c2       	rjmp	.+1214   	; 0x1628 <__mulsf3>
	return timeDifference;
}
    116a:	08 95       	ret

0000116c <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
    116c:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
    116e:	ea e7       	ldi	r30, 0x7A	; 122
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
    1176:	86 b7       	in	r24, 0x36	; 54
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
    117c:	87 b7       	in	r24, 0x37	; 55
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
    1182:	85 ec       	ldi	r24, 0xC5	; 197
    1184:	8e bd       	out	0x2e, r24	; 46
    1186:	08 95       	ret

00001188 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
    1188:	87 b7       	in	r24, 0x37	; 55
    118a:	8b 7d       	andi	r24, 0xDB	; 219
    118c:	87 bf       	out	0x37, r24	; 55
    118e:	08 95       	ret

00001190 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
    1190:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
    1192:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	2a d0       	rcall	.+84     	; 0x11ee <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
    119a:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
    119c:	8c 98       	cbi	0x11, 4	; 17
    119e:	08 95       	ret

000011a0 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
    11a0:	10 92 17 03 	sts	0x0317, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
    11a4:	f1 df       	rcall	.-30     	; 0x1188 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
    11a6:	f4 df       	rcall	.-24     	; 0x1190 <send_pulse>
	
	//Enable interrupt
	timer1_init();
    11a8:	e1 df       	rcall	.-62     	; 0x116c <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
    11aa:	80 91 17 03 	lds	r24, 0x0317
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	e1 f7       	brne	.-8      	; 0x11aa <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
    11b2:	bd cf       	rjmp	.-134    	; 0x112e <time_to_dist>
    11b4:	08 95       	ret

000011b6 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    11b6:	10 92 19 03 	sts	0x0319, r1
    11ba:	10 92 18 03 	sts	0x0318, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    11be:	81 11       	cpse	r24, r1
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    11c2:	8b e0       	ldi	r24, 0x0B	; 11
    11c4:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    11c6:	87 b7       	in	r24, 0x37	; 55
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	87 bf       	out	0x37, r24	; 55
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	29 f4       	brne	.+10     	; 0x11dc <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    11d2:	89 e0       	ldi	r24, 0x09	; 9
    11d4:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    11d6:	87 b7       	in	r24, 0x37	; 55
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    11dc:	78 94       	sei
    11de:	08 95       	ret

000011e0 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    11e0:	87 b7       	in	r24, 0x37	; 55
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    11e6:	85 b5       	in	r24, 0x25	; 37
    11e8:	8f 77       	andi	r24, 0x7F	; 127
    11ea:	85 bd       	out	0x25, r24	; 37
    11ec:	08 95       	ret

000011ee <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    11f4:	8a ef       	ldi	r24, 0xFA	; 250
    11f6:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    11f8:	10 92 19 03 	sts	0x0319, r1
    11fc:	10 92 18 03 	sts	0x0318, r1
	timer2_start(0);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	d9 df       	rcall	.-78     	; 0x11b6 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    1204:	20 91 18 03 	lds	r18, 0x0318
    1208:	30 91 19 03 	lds	r19, 0x0319
    120c:	2c 17       	cp	r18, r28
    120e:	3d 07       	cpc	r19, r29
    1210:	c8 f3       	brcs	.-14     	; 0x1204 <wait_ms+0x16>

	timer2_stop();
    1212:	e6 df       	rcall	.-52     	; 0x11e0 <timer2_stop>
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
	timer2_tick++;
    1228:	80 91 18 03 	lds	r24, 0x0318
    122c:	90 91 19 03 	lds	r25, 0x0319
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	90 93 19 03 	sts	0x0319, r25
    1236:	80 93 18 03 	sts	0x0318, r24
}
    123a:	9f 91       	pop	r25
    123c:	8f 91       	pop	r24
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__subsf3>:
    1248:	50 58       	subi	r21, 0x80	; 128

0000124a <__addsf3>:
    124a:	bb 27       	eor	r27, r27
    124c:	aa 27       	eor	r26, r26
    124e:	0e d0       	rcall	.+28     	; 0x126c <__addsf3x>
    1250:	a0 c1       	rjmp	.+832    	; 0x1592 <__fp_round>
    1252:	69 d1       	rcall	.+722    	; 0x1526 <__fp_pscA>
    1254:	30 f0       	brcs	.+12     	; 0x1262 <__addsf3+0x18>
    1256:	6e d1       	rcall	.+732    	; 0x1534 <__fp_pscB>
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__addsf3+0x18>
    125a:	31 f4       	brne	.+12     	; 0x1268 <__addsf3+0x1e>
    125c:	9f 3f       	cpi	r25, 0xFF	; 255
    125e:	11 f4       	brne	.+4      	; 0x1264 <__addsf3+0x1a>
    1260:	1e f4       	brtc	.+6      	; 0x1268 <__addsf3+0x1e>
    1262:	5e c1       	rjmp	.+700    	; 0x1520 <__fp_nan>
    1264:	0e f4       	brtc	.+2      	; 0x1268 <__addsf3+0x1e>
    1266:	e0 95       	com	r30
    1268:	e7 fb       	bst	r30, 7
    126a:	54 c1       	rjmp	.+680    	; 0x1514 <__fp_inf>

0000126c <__addsf3x>:
    126c:	e9 2f       	mov	r30, r25
    126e:	b3 d1       	rcall	.+870    	; 0x15d6 <__fp_split3>
    1270:	80 f3       	brcs	.-32     	; 0x1252 <__addsf3+0x8>
    1272:	ba 17       	cp	r27, r26
    1274:	62 07       	cpc	r22, r18
    1276:	73 07       	cpc	r23, r19
    1278:	84 07       	cpc	r24, r20
    127a:	95 07       	cpc	r25, r21
    127c:	18 f0       	brcs	.+6      	; 0x1284 <__addsf3x+0x18>
    127e:	71 f4       	brne	.+28     	; 0x129c <__addsf3x+0x30>
    1280:	9e f5       	brtc	.+102    	; 0x12e8 <__addsf3x+0x7c>
    1282:	cb c1       	rjmp	.+918    	; 0x161a <__fp_zero>
    1284:	0e f4       	brtc	.+2      	; 0x1288 <__addsf3x+0x1c>
    1286:	e0 95       	com	r30
    1288:	0b 2e       	mov	r0, r27
    128a:	ba 2f       	mov	r27, r26
    128c:	a0 2d       	mov	r26, r0
    128e:	0b 01       	movw	r0, r22
    1290:	b9 01       	movw	r22, r18
    1292:	90 01       	movw	r18, r0
    1294:	0c 01       	movw	r0, r24
    1296:	ca 01       	movw	r24, r20
    1298:	a0 01       	movw	r20, r0
    129a:	11 24       	eor	r1, r1
    129c:	ff 27       	eor	r31, r31
    129e:	59 1b       	sub	r21, r25
    12a0:	99 f0       	breq	.+38     	; 0x12c8 <__addsf3x+0x5c>
    12a2:	59 3f       	cpi	r21, 0xF9	; 249
    12a4:	50 f4       	brcc	.+20     	; 0x12ba <__addsf3x+0x4e>
    12a6:	50 3e       	cpi	r21, 0xE0	; 224
    12a8:	68 f1       	brcs	.+90     	; 0x1304 <__addsf3x+0x98>
    12aa:	1a 16       	cp	r1, r26
    12ac:	f0 40       	sbci	r31, 0x00	; 0
    12ae:	a2 2f       	mov	r26, r18
    12b0:	23 2f       	mov	r18, r19
    12b2:	34 2f       	mov	r19, r20
    12b4:	44 27       	eor	r20, r20
    12b6:	58 5f       	subi	r21, 0xF8	; 248
    12b8:	f3 cf       	rjmp	.-26     	; 0x12a0 <__addsf3x+0x34>
    12ba:	46 95       	lsr	r20
    12bc:	37 95       	ror	r19
    12be:	27 95       	ror	r18
    12c0:	a7 95       	ror	r26
    12c2:	f0 40       	sbci	r31, 0x00	; 0
    12c4:	53 95       	inc	r21
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__addsf3x+0x4e>
    12c8:	7e f4       	brtc	.+30     	; 0x12e8 <__addsf3x+0x7c>
    12ca:	1f 16       	cp	r1, r31
    12cc:	ba 0b       	sbc	r27, r26
    12ce:	62 0b       	sbc	r22, r18
    12d0:	73 0b       	sbc	r23, r19
    12d2:	84 0b       	sbc	r24, r20
    12d4:	ba f0       	brmi	.+46     	; 0x1304 <__addsf3x+0x98>
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	a1 f0       	breq	.+40     	; 0x1302 <__addsf3x+0x96>
    12da:	ff 0f       	add	r31, r31
    12dc:	bb 1f       	adc	r27, r27
    12de:	66 1f       	adc	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	c2 f7       	brpl	.-16     	; 0x12d6 <__addsf3x+0x6a>
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <__addsf3x+0x98>
    12e8:	ba 0f       	add	r27, r26
    12ea:	62 1f       	adc	r22, r18
    12ec:	73 1f       	adc	r23, r19
    12ee:	84 1f       	adc	r24, r20
    12f0:	48 f4       	brcc	.+18     	; 0x1304 <__addsf3x+0x98>
    12f2:	87 95       	ror	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b7 95       	ror	r27
    12fa:	f7 95       	ror	r31
    12fc:	9e 3f       	cpi	r25, 0xFE	; 254
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <__addsf3x+0x96>
    1300:	b3 cf       	rjmp	.-154    	; 0x1268 <__addsf3+0x1e>
    1302:	93 95       	inc	r25
    1304:	88 0f       	add	r24, r24
    1306:	08 f0       	brcs	.+2      	; 0x130a <__addsf3x+0x9e>
    1308:	99 27       	eor	r25, r25
    130a:	ee 0f       	add	r30, r30
    130c:	97 95       	ror	r25
    130e:	87 95       	ror	r24
    1310:	08 95       	ret

00001312 <__cmpsf2>:
    1312:	dc d0       	rcall	.+440    	; 0x14cc <__fp_cmp>
    1314:	08 f4       	brcc	.+2      	; 0x1318 <__cmpsf2+0x6>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	08 95       	ret

0000131a <cos>:
    131a:	14 d1       	rcall	.+552    	; 0x1544 <__fp_rempio2>
    131c:	e3 95       	inc	r30
    131e:	4a c1       	rjmp	.+660    	; 0x15b4 <__fp_sinus>

00001320 <__divsf3>:
    1320:	0c d0       	rcall	.+24     	; 0x133a <__divsf3x>
    1322:	37 c1       	rjmp	.+622    	; 0x1592 <__fp_round>
    1324:	07 d1       	rcall	.+526    	; 0x1534 <__fp_pscB>
    1326:	40 f0       	brcs	.+16     	; 0x1338 <__divsf3+0x18>
    1328:	fe d0       	rcall	.+508    	; 0x1526 <__fp_pscA>
    132a:	30 f0       	brcs	.+12     	; 0x1338 <__divsf3+0x18>
    132c:	21 f4       	brne	.+8      	; 0x1336 <__divsf3+0x16>
    132e:	5f 3f       	cpi	r21, 0xFF	; 255
    1330:	19 f0       	breq	.+6      	; 0x1338 <__divsf3+0x18>
    1332:	f0 c0       	rjmp	.+480    	; 0x1514 <__fp_inf>
    1334:	51 11       	cpse	r21, r1
    1336:	72 c1       	rjmp	.+740    	; 0x161c <__fp_szero>
    1338:	f3 c0       	rjmp	.+486    	; 0x1520 <__fp_nan>

0000133a <__divsf3x>:
    133a:	4d d1       	rcall	.+666    	; 0x15d6 <__fp_split3>
    133c:	98 f3       	brcs	.-26     	; 0x1324 <__divsf3+0x4>

0000133e <__divsf3_pse>:
    133e:	99 23       	and	r25, r25
    1340:	c9 f3       	breq	.-14     	; 0x1334 <__divsf3+0x14>
    1342:	55 23       	and	r21, r21
    1344:	b1 f3       	breq	.-20     	; 0x1332 <__divsf3+0x12>
    1346:	95 1b       	sub	r25, r21
    1348:	55 0b       	sbc	r21, r21
    134a:	bb 27       	eor	r27, r27
    134c:	aa 27       	eor	r26, r26
    134e:	62 17       	cp	r22, r18
    1350:	73 07       	cpc	r23, r19
    1352:	84 07       	cpc	r24, r20
    1354:	38 f0       	brcs	.+14     	; 0x1364 <__divsf3_pse+0x26>
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	5f 4f       	sbci	r21, 0xFF	; 255
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	44 1f       	adc	r20, r20
    1360:	aa 1f       	adc	r26, r26
    1362:	a9 f3       	breq	.-22     	; 0x134e <__divsf3_pse+0x10>
    1364:	33 d0       	rcall	.+102    	; 0x13cc <__divsf3_pse+0x8e>
    1366:	0e 2e       	mov	r0, r30
    1368:	3a f0       	brmi	.+14     	; 0x1378 <__divsf3_pse+0x3a>
    136a:	e0 e8       	ldi	r30, 0x80	; 128
    136c:	30 d0       	rcall	.+96     	; 0x13ce <__divsf3_pse+0x90>
    136e:	91 50       	subi	r25, 0x01	; 1
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	e6 95       	lsr	r30
    1374:	00 1c       	adc	r0, r0
    1376:	ca f7       	brpl	.-14     	; 0x136a <__divsf3_pse+0x2c>
    1378:	29 d0       	rcall	.+82     	; 0x13cc <__divsf3_pse+0x8e>
    137a:	fe 2f       	mov	r31, r30
    137c:	27 d0       	rcall	.+78     	; 0x13cc <__divsf3_pse+0x8e>
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	88 1f       	adc	r24, r24
    1384:	bb 1f       	adc	r27, r27
    1386:	26 17       	cp	r18, r22
    1388:	37 07       	cpc	r19, r23
    138a:	48 07       	cpc	r20, r24
    138c:	ab 07       	cpc	r26, r27
    138e:	b0 e8       	ldi	r27, 0x80	; 128
    1390:	09 f0       	breq	.+2      	; 0x1394 <__divsf3_pse+0x56>
    1392:	bb 0b       	sbc	r27, r27
    1394:	80 2d       	mov	r24, r0
    1396:	bf 01       	movw	r22, r30
    1398:	ff 27       	eor	r31, r31
    139a:	93 58       	subi	r25, 0x83	; 131
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	2a f0       	brmi	.+10     	; 0x13aa <__divsf3_pse+0x6c>
    13a0:	9e 3f       	cpi	r25, 0xFE	; 254
    13a2:	51 05       	cpc	r21, r1
    13a4:	68 f0       	brcs	.+26     	; 0x13c0 <__divsf3_pse+0x82>
    13a6:	b6 c0       	rjmp	.+364    	; 0x1514 <__fp_inf>
    13a8:	39 c1       	rjmp	.+626    	; 0x161c <__fp_szero>
    13aa:	5f 3f       	cpi	r21, 0xFF	; 255
    13ac:	ec f3       	brlt	.-6      	; 0x13a8 <__divsf3_pse+0x6a>
    13ae:	98 3e       	cpi	r25, 0xE8	; 232
    13b0:	dc f3       	brlt	.-10     	; 0x13a8 <__divsf3_pse+0x6a>
    13b2:	86 95       	lsr	r24
    13b4:	77 95       	ror	r23
    13b6:	67 95       	ror	r22
    13b8:	b7 95       	ror	r27
    13ba:	f7 95       	ror	r31
    13bc:	9f 5f       	subi	r25, 0xFF	; 255
    13be:	c9 f7       	brne	.-14     	; 0x13b2 <__divsf3_pse+0x74>
    13c0:	88 0f       	add	r24, r24
    13c2:	91 1d       	adc	r25, r1
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	97 f9       	bld	r25, 7
    13ca:	08 95       	ret
    13cc:	e1 e0       	ldi	r30, 0x01	; 1
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	88 1f       	adc	r24, r24
    13d4:	bb 1f       	adc	r27, r27
    13d6:	62 17       	cp	r22, r18
    13d8:	73 07       	cpc	r23, r19
    13da:	84 07       	cpc	r24, r20
    13dc:	ba 07       	cpc	r27, r26
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__divsf3_pse+0xaa>
    13e0:	62 1b       	sub	r22, r18
    13e2:	73 0b       	sbc	r23, r19
    13e4:	84 0b       	sbc	r24, r20
    13e6:	ba 0b       	sbc	r27, r26
    13e8:	ee 1f       	adc	r30, r30
    13ea:	88 f7       	brcc	.-30     	; 0x13ce <__divsf3_pse+0x90>
    13ec:	e0 95       	com	r30
    13ee:	08 95       	ret

000013f0 <__fixsfsi>:
    13f0:	04 d0       	rcall	.+8      	; 0x13fa <__fixunssfsi>
    13f2:	68 94       	set
    13f4:	b1 11       	cpse	r27, r1
    13f6:	12 c1       	rjmp	.+548    	; 0x161c <__fp_szero>
    13f8:	08 95       	ret

000013fa <__fixunssfsi>:
    13fa:	f5 d0       	rcall	.+490    	; 0x15e6 <__fp_splitA>
    13fc:	88 f0       	brcs	.+34     	; 0x1420 <__fixunssfsi+0x26>
    13fe:	9f 57       	subi	r25, 0x7F	; 127
    1400:	90 f0       	brcs	.+36     	; 0x1426 <__fixunssfsi+0x2c>
    1402:	b9 2f       	mov	r27, r25
    1404:	99 27       	eor	r25, r25
    1406:	b7 51       	subi	r27, 0x17	; 23
    1408:	a0 f0       	brcs	.+40     	; 0x1432 <__fixunssfsi+0x38>
    140a:	d1 f0       	breq	.+52     	; 0x1440 <__fixunssfsi+0x46>
    140c:	66 0f       	add	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	1a f0       	brmi	.+6      	; 0x141c <__fixunssfsi+0x22>
    1416:	ba 95       	dec	r27
    1418:	c9 f7       	brne	.-14     	; 0x140c <__fixunssfsi+0x12>
    141a:	12 c0       	rjmp	.+36     	; 0x1440 <__fixunssfsi+0x46>
    141c:	b1 30       	cpi	r27, 0x01	; 1
    141e:	81 f0       	breq	.+32     	; 0x1440 <__fixunssfsi+0x46>
    1420:	fc d0       	rcall	.+504    	; 0x161a <__fp_zero>
    1422:	b1 e0       	ldi	r27, 0x01	; 1
    1424:	08 95       	ret
    1426:	f9 c0       	rjmp	.+498    	; 0x161a <__fp_zero>
    1428:	67 2f       	mov	r22, r23
    142a:	78 2f       	mov	r23, r24
    142c:	88 27       	eor	r24, r24
    142e:	b8 5f       	subi	r27, 0xF8	; 248
    1430:	39 f0       	breq	.+14     	; 0x1440 <__fixunssfsi+0x46>
    1432:	b9 3f       	cpi	r27, 0xF9	; 249
    1434:	cc f3       	brlt	.-14     	; 0x1428 <__fixunssfsi+0x2e>
    1436:	86 95       	lsr	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	b3 95       	inc	r27
    143e:	d9 f7       	brne	.-10     	; 0x1436 <__fixunssfsi+0x3c>
    1440:	3e f4       	brtc	.+14     	; 0x1450 <__fixunssfsi+0x56>
    1442:	90 95       	com	r25
    1444:	80 95       	com	r24
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	08 95       	ret

00001452 <__floatunsisf>:
    1452:	e8 94       	clt
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <__floatsisf+0x12>

00001456 <__floatsisf>:
    1456:	97 fb       	bst	r25, 7
    1458:	3e f4       	brtc	.+14     	; 0x1468 <__floatsisf+0x12>
    145a:	90 95       	com	r25
    145c:	80 95       	com	r24
    145e:	70 95       	com	r23
    1460:	61 95       	neg	r22
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	99 23       	and	r25, r25
    146a:	a9 f0       	breq	.+42     	; 0x1496 <__floatsisf+0x40>
    146c:	f9 2f       	mov	r31, r25
    146e:	96 e9       	ldi	r25, 0x96	; 150
    1470:	bb 27       	eor	r27, r27
    1472:	93 95       	inc	r25
    1474:	f6 95       	lsr	r31
    1476:	87 95       	ror	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	f1 11       	cpse	r31, r1
    1480:	f8 cf       	rjmp	.-16     	; 0x1472 <__floatsisf+0x1c>
    1482:	fa f4       	brpl	.+62     	; 0x14c2 <__floatsisf+0x6c>
    1484:	bb 0f       	add	r27, r27
    1486:	11 f4       	brne	.+4      	; 0x148c <__floatsisf+0x36>
    1488:	60 ff       	sbrs	r22, 0
    148a:	1b c0       	rjmp	.+54     	; 0x14c2 <__floatsisf+0x6c>
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <__floatsisf+0x6c>
    1496:	88 23       	and	r24, r24
    1498:	11 f0       	breq	.+4      	; 0x149e <__floatsisf+0x48>
    149a:	96 e9       	ldi	r25, 0x96	; 150
    149c:	11 c0       	rjmp	.+34     	; 0x14c0 <__floatsisf+0x6a>
    149e:	77 23       	and	r23, r23
    14a0:	21 f0       	breq	.+8      	; 0x14aa <__floatsisf+0x54>
    14a2:	9e e8       	ldi	r25, 0x8E	; 142
    14a4:	87 2f       	mov	r24, r23
    14a6:	76 2f       	mov	r23, r22
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <__floatsisf+0x5e>
    14aa:	66 23       	and	r22, r22
    14ac:	71 f0       	breq	.+28     	; 0x14ca <__floatsisf+0x74>
    14ae:	96 e8       	ldi	r25, 0x86	; 134
    14b0:	86 2f       	mov	r24, r22
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	2a f0       	brmi	.+10     	; 0x14c2 <__floatsisf+0x6c>
    14b8:	9a 95       	dec	r25
    14ba:	66 0f       	add	r22, r22
    14bc:	77 1f       	adc	r23, r23
    14be:	88 1f       	adc	r24, r24
    14c0:	da f7       	brpl	.-10     	; 0x14b8 <__floatsisf+0x62>
    14c2:	88 0f       	add	r24, r24
    14c4:	96 95       	lsr	r25
    14c6:	87 95       	ror	r24
    14c8:	97 f9       	bld	r25, 7
    14ca:	08 95       	ret

000014cc <__fp_cmp>:
    14cc:	99 0f       	add	r25, r25
    14ce:	00 08       	sbc	r0, r0
    14d0:	55 0f       	add	r21, r21
    14d2:	aa 0b       	sbc	r26, r26
    14d4:	e0 e8       	ldi	r30, 0x80	; 128
    14d6:	fe ef       	ldi	r31, 0xFE	; 254
    14d8:	16 16       	cp	r1, r22
    14da:	17 06       	cpc	r1, r23
    14dc:	e8 07       	cpc	r30, r24
    14de:	f9 07       	cpc	r31, r25
    14e0:	c0 f0       	brcs	.+48     	; 0x1512 <__fp_cmp+0x46>
    14e2:	12 16       	cp	r1, r18
    14e4:	13 06       	cpc	r1, r19
    14e6:	e4 07       	cpc	r30, r20
    14e8:	f5 07       	cpc	r31, r21
    14ea:	98 f0       	brcs	.+38     	; 0x1512 <__fp_cmp+0x46>
    14ec:	62 1b       	sub	r22, r18
    14ee:	73 0b       	sbc	r23, r19
    14f0:	84 0b       	sbc	r24, r20
    14f2:	95 0b       	sbc	r25, r21
    14f4:	39 f4       	brne	.+14     	; 0x1504 <__fp_cmp+0x38>
    14f6:	0a 26       	eor	r0, r26
    14f8:	61 f0       	breq	.+24     	; 0x1512 <__fp_cmp+0x46>
    14fa:	23 2b       	or	r18, r19
    14fc:	24 2b       	or	r18, r20
    14fe:	25 2b       	or	r18, r21
    1500:	21 f4       	brne	.+8      	; 0x150a <__fp_cmp+0x3e>
    1502:	08 95       	ret
    1504:	0a 26       	eor	r0, r26
    1506:	09 f4       	brne	.+2      	; 0x150a <__fp_cmp+0x3e>
    1508:	a1 40       	sbci	r26, 0x01	; 1
    150a:	a6 95       	lsr	r26
    150c:	8f ef       	ldi	r24, 0xFF	; 255
    150e:	81 1d       	adc	r24, r1
    1510:	81 1d       	adc	r24, r1
    1512:	08 95       	ret

00001514 <__fp_inf>:
    1514:	97 f9       	bld	r25, 7
    1516:	9f 67       	ori	r25, 0x7F	; 127
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	08 95       	ret

00001520 <__fp_nan>:
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	80 ec       	ldi	r24, 0xC0	; 192
    1524:	08 95       	ret

00001526 <__fp_pscA>:
    1526:	00 24       	eor	r0, r0
    1528:	0a 94       	dec	r0
    152a:	16 16       	cp	r1, r22
    152c:	17 06       	cpc	r1, r23
    152e:	18 06       	cpc	r1, r24
    1530:	09 06       	cpc	r0, r25
    1532:	08 95       	ret

00001534 <__fp_pscB>:
    1534:	00 24       	eor	r0, r0
    1536:	0a 94       	dec	r0
    1538:	12 16       	cp	r1, r18
    153a:	13 06       	cpc	r1, r19
    153c:	14 06       	cpc	r1, r20
    153e:	05 06       	cpc	r0, r21
    1540:	08 95       	ret
    1542:	ee cf       	rjmp	.-36     	; 0x1520 <__fp_nan>

00001544 <__fp_rempio2>:
    1544:	50 d0       	rcall	.+160    	; 0x15e6 <__fp_splitA>
    1546:	e8 f3       	brcs	.-6      	; 0x1542 <__fp_pscB+0xe>
    1548:	e8 94       	clt
    154a:	e0 e0       	ldi	r30, 0x00	; 0
    154c:	bb 27       	eor	r27, r27
    154e:	9f 57       	subi	r25, 0x7F	; 127
    1550:	f0 f0       	brcs	.+60     	; 0x158e <__fp_rempio2+0x4a>
    1552:	2a ed       	ldi	r18, 0xDA	; 218
    1554:	3f e0       	ldi	r19, 0x0F	; 15
    1556:	49 ec       	ldi	r20, 0xC9	; 201
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <__fp_rempio2+0x22>
    155a:	ee 0f       	add	r30, r30
    155c:	bb 0f       	add	r27, r27
    155e:	66 1f       	adc	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	28 f0       	brcs	.+10     	; 0x1570 <__fp_rempio2+0x2c>
    1566:	b2 3a       	cpi	r27, 0xA2	; 162
    1568:	62 07       	cpc	r22, r18
    156a:	73 07       	cpc	r23, r19
    156c:	84 07       	cpc	r24, r20
    156e:	28 f0       	brcs	.+10     	; 0x157a <__fp_rempio2+0x36>
    1570:	b2 5a       	subi	r27, 0xA2	; 162
    1572:	62 0b       	sbc	r22, r18
    1574:	73 0b       	sbc	r23, r19
    1576:	84 0b       	sbc	r24, r20
    1578:	e3 95       	inc	r30
    157a:	9a 95       	dec	r25
    157c:	72 f7       	brpl	.-36     	; 0x155a <__fp_rempio2+0x16>
    157e:	80 38       	cpi	r24, 0x80	; 128
    1580:	30 f4       	brcc	.+12     	; 0x158e <__fp_rempio2+0x4a>
    1582:	9a 95       	dec	r25
    1584:	bb 0f       	add	r27, r27
    1586:	66 1f       	adc	r22, r22
    1588:	77 1f       	adc	r23, r23
    158a:	88 1f       	adc	r24, r24
    158c:	d2 f7       	brpl	.-12     	; 0x1582 <__fp_rempio2+0x3e>
    158e:	90 48       	sbci	r25, 0x80	; 128
    1590:	b6 c0       	rjmp	.+364    	; 0x16fe <__fp_mpack_finite>

00001592 <__fp_round>:
    1592:	09 2e       	mov	r0, r25
    1594:	03 94       	inc	r0
    1596:	00 0c       	add	r0, r0
    1598:	11 f4       	brne	.+4      	; 0x159e <__fp_round+0xc>
    159a:	88 23       	and	r24, r24
    159c:	52 f0       	brmi	.+20     	; 0x15b2 <__fp_round+0x20>
    159e:	bb 0f       	add	r27, r27
    15a0:	40 f4       	brcc	.+16     	; 0x15b2 <__fp_round+0x20>
    15a2:	bf 2b       	or	r27, r31
    15a4:	11 f4       	brne	.+4      	; 0x15aa <__fp_round+0x18>
    15a6:	60 ff       	sbrs	r22, 0
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <__fp_round+0x20>
    15aa:	6f 5f       	subi	r22, 0xFF	; 255
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <__fp_sinus>:
    15b4:	ef 93       	push	r30
    15b6:	e0 ff       	sbrs	r30, 0
    15b8:	06 c0       	rjmp	.+12     	; 0x15c6 <__fp_sinus+0x12>
    15ba:	a2 ea       	ldi	r26, 0xA2	; 162
    15bc:	2a ed       	ldi	r18, 0xDA	; 218
    15be:	3f e0       	ldi	r19, 0x0F	; 15
    15c0:	49 ec       	ldi	r20, 0xC9	; 201
    15c2:	5f eb       	ldi	r21, 0xBF	; 191
    15c4:	53 de       	rcall	.-858    	; 0x126c <__addsf3x>
    15c6:	e5 df       	rcall	.-54     	; 0x1592 <__fp_round>
    15c8:	0f 90       	pop	r0
    15ca:	03 94       	inc	r0
    15cc:	01 fc       	sbrc	r0, 1
    15ce:	90 58       	subi	r25, 0x80	; 128
    15d0:	ec e8       	ldi	r30, 0x8C	; 140
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	a0 c0       	rjmp	.+320    	; 0x1716 <__fp_powsodd>

000015d6 <__fp_split3>:
    15d6:	57 fd       	sbrc	r21, 7
    15d8:	90 58       	subi	r25, 0x80	; 128
    15da:	44 0f       	add	r20, r20
    15dc:	55 1f       	adc	r21, r21
    15de:	59 f0       	breq	.+22     	; 0x15f6 <__fp_splitA+0x10>
    15e0:	5f 3f       	cpi	r21, 0xFF	; 255
    15e2:	71 f0       	breq	.+28     	; 0x1600 <__fp_splitA+0x1a>
    15e4:	47 95       	ror	r20

000015e6 <__fp_splitA>:
    15e6:	88 0f       	add	r24, r24
    15e8:	97 fb       	bst	r25, 7
    15ea:	99 1f       	adc	r25, r25
    15ec:	61 f0       	breq	.+24     	; 0x1606 <__fp_splitA+0x20>
    15ee:	9f 3f       	cpi	r25, 0xFF	; 255
    15f0:	79 f0       	breq	.+30     	; 0x1610 <__fp_splitA+0x2a>
    15f2:	87 95       	ror	r24
    15f4:	08 95       	ret
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	55 1f       	adc	r21, r21
    15fe:	f2 cf       	rjmp	.-28     	; 0x15e4 <__fp_split3+0xe>
    1600:	46 95       	lsr	r20
    1602:	f1 df       	rcall	.-30     	; 0x15e6 <__fp_splitA>
    1604:	08 c0       	rjmp	.+16     	; 0x1616 <__fp_splitA+0x30>
    1606:	16 16       	cp	r1, r22
    1608:	17 06       	cpc	r1, r23
    160a:	18 06       	cpc	r1, r24
    160c:	99 1f       	adc	r25, r25
    160e:	f1 cf       	rjmp	.-30     	; 0x15f2 <__fp_splitA+0xc>
    1610:	86 95       	lsr	r24
    1612:	71 05       	cpc	r23, r1
    1614:	61 05       	cpc	r22, r1
    1616:	08 94       	sec
    1618:	08 95       	ret

0000161a <__fp_zero>:
    161a:	e8 94       	clt

0000161c <__fp_szero>:
    161c:	bb 27       	eor	r27, r27
    161e:	66 27       	eor	r22, r22
    1620:	77 27       	eor	r23, r23
    1622:	cb 01       	movw	r24, r22
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret

00001628 <__mulsf3>:
    1628:	0b d0       	rcall	.+22     	; 0x1640 <__mulsf3x>
    162a:	b3 cf       	rjmp	.-154    	; 0x1592 <__fp_round>
    162c:	7c df       	rcall	.-264    	; 0x1526 <__fp_pscA>
    162e:	28 f0       	brcs	.+10     	; 0x163a <__mulsf3+0x12>
    1630:	81 df       	rcall	.-254    	; 0x1534 <__fp_pscB>
    1632:	18 f0       	brcs	.+6      	; 0x163a <__mulsf3+0x12>
    1634:	95 23       	and	r25, r21
    1636:	09 f0       	breq	.+2      	; 0x163a <__mulsf3+0x12>
    1638:	6d cf       	rjmp	.-294    	; 0x1514 <__fp_inf>
    163a:	72 cf       	rjmp	.-284    	; 0x1520 <__fp_nan>
    163c:	11 24       	eor	r1, r1
    163e:	ee cf       	rjmp	.-36     	; 0x161c <__fp_szero>

00001640 <__mulsf3x>:
    1640:	ca df       	rcall	.-108    	; 0x15d6 <__fp_split3>
    1642:	a0 f3       	brcs	.-24     	; 0x162c <__mulsf3+0x4>

00001644 <__mulsf3_pse>:
    1644:	95 9f       	mul	r25, r21
    1646:	d1 f3       	breq	.-12     	; 0x163c <__mulsf3+0x14>
    1648:	95 0f       	add	r25, r21
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	55 1f       	adc	r21, r21
    164e:	62 9f       	mul	r22, r18
    1650:	f0 01       	movw	r30, r0
    1652:	72 9f       	mul	r23, r18
    1654:	bb 27       	eor	r27, r27
    1656:	f0 0d       	add	r31, r0
    1658:	b1 1d       	adc	r27, r1
    165a:	63 9f       	mul	r22, r19
    165c:	aa 27       	eor	r26, r26
    165e:	f0 0d       	add	r31, r0
    1660:	b1 1d       	adc	r27, r1
    1662:	aa 1f       	adc	r26, r26
    1664:	64 9f       	mul	r22, r20
    1666:	66 27       	eor	r22, r22
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	66 1f       	adc	r22, r22
    166e:	82 9f       	mul	r24, r18
    1670:	22 27       	eor	r18, r18
    1672:	b0 0d       	add	r27, r0
    1674:	a1 1d       	adc	r26, r1
    1676:	62 1f       	adc	r22, r18
    1678:	73 9f       	mul	r23, r19
    167a:	b0 0d       	add	r27, r0
    167c:	a1 1d       	adc	r26, r1
    167e:	62 1f       	adc	r22, r18
    1680:	83 9f       	mul	r24, r19
    1682:	a0 0d       	add	r26, r0
    1684:	61 1d       	adc	r22, r1
    1686:	22 1f       	adc	r18, r18
    1688:	74 9f       	mul	r23, r20
    168a:	33 27       	eor	r19, r19
    168c:	a0 0d       	add	r26, r0
    168e:	61 1d       	adc	r22, r1
    1690:	23 1f       	adc	r18, r19
    1692:	84 9f       	mul	r24, r20
    1694:	60 0d       	add	r22, r0
    1696:	21 1d       	adc	r18, r1
    1698:	82 2f       	mov	r24, r18
    169a:	76 2f       	mov	r23, r22
    169c:	6a 2f       	mov	r22, r26
    169e:	11 24       	eor	r1, r1
    16a0:	9f 57       	subi	r25, 0x7F	; 127
    16a2:	50 40       	sbci	r21, 0x00	; 0
    16a4:	8a f0       	brmi	.+34     	; 0x16c8 <__mulsf3_pse+0x84>
    16a6:	e1 f0       	breq	.+56     	; 0x16e0 <__mulsf3_pse+0x9c>
    16a8:	88 23       	and	r24, r24
    16aa:	4a f0       	brmi	.+18     	; 0x16be <__mulsf3_pse+0x7a>
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	bb 1f       	adc	r27, r27
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	91 50       	subi	r25, 0x01	; 1
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	a9 f7       	brne	.-22     	; 0x16a8 <__mulsf3_pse+0x64>
    16be:	9e 3f       	cpi	r25, 0xFE	; 254
    16c0:	51 05       	cpc	r21, r1
    16c2:	70 f0       	brcs	.+28     	; 0x16e0 <__mulsf3_pse+0x9c>
    16c4:	27 cf       	rjmp	.-434    	; 0x1514 <__fp_inf>
    16c6:	aa cf       	rjmp	.-172    	; 0x161c <__fp_szero>
    16c8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ca:	ec f3       	brlt	.-6      	; 0x16c6 <__mulsf3_pse+0x82>
    16cc:	98 3e       	cpi	r25, 0xE8	; 232
    16ce:	dc f3       	brlt	.-10     	; 0x16c6 <__mulsf3_pse+0x82>
    16d0:	86 95       	lsr	r24
    16d2:	77 95       	ror	r23
    16d4:	67 95       	ror	r22
    16d6:	b7 95       	ror	r27
    16d8:	f7 95       	ror	r31
    16da:	e7 95       	ror	r30
    16dc:	9f 5f       	subi	r25, 0xFF	; 255
    16de:	c1 f7       	brne	.-16     	; 0x16d0 <__mulsf3_pse+0x8c>
    16e0:	fe 2b       	or	r31, r30
    16e2:	88 0f       	add	r24, r24
    16e4:	91 1d       	adc	r25, r1
    16e6:	96 95       	lsr	r25
    16e8:	87 95       	ror	r24
    16ea:	97 f9       	bld	r25, 7
    16ec:	08 95       	ret

000016ee <sin>:
    16ee:	9f 93       	push	r25
    16f0:	29 df       	rcall	.-430    	; 0x1544 <__fp_rempio2>
    16f2:	0f 90       	pop	r0
    16f4:	07 fc       	sbrc	r0, 7
    16f6:	ee 5f       	subi	r30, 0xFE	; 254
    16f8:	5d cf       	rjmp	.-326    	; 0x15b4 <__fp_sinus>

000016fa <__fp_mpack>:
    16fa:	9f 3f       	cpi	r25, 0xFF	; 255
    16fc:	31 f0       	breq	.+12     	; 0x170a <__fp_mpack_finite+0xc>

000016fe <__fp_mpack_finite>:
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	20 f4       	brcc	.+8      	; 0x170a <__fp_mpack_finite+0xc>
    1702:	87 95       	ror	r24
    1704:	77 95       	ror	r23
    1706:	67 95       	ror	r22
    1708:	b7 95       	ror	r27
    170a:	88 0f       	add	r24, r24
    170c:	91 1d       	adc	r25, r1
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	97 f9       	bld	r25, 7
    1714:	08 95       	ret

00001716 <__fp_powsodd>:
    1716:	9f 93       	push	r25
    1718:	8f 93       	push	r24
    171a:	7f 93       	push	r23
    171c:	6f 93       	push	r22
    171e:	ff 93       	push	r31
    1720:	ef 93       	push	r30
    1722:	9b 01       	movw	r18, r22
    1724:	ac 01       	movw	r20, r24
    1726:	80 df       	rcall	.-256    	; 0x1628 <__mulsf3>
    1728:	ef 91       	pop	r30
    172a:	ff 91       	pop	r31
    172c:	05 d0       	rcall	.+10     	; 0x1738 <__fp_powser>
    172e:	2f 91       	pop	r18
    1730:	3f 91       	pop	r19
    1732:	4f 91       	pop	r20
    1734:	5f 91       	pop	r21
    1736:	78 cf       	rjmp	.-272    	; 0x1628 <__mulsf3>

00001738 <__fp_powser>:
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	1f 93       	push	r17
    173e:	0f 93       	push	r16
    1740:	ff 92       	push	r15
    1742:	ef 92       	push	r14
    1744:	df 92       	push	r13
    1746:	7b 01       	movw	r14, r22
    1748:	8c 01       	movw	r16, r24
    174a:	68 94       	set
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <__fp_powser+0x20>
    174e:	da 2e       	mov	r13, r26
    1750:	ef 01       	movw	r28, r30
    1752:	76 df       	rcall	.-276    	; 0x1640 <__mulsf3x>
    1754:	fe 01       	movw	r30, r28
    1756:	e8 94       	clt
    1758:	a5 91       	lpm	r26, Z+
    175a:	25 91       	lpm	r18, Z+
    175c:	35 91       	lpm	r19, Z+
    175e:	45 91       	lpm	r20, Z+
    1760:	55 91       	lpm	r21, Z+
    1762:	ae f3       	brts	.-22     	; 0x174e <__fp_powser+0x16>
    1764:	ef 01       	movw	r28, r30
    1766:	82 dd       	rcall	.-1276   	; 0x126c <__addsf3x>
    1768:	fe 01       	movw	r30, r28
    176a:	97 01       	movw	r18, r14
    176c:	a8 01       	movw	r20, r16
    176e:	da 94       	dec	r13
    1770:	79 f7       	brne	.-34     	; 0x1750 <__fp_powser+0x18>
    1772:	df 90       	pop	r13
    1774:	ef 90       	pop	r14
    1776:	ff 90       	pop	r15
    1778:	0f 91       	pop	r16
    177a:	1f 91       	pop	r17
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <__divmodhi4>:
    1782:	97 fb       	bst	r25, 7
    1784:	07 2e       	mov	r0, r23
    1786:	16 f4       	brtc	.+4      	; 0x178c <__divmodhi4+0xa>
    1788:	00 94       	com	r0
    178a:	06 d0       	rcall	.+12     	; 0x1798 <__divmodhi4_neg1>
    178c:	77 fd       	sbrc	r23, 7
    178e:	08 d0       	rcall	.+16     	; 0x17a0 <__divmodhi4_neg2>
    1790:	0b d0       	rcall	.+22     	; 0x17a8 <__udivmodhi4>
    1792:	07 fc       	sbrc	r0, 7
    1794:	05 d0       	rcall	.+10     	; 0x17a0 <__divmodhi4_neg2>
    1796:	3e f4       	brtc	.+14     	; 0x17a6 <__divmodhi4_exit>

00001798 <__divmodhi4_neg1>:
    1798:	90 95       	com	r25
    179a:	81 95       	neg	r24
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	08 95       	ret

000017a0 <__divmodhi4_neg2>:
    17a0:	70 95       	com	r23
    17a2:	61 95       	neg	r22
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255

000017a6 <__divmodhi4_exit>:
    17a6:	08 95       	ret

000017a8 <__udivmodhi4>:
    17a8:	aa 1b       	sub	r26, r26
    17aa:	bb 1b       	sub	r27, r27
    17ac:	51 e1       	ldi	r21, 0x11	; 17
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <__udivmodhi4_ep>

000017b0 <__udivmodhi4_loop>:
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	a6 17       	cp	r26, r22
    17b6:	b7 07       	cpc	r27, r23
    17b8:	10 f0       	brcs	.+4      	; 0x17be <__udivmodhi4_ep>
    17ba:	a6 1b       	sub	r26, r22
    17bc:	b7 0b       	sbc	r27, r23

000017be <__udivmodhi4_ep>:
    17be:	88 1f       	adc	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	5a 95       	dec	r21
    17c4:	a9 f7       	brne	.-22     	; 0x17b0 <__udivmodhi4_loop>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	08 95       	ret

000017d0 <calloc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	86 9f       	mul	r24, r22
    17da:	80 01       	movw	r16, r0
    17dc:	87 9f       	mul	r24, r23
    17de:	10 0d       	add	r17, r0
    17e0:	96 9f       	mul	r25, r22
    17e2:	10 0d       	add	r17, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	c8 01       	movw	r24, r16
    17e8:	0d d0       	rcall	.+26     	; 0x1804 <malloc>
    17ea:	ec 01       	movw	r28, r24
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <calloc+0x28>
    17f0:	a8 01       	movw	r20, r16
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	4a d1       	rcall	.+660    	; 0x1a8c <memset>
    17f8:	ce 01       	movw	r24, r28
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <malloc>:
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	91 05       	cpc	r25, r1
    180c:	10 f4       	brcc	.+4      	; 0x1812 <malloc+0xe>
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	e0 91 1c 03 	lds	r30, 0x031C
    1816:	f0 91 1d 03 	lds	r31, 0x031D
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	a0 e0       	ldi	r26, 0x00	; 0
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	39 f1       	breq	.+78     	; 0x1874 <malloc+0x70>
    1826:	40 81       	ld	r20, Z
    1828:	51 81       	ldd	r21, Z+1	; 0x01
    182a:	48 17       	cp	r20, r24
    182c:	59 07       	cpc	r21, r25
    182e:	b8 f0       	brcs	.+46     	; 0x185e <malloc+0x5a>
    1830:	48 17       	cp	r20, r24
    1832:	59 07       	cpc	r21, r25
    1834:	71 f4       	brne	.+28     	; 0x1852 <malloc+0x4e>
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	10 97       	sbiw	r26, 0x00	; 0
    183c:	29 f0       	breq	.+10     	; 0x1848 <malloc+0x44>
    183e:	13 96       	adiw	r26, 0x03	; 3
    1840:	9c 93       	st	X, r25
    1842:	8e 93       	st	-X, r24
    1844:	12 97       	sbiw	r26, 0x02	; 2
    1846:	2c c0       	rjmp	.+88     	; 0x18a0 <malloc+0x9c>
    1848:	90 93 1d 03 	sts	0x031D, r25
    184c:	80 93 1c 03 	sts	0x031C, r24
    1850:	27 c0       	rjmp	.+78     	; 0x18a0 <malloc+0x9c>
    1852:	21 15       	cp	r18, r1
    1854:	31 05       	cpc	r19, r1
    1856:	31 f0       	breq	.+12     	; 0x1864 <malloc+0x60>
    1858:	42 17       	cp	r20, r18
    185a:	53 07       	cpc	r21, r19
    185c:	18 f0       	brcs	.+6      	; 0x1864 <malloc+0x60>
    185e:	a9 01       	movw	r20, r18
    1860:	db 01       	movw	r26, r22
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <malloc+0x62>
    1864:	ef 01       	movw	r28, r30
    1866:	9a 01       	movw	r18, r20
    1868:	bd 01       	movw	r22, r26
    186a:	df 01       	movw	r26, r30
    186c:	02 80       	ldd	r0, Z+2	; 0x02
    186e:	f3 81       	ldd	r31, Z+3	; 0x03
    1870:	e0 2d       	mov	r30, r0
    1872:	d7 cf       	rjmp	.-82     	; 0x1822 <malloc+0x1e>
    1874:	21 15       	cp	r18, r1
    1876:	31 05       	cpc	r19, r1
    1878:	f9 f0       	breq	.+62     	; 0x18b8 <malloc+0xb4>
    187a:	28 1b       	sub	r18, r24
    187c:	39 0b       	sbc	r19, r25
    187e:	24 30       	cpi	r18, 0x04	; 4
    1880:	31 05       	cpc	r19, r1
    1882:	80 f4       	brcc	.+32     	; 0x18a4 <malloc+0xa0>
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	21 f0       	breq	.+8      	; 0x1896 <malloc+0x92>
    188e:	fb 01       	movw	r30, r22
    1890:	93 83       	std	Z+3, r25	; 0x03
    1892:	82 83       	std	Z+2, r24	; 0x02
    1894:	04 c0       	rjmp	.+8      	; 0x189e <malloc+0x9a>
    1896:	90 93 1d 03 	sts	0x031D, r25
    189a:	80 93 1c 03 	sts	0x031C, r24
    189e:	fe 01       	movw	r30, r28
    18a0:	32 96       	adiw	r30, 0x02	; 2
    18a2:	44 c0       	rjmp	.+136    	; 0x192c <malloc+0x128>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e2 0f       	add	r30, r18
    18a8:	f3 1f       	adc	r31, r19
    18aa:	81 93       	st	Z+, r24
    18ac:	91 93       	st	Z+, r25
    18ae:	22 50       	subi	r18, 0x02	; 2
    18b0:	31 09       	sbc	r19, r1
    18b2:	39 83       	std	Y+1, r19	; 0x01
    18b4:	28 83       	st	Y, r18
    18b6:	3a c0       	rjmp	.+116    	; 0x192c <malloc+0x128>
    18b8:	20 91 1a 03 	lds	r18, 0x031A
    18bc:	30 91 1b 03 	lds	r19, 0x031B
    18c0:	23 2b       	or	r18, r19
    18c2:	41 f4       	brne	.+16     	; 0x18d4 <malloc+0xd0>
    18c4:	20 91 02 01 	lds	r18, 0x0102
    18c8:	30 91 03 01 	lds	r19, 0x0103
    18cc:	30 93 1b 03 	sts	0x031B, r19
    18d0:	20 93 1a 03 	sts	0x031A, r18
    18d4:	20 91 00 01 	lds	r18, 0x0100
    18d8:	30 91 01 01 	lds	r19, 0x0101
    18dc:	21 15       	cp	r18, r1
    18de:	31 05       	cpc	r19, r1
    18e0:	41 f4       	brne	.+16     	; 0x18f2 <malloc+0xee>
    18e2:	2d b7       	in	r18, 0x3d	; 61
    18e4:	3e b7       	in	r19, 0x3e	; 62
    18e6:	40 91 04 01 	lds	r20, 0x0104
    18ea:	50 91 05 01 	lds	r21, 0x0105
    18ee:	24 1b       	sub	r18, r20
    18f0:	35 0b       	sbc	r19, r21
    18f2:	e0 91 1a 03 	lds	r30, 0x031A
    18f6:	f0 91 1b 03 	lds	r31, 0x031B
    18fa:	e2 17       	cp	r30, r18
    18fc:	f3 07       	cpc	r31, r19
    18fe:	a0 f4       	brcc	.+40     	; 0x1928 <malloc+0x124>
    1900:	2e 1b       	sub	r18, r30
    1902:	3f 0b       	sbc	r19, r31
    1904:	28 17       	cp	r18, r24
    1906:	39 07       	cpc	r19, r25
    1908:	78 f0       	brcs	.+30     	; 0x1928 <malloc+0x124>
    190a:	ac 01       	movw	r20, r24
    190c:	4e 5f       	subi	r20, 0xFE	; 254
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	24 17       	cp	r18, r20
    1912:	35 07       	cpc	r19, r21
    1914:	48 f0       	brcs	.+18     	; 0x1928 <malloc+0x124>
    1916:	4e 0f       	add	r20, r30
    1918:	5f 1f       	adc	r21, r31
    191a:	50 93 1b 03 	sts	0x031B, r21
    191e:	40 93 1a 03 	sts	0x031A, r20
    1922:	81 93       	st	Z+, r24
    1924:	91 93       	st	Z+, r25
    1926:	02 c0       	rjmp	.+4      	; 0x192c <malloc+0x128>
    1928:	e0 e0       	ldi	r30, 0x00	; 0
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	cf 01       	movw	r24, r30
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <free>:
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	09 f4       	brne	.+2      	; 0x193e <free+0xa>
    193c:	87 c0       	rjmp	.+270    	; 0x1a4c <free+0x118>
    193e:	fc 01       	movw	r30, r24
    1940:	32 97       	sbiw	r30, 0x02	; 2
    1942:	13 82       	std	Z+3, r1	; 0x03
    1944:	12 82       	std	Z+2, r1	; 0x02
    1946:	c0 91 1c 03 	lds	r28, 0x031C
    194a:	d0 91 1d 03 	lds	r29, 0x031D
    194e:	20 97       	sbiw	r28, 0x00	; 0
    1950:	81 f4       	brne	.+32     	; 0x1972 <free+0x3e>
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	28 0f       	add	r18, r24
    1958:	39 1f       	adc	r19, r25
    195a:	80 91 1a 03 	lds	r24, 0x031A
    195e:	90 91 1b 03 	lds	r25, 0x031B
    1962:	82 17       	cp	r24, r18
    1964:	93 07       	cpc	r25, r19
    1966:	79 f5       	brne	.+94     	; 0x19c6 <free+0x92>
    1968:	f0 93 1b 03 	sts	0x031B, r31
    196c:	e0 93 1a 03 	sts	0x031A, r30
    1970:	6d c0       	rjmp	.+218    	; 0x1a4c <free+0x118>
    1972:	de 01       	movw	r26, r28
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	ae 17       	cp	r26, r30
    197a:	bf 07       	cpc	r27, r31
    197c:	50 f4       	brcc	.+20     	; 0x1992 <free+0x5e>
    197e:	12 96       	adiw	r26, 0x02	; 2
    1980:	4d 91       	ld	r20, X+
    1982:	5c 91       	ld	r21, X
    1984:	13 97       	sbiw	r26, 0x03	; 3
    1986:	9d 01       	movw	r18, r26
    1988:	41 15       	cp	r20, r1
    198a:	51 05       	cpc	r21, r1
    198c:	09 f1       	breq	.+66     	; 0x19d0 <free+0x9c>
    198e:	da 01       	movw	r26, r20
    1990:	f3 cf       	rjmp	.-26     	; 0x1978 <free+0x44>
    1992:	b3 83       	std	Z+3, r27	; 0x03
    1994:	a2 83       	std	Z+2, r26	; 0x02
    1996:	40 81       	ld	r20, Z
    1998:	51 81       	ldd	r21, Z+1	; 0x01
    199a:	84 0f       	add	r24, r20
    199c:	95 1f       	adc	r25, r21
    199e:	8a 17       	cp	r24, r26
    19a0:	9b 07       	cpc	r25, r27
    19a2:	71 f4       	brne	.+28     	; 0x19c0 <free+0x8c>
    19a4:	8d 91       	ld	r24, X+
    19a6:	9c 91       	ld	r25, X
    19a8:	11 97       	sbiw	r26, 0x01	; 1
    19aa:	84 0f       	add	r24, r20
    19ac:	95 1f       	adc	r25, r21
    19ae:	02 96       	adiw	r24, 0x02	; 2
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	80 83       	st	Z, r24
    19b4:	12 96       	adiw	r26, 0x02	; 2
    19b6:	8d 91       	ld	r24, X+
    19b8:	9c 91       	ld	r25, X
    19ba:	13 97       	sbiw	r26, 0x03	; 3
    19bc:	93 83       	std	Z+3, r25	; 0x03
    19be:	82 83       	std	Z+2, r24	; 0x02
    19c0:	21 15       	cp	r18, r1
    19c2:	31 05       	cpc	r19, r1
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <free+0x9c>
    19c6:	f0 93 1d 03 	sts	0x031D, r31
    19ca:	e0 93 1c 03 	sts	0x031C, r30
    19ce:	3e c0       	rjmp	.+124    	; 0x1a4c <free+0x118>
    19d0:	d9 01       	movw	r26, r18
    19d2:	13 96       	adiw	r26, 0x03	; 3
    19d4:	fc 93       	st	X, r31
    19d6:	ee 93       	st	-X, r30
    19d8:	12 97       	sbiw	r26, 0x02	; 2
    19da:	4d 91       	ld	r20, X+
    19dc:	5d 91       	ld	r21, X+
    19de:	a4 0f       	add	r26, r20
    19e0:	b5 1f       	adc	r27, r21
    19e2:	ea 17       	cp	r30, r26
    19e4:	fb 07       	cpc	r31, r27
    19e6:	79 f4       	brne	.+30     	; 0x1a06 <free+0xd2>
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	84 0f       	add	r24, r20
    19ee:	95 1f       	adc	r25, r21
    19f0:	02 96       	adiw	r24, 0x02	; 2
    19f2:	d9 01       	movw	r26, r18
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	9c 93       	st	X, r25
    19f8:	8e 93       	st	-X, r24
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	13 96       	adiw	r26, 0x03	; 3
    1a00:	9c 93       	st	X, r25
    1a02:	8e 93       	st	-X, r24
    1a04:	12 97       	sbiw	r26, 0x02	; 2
    1a06:	e0 e0       	ldi	r30, 0x00	; 0
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	19 f0       	breq	.+6      	; 0x1a18 <free+0xe4>
    1a12:	fe 01       	movw	r30, r28
    1a14:	ec 01       	movw	r28, r24
    1a16:	f9 cf       	rjmp	.-14     	; 0x1a0a <free+0xd6>
    1a18:	ce 01       	movw	r24, r28
    1a1a:	02 96       	adiw	r24, 0x02	; 2
    1a1c:	28 81       	ld	r18, Y
    1a1e:	39 81       	ldd	r19, Y+1	; 0x01
    1a20:	82 0f       	add	r24, r18
    1a22:	93 1f       	adc	r25, r19
    1a24:	20 91 1a 03 	lds	r18, 0x031A
    1a28:	30 91 1b 03 	lds	r19, 0x031B
    1a2c:	28 17       	cp	r18, r24
    1a2e:	39 07       	cpc	r19, r25
    1a30:	69 f4       	brne	.+26     	; 0x1a4c <free+0x118>
    1a32:	30 97       	sbiw	r30, 0x00	; 0
    1a34:	29 f4       	brne	.+10     	; 0x1a40 <free+0x10c>
    1a36:	10 92 1d 03 	sts	0x031D, r1
    1a3a:	10 92 1c 03 	sts	0x031C, r1
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <free+0x110>
    1a40:	13 82       	std	Z+3, r1	; 0x03
    1a42:	12 82       	std	Z+2, r1	; 0x02
    1a44:	d0 93 1b 03 	sts	0x031B, r29
    1a48:	c0 93 1a 03 	sts	0x031A, r28
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <atoi>:
    1a52:	fc 01       	movw	r30, r24
    1a54:	88 27       	eor	r24, r24
    1a56:	99 27       	eor	r25, r25
    1a58:	e8 94       	clt
    1a5a:	21 91       	ld	r18, Z+
    1a5c:	20 32       	cpi	r18, 0x20	; 32
    1a5e:	e9 f3       	breq	.-6      	; 0x1a5a <atoi+0x8>
    1a60:	29 30       	cpi	r18, 0x09	; 9
    1a62:	10 f0       	brcs	.+4      	; 0x1a68 <atoi+0x16>
    1a64:	2e 30       	cpi	r18, 0x0E	; 14
    1a66:	c8 f3       	brcs	.-14     	; 0x1a5a <atoi+0x8>
    1a68:	2b 32       	cpi	r18, 0x2B	; 43
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <atoi+0x28>
    1a6c:	2d 32       	cpi	r18, 0x2D	; 45
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <atoi+0x2a>
    1a70:	68 94       	set
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <atoi+0x28>
    1a74:	22 d0       	rcall	.+68     	; 0x1aba <__mulhi_const_10>
    1a76:	82 0f       	add	r24, r18
    1a78:	91 1d       	adc	r25, r1
    1a7a:	21 91       	ld	r18, Z+
    1a7c:	20 53       	subi	r18, 0x30	; 48
    1a7e:	2a 30       	cpi	r18, 0x0A	; 10
    1a80:	c8 f3       	brcs	.-14     	; 0x1a74 <atoi+0x22>
    1a82:	1e f4       	brtc	.+6      	; 0x1a8a <atoi+0x38>
    1a84:	90 95       	com	r25
    1a86:	81 95       	neg	r24
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	08 95       	ret

00001a8c <memset>:
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <memset+0x6>
    1a90:	6d 93       	st	X+, r22
    1a92:	41 50       	subi	r20, 0x01	; 1
    1a94:	50 40       	sbci	r21, 0x00	; 0
    1a96:	e0 f7       	brcc	.-8      	; 0x1a90 <memset+0x4>
    1a98:	08 95       	ret

00001a9a <strcmp>:
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	80 19       	sub	r24, r0
    1aa4:	01 10       	cpse	r0, r1
    1aa6:	d9 f3       	breq	.-10     	; 0x1a9e <strcmp+0x4>
    1aa8:	99 0b       	sbc	r25, r25
    1aaa:	08 95       	ret

00001aac <strcpy>:
    1aac:	fb 01       	movw	r30, r22
    1aae:	dc 01       	movw	r26, r24
    1ab0:	01 90       	ld	r0, Z+
    1ab2:	0d 92       	st	X+, r0
    1ab4:	00 20       	and	r0, r0
    1ab6:	e1 f7       	brne	.-8      	; 0x1ab0 <strcpy+0x4>
    1ab8:	08 95       	ret

00001aba <__mulhi_const_10>:
    1aba:	7a e0       	ldi	r23, 0x0A	; 10
    1abc:	97 9f       	mul	r25, r23
    1abe:	90 2d       	mov	r25, r0
    1ac0:	87 9f       	mul	r24, r23
    1ac2:	80 2d       	mov	r24, r0
    1ac4:	91 0d       	add	r25, r1
    1ac6:	11 24       	eor	r1, r1
    1ac8:	08 95       	ret

00001aca <vsnprintf>:
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	8c 01       	movw	r16, r24
    1ae4:	ca 01       	movw	r24, r20
    1ae6:	46 e0       	ldi	r20, 0x06	; 6
    1ae8:	4c 83       	std	Y+4, r20	; 0x04
    1aea:	1a 83       	std	Y+2, r17	; 0x02
    1aec:	09 83       	std	Y+1, r16	; 0x01
    1aee:	77 ff       	sbrs	r23, 7
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vsnprintf+0x2c>
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e8       	ldi	r23, 0x80	; 128
    1af6:	61 50       	subi	r22, 0x01	; 1
    1af8:	71 09       	sbc	r23, r1
    1afa:	7e 83       	std	Y+6, r23	; 0x06
    1afc:	6d 83       	std	Y+5, r22	; 0x05
    1afe:	a9 01       	movw	r20, r18
    1b00:	bc 01       	movw	r22, r24
    1b02:	ce 01       	movw	r24, r28
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	19 d0       	rcall	.+50     	; 0x1b3a <vfprintf>
    1b08:	4d 81       	ldd	r20, Y+5	; 0x05
    1b0a:	5e 81       	ldd	r21, Y+6	; 0x06
    1b0c:	57 fd       	sbrc	r21, 7
    1b0e:	0a c0       	rjmp	.+20     	; 0x1b24 <vsnprintf+0x5a>
    1b10:	2f 81       	ldd	r18, Y+7	; 0x07
    1b12:	38 85       	ldd	r19, Y+8	; 0x08
    1b14:	42 17       	cp	r20, r18
    1b16:	53 07       	cpc	r21, r19
    1b18:	0c f4       	brge	.+2      	; 0x1b1c <vsnprintf+0x52>
    1b1a:	9a 01       	movw	r18, r20
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	e2 0f       	add	r30, r18
    1b20:	f3 1f       	adc	r31, r19
    1b22:	10 82       	st	Z, r1
    1b24:	2e 96       	adiw	r28, 0x0e	; 14
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	08 95       	ret

00001b3a <vfprintf>:
    1b3a:	2f 92       	push	r2
    1b3c:	3f 92       	push	r3
    1b3e:	4f 92       	push	r4
    1b40:	5f 92       	push	r5
    1b42:	6f 92       	push	r6
    1b44:	7f 92       	push	r7
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	2c 97       	sbiw	r28, 0x0c	; 12
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	7c 01       	movw	r14, r24
    1b70:	6b 01       	movw	r12, r22
    1b72:	8a 01       	movw	r16, r20
    1b74:	fc 01       	movw	r30, r24
    1b76:	17 82       	std	Z+7, r1	; 0x07
    1b78:	16 82       	std	Z+6, r1	; 0x06
    1b7a:	83 81       	ldd	r24, Z+3	; 0x03
    1b7c:	81 ff       	sbrs	r24, 1
    1b7e:	b0 c1       	rjmp	.+864    	; 0x1ee0 <vfprintf+0x3a6>
    1b80:	ce 01       	movw	r24, r28
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	4c 01       	movw	r8, r24
    1b86:	f7 01       	movw	r30, r14
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	f6 01       	movw	r30, r12
    1b8c:	93 fd       	sbrc	r25, 3
    1b8e:	85 91       	lpm	r24, Z+
    1b90:	93 ff       	sbrs	r25, 3
    1b92:	81 91       	ld	r24, Z+
    1b94:	6f 01       	movw	r12, r30
    1b96:	88 23       	and	r24, r24
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <vfprintf+0x62>
    1b9a:	9e c1       	rjmp	.+828    	; 0x1ed8 <vfprintf+0x39e>
    1b9c:	85 32       	cpi	r24, 0x25	; 37
    1b9e:	39 f4       	brne	.+14     	; 0x1bae <vfprintf+0x74>
    1ba0:	93 fd       	sbrc	r25, 3
    1ba2:	85 91       	lpm	r24, Z+
    1ba4:	93 ff       	sbrs	r25, 3
    1ba6:	81 91       	ld	r24, Z+
    1ba8:	6f 01       	movw	r12, r30
    1baa:	85 32       	cpi	r24, 0x25	; 37
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <vfprintf+0x7c>
    1bae:	b7 01       	movw	r22, r14
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	c7 d1       	rcall	.+910    	; 0x1f42 <fputc>
    1bb4:	e8 cf       	rjmp	.-48     	; 0x1b86 <vfprintf+0x4c>
    1bb6:	51 2c       	mov	r5, r1
    1bb8:	31 2c       	mov	r3, r1
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	20 32       	cpi	r18, 0x20	; 32
    1bbe:	a0 f4       	brcc	.+40     	; 0x1be8 <vfprintf+0xae>
    1bc0:	8b 32       	cpi	r24, 0x2B	; 43
    1bc2:	69 f0       	breq	.+26     	; 0x1bde <vfprintf+0xa4>
    1bc4:	30 f4       	brcc	.+12     	; 0x1bd2 <vfprintf+0x98>
    1bc6:	80 32       	cpi	r24, 0x20	; 32
    1bc8:	59 f0       	breq	.+22     	; 0x1be0 <vfprintf+0xa6>
    1bca:	83 32       	cpi	r24, 0x23	; 35
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <vfprintf+0xae>
    1bce:	20 61       	ori	r18, 0x10	; 16
    1bd0:	2c c0       	rjmp	.+88     	; 0x1c2a <vfprintf+0xf0>
    1bd2:	8d 32       	cpi	r24, 0x2D	; 45
    1bd4:	39 f0       	breq	.+14     	; 0x1be4 <vfprintf+0xaa>
    1bd6:	80 33       	cpi	r24, 0x30	; 48
    1bd8:	39 f4       	brne	.+14     	; 0x1be8 <vfprintf+0xae>
    1bda:	21 60       	ori	r18, 0x01	; 1
    1bdc:	26 c0       	rjmp	.+76     	; 0x1c2a <vfprintf+0xf0>
    1bde:	22 60       	ori	r18, 0x02	; 2
    1be0:	24 60       	ori	r18, 0x04	; 4
    1be2:	23 c0       	rjmp	.+70     	; 0x1c2a <vfprintf+0xf0>
    1be4:	28 60       	ori	r18, 0x08	; 8
    1be6:	21 c0       	rjmp	.+66     	; 0x1c2a <vfprintf+0xf0>
    1be8:	27 fd       	sbrc	r18, 7
    1bea:	27 c0       	rjmp	.+78     	; 0x1c3a <vfprintf+0x100>
    1bec:	30 ed       	ldi	r19, 0xD0	; 208
    1bee:	38 0f       	add	r19, r24
    1bf0:	3a 30       	cpi	r19, 0x0A	; 10
    1bf2:	78 f4       	brcc	.+30     	; 0x1c12 <vfprintf+0xd8>
    1bf4:	26 ff       	sbrs	r18, 6
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <vfprintf+0xca>
    1bf8:	fa e0       	ldi	r31, 0x0A	; 10
    1bfa:	5f 9e       	mul	r5, r31
    1bfc:	30 0d       	add	r19, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	53 2e       	mov	r5, r19
    1c02:	13 c0       	rjmp	.+38     	; 0x1c2a <vfprintf+0xf0>
    1c04:	8a e0       	ldi	r24, 0x0A	; 10
    1c06:	38 9e       	mul	r3, r24
    1c08:	30 0d       	add	r19, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	33 2e       	mov	r3, r19
    1c0e:	20 62       	ori	r18, 0x20	; 32
    1c10:	0c c0       	rjmp	.+24     	; 0x1c2a <vfprintf+0xf0>
    1c12:	8e 32       	cpi	r24, 0x2E	; 46
    1c14:	21 f4       	brne	.+8      	; 0x1c1e <vfprintf+0xe4>
    1c16:	26 fd       	sbrc	r18, 6
    1c18:	5f c1       	rjmp	.+702    	; 0x1ed8 <vfprintf+0x39e>
    1c1a:	20 64       	ori	r18, 0x40	; 64
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <vfprintf+0xf0>
    1c1e:	8c 36       	cpi	r24, 0x6C	; 108
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <vfprintf+0xec>
    1c22:	20 68       	ori	r18, 0x80	; 128
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <vfprintf+0xf0>
    1c26:	88 36       	cpi	r24, 0x68	; 104
    1c28:	41 f4       	brne	.+16     	; 0x1c3a <vfprintf+0x100>
    1c2a:	f6 01       	movw	r30, r12
    1c2c:	93 fd       	sbrc	r25, 3
    1c2e:	85 91       	lpm	r24, Z+
    1c30:	93 ff       	sbrs	r25, 3
    1c32:	81 91       	ld	r24, Z+
    1c34:	6f 01       	movw	r12, r30
    1c36:	81 11       	cpse	r24, r1
    1c38:	c1 cf       	rjmp	.-126    	; 0x1bbc <vfprintf+0x82>
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	9f 7d       	andi	r25, 0xDF	; 223
    1c3e:	95 54       	subi	r25, 0x45	; 69
    1c40:	93 30       	cpi	r25, 0x03	; 3
    1c42:	28 f4       	brcc	.+10     	; 0x1c4e <vfprintf+0x114>
    1c44:	0c 5f       	subi	r16, 0xFC	; 252
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	ff e3       	ldi	r31, 0x3F	; 63
    1c4a:	f9 83       	std	Y+1, r31	; 0x01
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <vfprintf+0x12e>
    1c4e:	83 36       	cpi	r24, 0x63	; 99
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <vfprintf+0x124>
    1c52:	83 37       	cpi	r24, 0x73	; 115
    1c54:	71 f0       	breq	.+28     	; 0x1c72 <vfprintf+0x138>
    1c56:	83 35       	cpi	r24, 0x53	; 83
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <vfprintf+0x122>
    1c5a:	57 c0       	rjmp	.+174    	; 0x1d0a <vfprintf+0x1d0>
    1c5c:	21 c0       	rjmp	.+66     	; 0x1ca0 <vfprintf+0x166>
    1c5e:	f8 01       	movw	r30, r16
    1c60:	80 81       	ld	r24, Z
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	0e 5f       	subi	r16, 0xFE	; 254
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	44 24       	eor	r4, r4
    1c6a:	43 94       	inc	r4
    1c6c:	51 2c       	mov	r5, r1
    1c6e:	54 01       	movw	r10, r8
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <vfprintf+0x160>
    1c72:	38 01       	movw	r6, r16
    1c74:	f2 e0       	ldi	r31, 0x02	; 2
    1c76:	6f 0e       	add	r6, r31
    1c78:	71 1c       	adc	r7, r1
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	a0 80       	ld	r10, Z
    1c7e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c80:	26 ff       	sbrs	r18, 6
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <vfprintf+0x150>
    1c84:	65 2d       	mov	r22, r5
    1c86:	70 e0       	ldi	r23, 0x00	; 0
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <vfprintf+0x154>
    1c8a:	6f ef       	ldi	r22, 0xFF	; 255
    1c8c:	7f ef       	ldi	r23, 0xFF	; 255
    1c8e:	c5 01       	movw	r24, r10
    1c90:	2c 87       	std	Y+12, r18	; 0x0c
    1c92:	4c d1       	rcall	.+664    	; 0x1f2c <strnlen>
    1c94:	2c 01       	movw	r4, r24
    1c96:	83 01       	movw	r16, r6
    1c98:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c9a:	2f 77       	andi	r18, 0x7F	; 127
    1c9c:	22 2e       	mov	r2, r18
    1c9e:	16 c0       	rjmp	.+44     	; 0x1ccc <vfprintf+0x192>
    1ca0:	38 01       	movw	r6, r16
    1ca2:	f2 e0       	ldi	r31, 0x02	; 2
    1ca4:	6f 0e       	add	r6, r31
    1ca6:	71 1c       	adc	r7, r1
    1ca8:	f8 01       	movw	r30, r16
    1caa:	a0 80       	ld	r10, Z
    1cac:	b1 80       	ldd	r11, Z+1	; 0x01
    1cae:	26 ff       	sbrs	r18, 6
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x17e>
    1cb2:	65 2d       	mov	r22, r5
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x182>
    1cb8:	6f ef       	ldi	r22, 0xFF	; 255
    1cba:	7f ef       	ldi	r23, 0xFF	; 255
    1cbc:	c5 01       	movw	r24, r10
    1cbe:	2c 87       	std	Y+12, r18	; 0x0c
    1cc0:	2a d1       	rcall	.+596    	; 0x1f16 <strnlen_P>
    1cc2:	2c 01       	movw	r4, r24
    1cc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc6:	20 68       	ori	r18, 0x80	; 128
    1cc8:	22 2e       	mov	r2, r18
    1cca:	83 01       	movw	r16, r6
    1ccc:	23 fc       	sbrc	r2, 3
    1cce:	19 c0       	rjmp	.+50     	; 0x1d02 <vfprintf+0x1c8>
    1cd0:	83 2d       	mov	r24, r3
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	48 16       	cp	r4, r24
    1cd6:	59 06       	cpc	r5, r25
    1cd8:	a0 f4       	brcc	.+40     	; 0x1d02 <vfprintf+0x1c8>
    1cda:	b7 01       	movw	r22, r14
    1cdc:	80 e2       	ldi	r24, 0x20	; 32
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	30 d1       	rcall	.+608    	; 0x1f42 <fputc>
    1ce2:	3a 94       	dec	r3
    1ce4:	f5 cf       	rjmp	.-22     	; 0x1cd0 <vfprintf+0x196>
    1ce6:	f5 01       	movw	r30, r10
    1ce8:	27 fc       	sbrc	r2, 7
    1cea:	85 91       	lpm	r24, Z+
    1cec:	27 fe       	sbrs	r2, 7
    1cee:	81 91       	ld	r24, Z+
    1cf0:	5f 01       	movw	r10, r30
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	25 d1       	rcall	.+586    	; 0x1f42 <fputc>
    1cf8:	31 10       	cpse	r3, r1
    1cfa:	3a 94       	dec	r3
    1cfc:	f1 e0       	ldi	r31, 0x01	; 1
    1cfe:	4f 1a       	sub	r4, r31
    1d00:	51 08       	sbc	r5, r1
    1d02:	41 14       	cp	r4, r1
    1d04:	51 04       	cpc	r5, r1
    1d06:	79 f7       	brne	.-34     	; 0x1ce6 <vfprintf+0x1ac>
    1d08:	de c0       	rjmp	.+444    	; 0x1ec6 <vfprintf+0x38c>
    1d0a:	84 36       	cpi	r24, 0x64	; 100
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <vfprintf+0x1d8>
    1d0e:	89 36       	cpi	r24, 0x69	; 105
    1d10:	31 f5       	brne	.+76     	; 0x1d5e <vfprintf+0x224>
    1d12:	f8 01       	movw	r30, r16
    1d14:	27 ff       	sbrs	r18, 7
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <vfprintf+0x1ec>
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	82 81       	ldd	r24, Z+2	; 0x02
    1d1e:	93 81       	ldd	r25, Z+3	; 0x03
    1d20:	0c 5f       	subi	r16, 0xFC	; 252
    1d22:	1f 4f       	sbci	r17, 0xFF	; 255
    1d24:	08 c0       	rjmp	.+16     	; 0x1d36 <vfprintf+0x1fc>
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	88 27       	eor	r24, r24
    1d2c:	77 fd       	sbrc	r23, 7
    1d2e:	80 95       	com	r24
    1d30:	98 2f       	mov	r25, r24
    1d32:	0e 5f       	subi	r16, 0xFE	; 254
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	2f 76       	andi	r18, 0x6F	; 111
    1d38:	b2 2e       	mov	r11, r18
    1d3a:	97 ff       	sbrs	r25, 7
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <vfprintf+0x216>
    1d3e:	90 95       	com	r25
    1d40:	80 95       	com	r24
    1d42:	70 95       	com	r23
    1d44:	61 95       	neg	r22
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	20 68       	ori	r18, 0x80	; 128
    1d4e:	b2 2e       	mov	r11, r18
    1d50:	2a e0       	ldi	r18, 0x0A	; 10
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	a4 01       	movw	r20, r8
    1d56:	27 d1       	rcall	.+590    	; 0x1fa6 <__ultoa_invert>
    1d58:	a8 2e       	mov	r10, r24
    1d5a:	a8 18       	sub	r10, r8
    1d5c:	43 c0       	rjmp	.+134    	; 0x1de4 <vfprintf+0x2aa>
    1d5e:	85 37       	cpi	r24, 0x75	; 117
    1d60:	29 f4       	brne	.+10     	; 0x1d6c <vfprintf+0x232>
    1d62:	2f 7e       	andi	r18, 0xEF	; 239
    1d64:	b2 2e       	mov	r11, r18
    1d66:	2a e0       	ldi	r18, 0x0A	; 10
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	25 c0       	rjmp	.+74     	; 0x1db6 <vfprintf+0x27c>
    1d6c:	f2 2f       	mov	r31, r18
    1d6e:	f9 7f       	andi	r31, 0xF9	; 249
    1d70:	bf 2e       	mov	r11, r31
    1d72:	8f 36       	cpi	r24, 0x6F	; 111
    1d74:	c1 f0       	breq	.+48     	; 0x1da6 <vfprintf+0x26c>
    1d76:	18 f4       	brcc	.+6      	; 0x1d7e <vfprintf+0x244>
    1d78:	88 35       	cpi	r24, 0x58	; 88
    1d7a:	79 f0       	breq	.+30     	; 0x1d9a <vfprintf+0x260>
    1d7c:	ad c0       	rjmp	.+346    	; 0x1ed8 <vfprintf+0x39e>
    1d7e:	80 37       	cpi	r24, 0x70	; 112
    1d80:	19 f0       	breq	.+6      	; 0x1d88 <vfprintf+0x24e>
    1d82:	88 37       	cpi	r24, 0x78	; 120
    1d84:	21 f0       	breq	.+8      	; 0x1d8e <vfprintf+0x254>
    1d86:	a8 c0       	rjmp	.+336    	; 0x1ed8 <vfprintf+0x39e>
    1d88:	2f 2f       	mov	r18, r31
    1d8a:	20 61       	ori	r18, 0x10	; 16
    1d8c:	b2 2e       	mov	r11, r18
    1d8e:	b4 fe       	sbrs	r11, 4
    1d90:	0d c0       	rjmp	.+26     	; 0x1dac <vfprintf+0x272>
    1d92:	8b 2d       	mov	r24, r11
    1d94:	84 60       	ori	r24, 0x04	; 4
    1d96:	b8 2e       	mov	r11, r24
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <vfprintf+0x272>
    1d9a:	24 ff       	sbrs	r18, 4
    1d9c:	0a c0       	rjmp	.+20     	; 0x1db2 <vfprintf+0x278>
    1d9e:	9f 2f       	mov	r25, r31
    1da0:	96 60       	ori	r25, 0x06	; 6
    1da2:	b9 2e       	mov	r11, r25
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <vfprintf+0x278>
    1da6:	28 e0       	ldi	r18, 0x08	; 8
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	05 c0       	rjmp	.+10     	; 0x1db6 <vfprintf+0x27c>
    1dac:	20 e1       	ldi	r18, 0x10	; 16
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <vfprintf+0x27c>
    1db2:	20 e1       	ldi	r18, 0x10	; 16
    1db4:	32 e0       	ldi	r19, 0x02	; 2
    1db6:	f8 01       	movw	r30, r16
    1db8:	b7 fe       	sbrs	r11, 7
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <vfprintf+0x290>
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	0c 5f       	subi	r16, 0xFC	; 252
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	06 c0       	rjmp	.+12     	; 0x1dd6 <vfprintf+0x29c>
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 5f       	subi	r16, 0xFE	; 254
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	a4 01       	movw	r20, r8
    1dd8:	e6 d0       	rcall	.+460    	; 0x1fa6 <__ultoa_invert>
    1dda:	a8 2e       	mov	r10, r24
    1ddc:	a8 18       	sub	r10, r8
    1dde:	fb 2d       	mov	r31, r11
    1de0:	ff 77       	andi	r31, 0x7F	; 127
    1de2:	bf 2e       	mov	r11, r31
    1de4:	b6 fe       	sbrs	r11, 6
    1de6:	0b c0       	rjmp	.+22     	; 0x1dfe <vfprintf+0x2c4>
    1de8:	2b 2d       	mov	r18, r11
    1dea:	2e 7f       	andi	r18, 0xFE	; 254
    1dec:	a5 14       	cp	r10, r5
    1dee:	50 f4       	brcc	.+20     	; 0x1e04 <vfprintf+0x2ca>
    1df0:	b4 fe       	sbrs	r11, 4
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <vfprintf+0x2ce>
    1df4:	b2 fc       	sbrc	r11, 2
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <vfprintf+0x2ce>
    1df8:	2b 2d       	mov	r18, r11
    1dfa:	2e 7e       	andi	r18, 0xEE	; 238
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <vfprintf+0x2ce>
    1dfe:	7a 2c       	mov	r7, r10
    1e00:	2b 2d       	mov	r18, r11
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <vfprintf+0x2d0>
    1e04:	7a 2c       	mov	r7, r10
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <vfprintf+0x2d0>
    1e08:	75 2c       	mov	r7, r5
    1e0a:	24 ff       	sbrs	r18, 4
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <vfprintf+0x2ee>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ea 0d       	add	r30, r10
    1e12:	f1 1d       	adc	r31, r1
    1e14:	80 81       	ld	r24, Z
    1e16:	80 33       	cpi	r24, 0x30	; 48
    1e18:	11 f4       	brne	.+4      	; 0x1e1e <vfprintf+0x2e4>
    1e1a:	29 7e       	andi	r18, 0xE9	; 233
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <vfprintf+0x2f6>
    1e1e:	22 ff       	sbrs	r18, 2
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x2f4>
    1e22:	73 94       	inc	r7
    1e24:	73 94       	inc	r7
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <vfprintf+0x2f6>
    1e28:	82 2f       	mov	r24, r18
    1e2a:	86 78       	andi	r24, 0x86	; 134
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <vfprintf+0x2f6>
    1e2e:	73 94       	inc	r7
    1e30:	23 fd       	sbrc	r18, 3
    1e32:	12 c0       	rjmp	.+36     	; 0x1e58 <vfprintf+0x31e>
    1e34:	20 ff       	sbrs	r18, 0
    1e36:	06 c0       	rjmp	.+12     	; 0x1e44 <vfprintf+0x30a>
    1e38:	5a 2c       	mov	r5, r10
    1e3a:	73 14       	cp	r7, r3
    1e3c:	18 f4       	brcc	.+6      	; 0x1e44 <vfprintf+0x30a>
    1e3e:	53 0c       	add	r5, r3
    1e40:	57 18       	sub	r5, r7
    1e42:	73 2c       	mov	r7, r3
    1e44:	73 14       	cp	r7, r3
    1e46:	60 f4       	brcc	.+24     	; 0x1e60 <vfprintf+0x326>
    1e48:	b7 01       	movw	r22, r14
    1e4a:	80 e2       	ldi	r24, 0x20	; 32
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	2c 87       	std	Y+12, r18	; 0x0c
    1e50:	78 d0       	rcall	.+240    	; 0x1f42 <fputc>
    1e52:	73 94       	inc	r7
    1e54:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e56:	f6 cf       	rjmp	.-20     	; 0x1e44 <vfprintf+0x30a>
    1e58:	73 14       	cp	r7, r3
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <vfprintf+0x326>
    1e5c:	37 18       	sub	r3, r7
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <vfprintf+0x328>
    1e60:	31 2c       	mov	r3, r1
    1e62:	24 ff       	sbrs	r18, 4
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <vfprintf+0x34e>
    1e66:	b7 01       	movw	r22, r14
    1e68:	80 e3       	ldi	r24, 0x30	; 48
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	2c 87       	std	Y+12, r18	; 0x0c
    1e6e:	69 d0       	rcall	.+210    	; 0x1f42 <fputc>
    1e70:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e72:	22 ff       	sbrs	r18, 2
    1e74:	16 c0       	rjmp	.+44     	; 0x1ea2 <vfprintf+0x368>
    1e76:	21 ff       	sbrs	r18, 1
    1e78:	03 c0       	rjmp	.+6      	; 0x1e80 <vfprintf+0x346>
    1e7a:	88 e5       	ldi	r24, 0x58	; 88
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <vfprintf+0x34a>
    1e80:	88 e7       	ldi	r24, 0x78	; 120
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	b7 01       	movw	r22, r14
    1e86:	0c c0       	rjmp	.+24     	; 0x1ea0 <vfprintf+0x366>
    1e88:	82 2f       	mov	r24, r18
    1e8a:	86 78       	andi	r24, 0x86	; 134
    1e8c:	51 f0       	breq	.+20     	; 0x1ea2 <vfprintf+0x368>
    1e8e:	21 fd       	sbrc	r18, 1
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x35c>
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <vfprintf+0x35e>
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	27 fd       	sbrc	r18, 7
    1e9a:	8d e2       	ldi	r24, 0x2D	; 45
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	50 d0       	rcall	.+160    	; 0x1f42 <fputc>
    1ea2:	a5 14       	cp	r10, r5
    1ea4:	30 f4       	brcc	.+12     	; 0x1eb2 <vfprintf+0x378>
    1ea6:	b7 01       	movw	r22, r14
    1ea8:	80 e3       	ldi	r24, 0x30	; 48
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	4a d0       	rcall	.+148    	; 0x1f42 <fputc>
    1eae:	5a 94       	dec	r5
    1eb0:	f8 cf       	rjmp	.-16     	; 0x1ea2 <vfprintf+0x368>
    1eb2:	aa 94       	dec	r10
    1eb4:	f4 01       	movw	r30, r8
    1eb6:	ea 0d       	add	r30, r10
    1eb8:	f1 1d       	adc	r31, r1
    1eba:	80 81       	ld	r24, Z
    1ebc:	b7 01       	movw	r22, r14
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	40 d0       	rcall	.+128    	; 0x1f42 <fputc>
    1ec2:	a1 10       	cpse	r10, r1
    1ec4:	f6 cf       	rjmp	.-20     	; 0x1eb2 <vfprintf+0x378>
    1ec6:	33 20       	and	r3, r3
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <vfprintf+0x392>
    1eca:	5d ce       	rjmp	.-838    	; 0x1b86 <vfprintf+0x4c>
    1ecc:	b7 01       	movw	r22, r14
    1ece:	80 e2       	ldi	r24, 0x20	; 32
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	37 d0       	rcall	.+110    	; 0x1f42 <fputc>
    1ed4:	3a 94       	dec	r3
    1ed6:	f7 cf       	rjmp	.-18     	; 0x1ec6 <vfprintf+0x38c>
    1ed8:	f7 01       	movw	r30, r14
    1eda:	86 81       	ldd	r24, Z+6	; 0x06
    1edc:	97 81       	ldd	r25, Z+7	; 0x07
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <vfprintf+0x3aa>
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	9f ef       	ldi	r25, 0xFF	; 255
    1ee4:	2c 96       	adiw	r28, 0x0c	; 12
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	7f 90       	pop	r7
    1f0a:	6f 90       	pop	r6
    1f0c:	5f 90       	pop	r5
    1f0e:	4f 90       	pop	r4
    1f10:	3f 90       	pop	r3
    1f12:	2f 90       	pop	r2
    1f14:	08 95       	ret

00001f16 <strnlen_P>:
    1f16:	fc 01       	movw	r30, r24
    1f18:	05 90       	lpm	r0, Z+
    1f1a:	61 50       	subi	r22, 0x01	; 1
    1f1c:	70 40       	sbci	r23, 0x00	; 0
    1f1e:	01 10       	cpse	r0, r1
    1f20:	d8 f7       	brcc	.-10     	; 0x1f18 <strnlen_P+0x2>
    1f22:	80 95       	com	r24
    1f24:	90 95       	com	r25
    1f26:	8e 0f       	add	r24, r30
    1f28:	9f 1f       	adc	r25, r31
    1f2a:	08 95       	ret

00001f2c <strnlen>:
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	61 50       	subi	r22, 0x01	; 1
    1f30:	70 40       	sbci	r23, 0x00	; 0
    1f32:	01 90       	ld	r0, Z+
    1f34:	01 10       	cpse	r0, r1
    1f36:	d8 f7       	brcc	.-10     	; 0x1f2e <strnlen+0x2>
    1f38:	80 95       	com	r24
    1f3a:	90 95       	com	r25
    1f3c:	8e 0f       	add	r24, r30
    1f3e:	9f 1f       	adc	r25, r31
    1f40:	08 95       	ret

00001f42 <fputc>:
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	18 2f       	mov	r17, r24
    1f4c:	09 2f       	mov	r16, r25
    1f4e:	eb 01       	movw	r28, r22
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	81 fd       	sbrc	r24, 1
    1f54:	03 c0       	rjmp	.+6      	; 0x1f5c <fputc+0x1a>
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	9f ef       	ldi	r25, 0xFF	; 255
    1f5a:	20 c0       	rjmp	.+64     	; 0x1f9c <fputc+0x5a>
    1f5c:	82 ff       	sbrs	r24, 2
    1f5e:	10 c0       	rjmp	.+32     	; 0x1f80 <fputc+0x3e>
    1f60:	4e 81       	ldd	r20, Y+6	; 0x06
    1f62:	5f 81       	ldd	r21, Y+7	; 0x07
    1f64:	2c 81       	ldd	r18, Y+4	; 0x04
    1f66:	3d 81       	ldd	r19, Y+5	; 0x05
    1f68:	42 17       	cp	r20, r18
    1f6a:	53 07       	cpc	r21, r19
    1f6c:	7c f4       	brge	.+30     	; 0x1f8c <fputc+0x4a>
    1f6e:	e8 81       	ld	r30, Y
    1f70:	f9 81       	ldd	r31, Y+1	; 0x01
    1f72:	9f 01       	movw	r18, r30
    1f74:	2f 5f       	subi	r18, 0xFF	; 255
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	39 83       	std	Y+1, r19	; 0x01
    1f7a:	28 83       	st	Y, r18
    1f7c:	10 83       	st	Z, r17
    1f7e:	06 c0       	rjmp	.+12     	; 0x1f8c <fputc+0x4a>
    1f80:	e8 85       	ldd	r30, Y+8	; 0x08
    1f82:	f9 85       	ldd	r31, Y+9	; 0x09
    1f84:	81 2f       	mov	r24, r17
    1f86:	09 95       	icall
    1f88:	89 2b       	or	r24, r25
    1f8a:	29 f7       	brne	.-54     	; 0x1f56 <fputc+0x14>
    1f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	3f 83       	std	Y+7, r19	; 0x07
    1f96:	2e 83       	std	Y+6, r18	; 0x06
    1f98:	81 2f       	mov	r24, r17
    1f9a:	90 2f       	mov	r25, r16
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <__ultoa_invert>:
    1fa6:	fa 01       	movw	r30, r20
    1fa8:	aa 27       	eor	r26, r26
    1faa:	28 30       	cpi	r18, 0x08	; 8
    1fac:	51 f1       	breq	.+84     	; 0x2002 <__ultoa_invert+0x5c>
    1fae:	20 31       	cpi	r18, 0x10	; 16
    1fb0:	81 f1       	breq	.+96     	; 0x2012 <__ultoa_invert+0x6c>
    1fb2:	e8 94       	clt
    1fb4:	6f 93       	push	r22
    1fb6:	6e 7f       	andi	r22, 0xFE	; 254
    1fb8:	6e 5f       	subi	r22, 0xFE	; 254
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc0:	af 4f       	sbci	r26, 0xFF	; 255
    1fc2:	b1 e0       	ldi	r27, 0x01	; 1
    1fc4:	3e d0       	rcall	.+124    	; 0x2042 <__ultoa_invert+0x9c>
    1fc6:	b4 e0       	ldi	r27, 0x04	; 4
    1fc8:	3c d0       	rcall	.+120    	; 0x2042 <__ultoa_invert+0x9c>
    1fca:	67 0f       	add	r22, r23
    1fcc:	78 1f       	adc	r23, r24
    1fce:	89 1f       	adc	r24, r25
    1fd0:	9a 1f       	adc	r25, r26
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	68 0f       	add	r22, r24
    1fd6:	79 1f       	adc	r23, r25
    1fd8:	8a 1f       	adc	r24, r26
    1fda:	91 1d       	adc	r25, r1
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	6a 0f       	add	r22, r26
    1fe0:	71 1d       	adc	r23, r1
    1fe2:	81 1d       	adc	r24, r1
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	20 d0       	rcall	.+64     	; 0x202a <__ultoa_invert+0x84>
    1fea:	09 f4       	brne	.+2      	; 0x1fee <__ultoa_invert+0x48>
    1fec:	68 94       	set
    1fee:	3f 91       	pop	r19
    1ff0:	2a e0       	ldi	r18, 0x0A	; 10
    1ff2:	26 9f       	mul	r18, r22
    1ff4:	11 24       	eor	r1, r1
    1ff6:	30 19       	sub	r19, r0
    1ff8:	30 5d       	subi	r19, 0xD0	; 208
    1ffa:	31 93       	st	Z+, r19
    1ffc:	de f6       	brtc	.-74     	; 0x1fb4 <__ultoa_invert+0xe>
    1ffe:	cf 01       	movw	r24, r30
    2000:	08 95       	ret
    2002:	46 2f       	mov	r20, r22
    2004:	47 70       	andi	r20, 0x07	; 7
    2006:	40 5d       	subi	r20, 0xD0	; 208
    2008:	41 93       	st	Z+, r20
    200a:	b3 e0       	ldi	r27, 0x03	; 3
    200c:	0f d0       	rcall	.+30     	; 0x202c <__ultoa_invert+0x86>
    200e:	c9 f7       	brne	.-14     	; 0x2002 <__ultoa_invert+0x5c>
    2010:	f6 cf       	rjmp	.-20     	; 0x1ffe <__ultoa_invert+0x58>
    2012:	46 2f       	mov	r20, r22
    2014:	4f 70       	andi	r20, 0x0F	; 15
    2016:	40 5d       	subi	r20, 0xD0	; 208
    2018:	4a 33       	cpi	r20, 0x3A	; 58
    201a:	18 f0       	brcs	.+6      	; 0x2022 <__ultoa_invert+0x7c>
    201c:	49 5d       	subi	r20, 0xD9	; 217
    201e:	31 fd       	sbrc	r19, 1
    2020:	40 52       	subi	r20, 0x20	; 32
    2022:	41 93       	st	Z+, r20
    2024:	02 d0       	rcall	.+4      	; 0x202a <__ultoa_invert+0x84>
    2026:	a9 f7       	brne	.-22     	; 0x2012 <__ultoa_invert+0x6c>
    2028:	ea cf       	rjmp	.-44     	; 0x1ffe <__ultoa_invert+0x58>
    202a:	b4 e0       	ldi	r27, 0x04	; 4
    202c:	a6 95       	lsr	r26
    202e:	97 95       	ror	r25
    2030:	87 95       	ror	r24
    2032:	77 95       	ror	r23
    2034:	67 95       	ror	r22
    2036:	ba 95       	dec	r27
    2038:	c9 f7       	brne	.-14     	; 0x202c <__ultoa_invert+0x86>
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	61 05       	cpc	r22, r1
    203e:	71 05       	cpc	r23, r1
    2040:	08 95       	ret
    2042:	9b 01       	movw	r18, r22
    2044:	ac 01       	movw	r20, r24
    2046:	0a 2e       	mov	r0, r26
    2048:	06 94       	lsr	r0
    204a:	57 95       	ror	r21
    204c:	47 95       	ror	r20
    204e:	37 95       	ror	r19
    2050:	27 95       	ror	r18
    2052:	ba 95       	dec	r27
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__ultoa_invert+0xa2>
    2056:	62 0f       	add	r22, r18
    2058:	73 1f       	adc	r23, r19
    205a:	84 1f       	adc	r24, r20
    205c:	95 1f       	adc	r25, r21
    205e:	a0 1d       	adc	r26, r0
    2060:	08 95       	ret

00002062 <_exit>:
    2062:	f8 94       	cli

00002064 <__stop_program>:
    2064:	ff cf       	rjmp	.-2      	; 0x2064 <__stop_program>

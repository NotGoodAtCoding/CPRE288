
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001d58  00001dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080021e  0080021e  00001f0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ead  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d52  00000000  00000000  000050f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001882  00000000  00000000  00005e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000818  00000000  00000000  000076c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b17  00000000  00000000  00007ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f38  00000000  00000000  000089f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000a92f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_9>
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	78 c7       	rjmp	.+3824   	; 0xf1e <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 38       	cpi	r26, 0x82	; 130
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c9 d4       	rcall	.+2450   	; 0xa56 <main>
      c4:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      ca:	10 92 90 00 	sts	0x0090, r1
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	89 b9       	out	0x09, r24	; 9
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	8b b9       	out	0x0b, r24	; 11
      d6:	8e e0       	ldi	r24, 0x0E	; 14
      d8:	80 93 95 00 	sts	0x0095, r24
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	08 95       	ret

000000e2 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
      e2:	5d 9b       	sbis	0x0b, 5	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
      e6:	8c b9       	out	0x0c, r24	; 12
      e8:	08 95       	ret

000000ea <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	c1 55       	subi	r28, 0x51	; 81
      fc:	d1 09       	sbc	r29, r1
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     10a:	41 e5       	ldi	r20, 0x51	; 81
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e2       	ldi	r22, 0x20	; 32
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 c7 0b 	call	0x178e	; 0x178e <memset>
	sprintf(buf, "%s", data);
     11a:	b8 01       	movw	r22, r16
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <strcpy>
     124:	8e 01       	movw	r16, r28
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	7e 01       	movw	r14, r28
     12c:	82 e5       	ldi	r24, 0x52	; 82
     12e:	e8 0e       	add	r14, r24
     130:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     132:	f8 01       	movw	r30, r16
     134:	81 91       	ld	r24, Z+
     136:	8f 01       	movw	r16, r30
     138:	d4 df       	rcall	.-88     	; 0xe2 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     13a:	0e 15       	cp	r16, r14
     13c:	1f 05       	cpc	r17, r15
     13e:	c9 f7       	brne	.-14     	; 0x132 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     140:	cf 5a       	subi	r28, 0xAF	; 175
     142:	df 4f       	sbci	r29, 0xFF	; 255
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     15c:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     15e:	40 91 06 01 	lds	r20, 0x0106
     162:	50 91 07 01 	lds	r21, 0x0107
     166:	48 17       	cp	r20, r24
     168:	59 07       	cpc	r21, r25
     16a:	54 f0       	brlt	.+20     	; 0x180 <linearRegression+0x24>
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     174:	41 91       	ld	r20, Z+
     176:	51 91       	ld	r21, Z+
     178:	46 17       	cp	r20, r22
     17a:	57 07       	cpc	r21, r23
     17c:	5c f4       	brge	.+22     	; 0x194 <linearRegression+0x38>
     17e:	02 c0       	rjmp	.+4      	; 0x184 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     184:	f9 01       	movw	r30, r18
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 5f       	subi	r30, 0xFC	; 252
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	20 31       	cpi	r18, 0x10	; 16
     19a:	31 05       	cpc	r19, r1
     19c:	59 f7       	brne	.-42     	; 0x174 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1a6:	84 1b       	sub	r24, r20
     1a8:	95 0b       	sbc	r25, r21
     1aa:	64 1b       	sub	r22, r20
     1ac:	75 0b       	sbc	r23, r21
     1ae:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1b2:	c9 01       	movw	r24, r18
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	82 0f       	add	r24, r18
     1be:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1c0:	86 0f       	add	r24, r22
     1c2:	97 1f       	adc	r25, r23
     1c4:	08 95       	ret

000001c6 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	82 6c       	ori	r24, 0xC2	; 194
     1ca:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	87 6c       	ori	r24, 0xC7	; 199
     1d0:	86 b9       	out	0x06, r24	; 6
     1d2:	08 95       	ret

000001d4 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1da:	36 99       	sbic	0x06, 6	; 6
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <ADC_read+0x6>
	return linearRegression(ADC);
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	95 b1       	in	r25, 0x05	; 5
     1e2:	bc cf       	rjmp	.-136    	; 0x15c <linearRegression>
     1e4:	08 95       	ret

000001e6 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1e6:	de 9a       	sbi	0x1b, 6	; 27
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	25 d7       	rcall	.+3658   	; 0x1036 <wait_ms>
     1ec:	de 98       	cbi	0x1b, 6	; 27
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 7f       	andi	r24, 0xF0	; 240
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	08 95       	ret

000001f6 <lcd_command>:
     1f6:	cf 93       	push	r28
     1f8:	c8 2f       	mov	r28, r24
     1fa:	dc 98       	cbi	0x1b, 4	; 27
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	9c 2f       	mov	r25, r28
     200:	92 95       	swap	r25
     202:	9f 70       	andi	r25, 0x0F	; 15
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	ed df       	rcall	.-38     	; 0x1e6 <lcd_toggle_clear>
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	cf 70       	andi	r28, 0x0F	; 15
     210:	c8 2b       	or	r28, r24
     212:	cb bb       	out	0x1b, r28	; 27
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	e7 df       	rcall	.-50     	; 0x1e6 <lcd_toggle_clear>
     218:	dc 9a       	sbi	0x1b, 4	; 27
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <lcd_clear>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	ea df       	rcall	.-44     	; 0x1f6 <lcd_command>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	07 c7       	rjmp	.+3598   	; 0x1036 <wait_ms>
     228:	08 95       	ret

0000022a <lcd_home_line1>:
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	e4 cf       	rjmp	.-56     	; 0x1f6 <lcd_command>
     22e:	08 95       	ret

00000230 <lcd_init>:
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	8a bb       	out	0x1a, r24	; 26
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	8b bb       	out	0x1b, r24	; 27
     238:	de 9a       	sbi	0x1b, 6	; 27
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	fb d6       	rcall	.+3574   	; 0x1036 <wait_ms>
     240:	de 98       	cbi	0x1b, 6	; 27
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	f7 d6       	rcall	.+3566   	; 0x1036 <wait_ms>
     248:	de 9a       	sbi	0x1b, 6	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	f3 d6       	rcall	.+3558   	; 0x1036 <wait_ms>
     250:	de 98       	cbi	0x1b, 6	; 27
     252:	de 9a       	sbi	0x1b, 6	; 27
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	ee d6       	rcall	.+3548   	; 0x1036 <wait_ms>
     25a:	de 98       	cbi	0x1b, 6	; 27
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	8b bb       	out	0x1b, r24	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	c1 df       	rcall	.-126    	; 0x1e6 <lcd_toggle_clear>
     264:	8b b3       	in	r24, 0x1b	; 27
     266:	8b bb       	out	0x1b, r24	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	bd df       	rcall	.-134    	; 0x1e6 <lcd_toggle_clear>
     26c:	8b b3       	in	r24, 0x1b	; 27
     26e:	8e 60       	ori	r24, 0x0E	; 14
     270:	8b bb       	out	0x1b, r24	; 27
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	b8 df       	rcall	.-144    	; 0x1e6 <lcd_toggle_clear>
     276:	8b b3       	in	r24, 0x1b	; 27
     278:	8b bb       	out	0x1b, r24	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	b4 df       	rcall	.-152    	; 0x1e6 <lcd_toggle_clear>
     27e:	8b b3       	in	r24, 0x1b	; 27
     280:	86 60       	ori	r24, 0x06	; 6
     282:	8b bb       	out	0x1b, r24	; 27
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	af df       	rcall	.-162    	; 0x1e6 <lcd_toggle_clear>
     288:	8b b3       	in	r24, 0x1b	; 27
     28a:	8b bb       	out	0x1b, r24	; 27
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	ab df       	rcall	.-170    	; 0x1e6 <lcd_toggle_clear>
     290:	d8 9a       	sbi	0x1b, 0	; 27
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	a8 df       	rcall	.-176    	; 0x1e6 <lcd_toggle_clear>
     296:	dc 9a       	sbi	0x1b, 4	; 27
     298:	c8 cf       	rjmp	.-112    	; 0x22a <lcd_home_line1>
     29a:	08 95       	ret

0000029c <lcd_home_line2>:
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	ab cf       	rjmp	.-170    	; 0x1f6 <lcd_command>
     2a0:	08 95       	ret

000002a2 <lcd_home_line3>:
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	a8 cf       	rjmp	.-176    	; 0x1f6 <lcd_command>
     2a6:	08 95       	ret

000002a8 <lcd_home_line4>:
     2a8:	84 ed       	ldi	r24, 0xD4	; 212
     2aa:	a5 cf       	rjmp	.-182    	; 0x1f6 <lcd_command>
     2ac:	08 95       	ret

000002ae <lcd_putc>:
     2ae:	cf 93       	push	r28
     2b0:	c8 2f       	mov	r28, r24
     2b2:	8b b3       	in	r24, 0x1b	; 27
     2b4:	9c 2f       	mov	r25, r28
     2b6:	92 95       	swap	r25
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	89 2b       	or	r24, r25
     2bc:	8b bb       	out	0x1b, r24	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	92 df       	rcall	.-220    	; 0x1e6 <lcd_toggle_clear>
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	cf 70       	andi	r28, 0x0F	; 15
     2c6:	c8 2b       	or	r28, r24
     2c8:	cb bb       	out	0x1b, r28	; 27
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	8c df       	rcall	.-232    	; 0x1e6 <lcd_toggle_clear>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	c1 55       	subi	r28, 0x51	; 81
     2e8:	d1 09       	sbc	r29, r1
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	fe 01       	movw	r30, r28
     2f6:	e4 5a       	subi	r30, 0xA4	; 164
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	41 91       	ld	r20, Z+
     2fc:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2fe:	9f 01       	movw	r18, r30
     300:	61 e5       	ldi	r22, 0x51	; 81
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 de 0b 	call	0x17bc	; 0x17bc <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     30c:	be 01       	movw	r22, r28
     30e:	6f 5f       	subi	r22, 0xFF	; 255
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8e e1       	ldi	r24, 0x1E	; 30
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 ce 0b 	call	0x179c	; 0x179c <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f4       	brne	.+2      	; 0x320 <lprintf+0x4e>
     31e:	43 c0       	rjmp	.+134    	; 0x3a6 <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     320:	be 01       	movw	r22, r28
     322:	6f 5f       	subi	r22, 0xFF	; 255
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	8e e1       	ldi	r24, 0x1E	; 30
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <strcpy>
	lcd_clear();
     32e:	77 df       	rcall	.-274    	; 0x21e <lcd_clear>
     330:	9e 01       	movw	r18, r28
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     33c:	0f 2e       	mov	r0, r31
     33e:	f4 e1       	ldi	r31, 0x14	; 20
     340:	ef 2e       	mov	r14, r31
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     346:	27 c0       	rjmp	.+78     	; 0x396 <lprintf+0xc4>
		if (*str == '\n') {
     348:	8a 30       	cpi	r24, 0x0A	; 10
     34a:	51 f4       	brne	.+20     	; 0x360 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     34c:	c8 01       	movw	r24, r16
     34e:	b7 01       	movw	r22, r14
     350:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divmodhi4>
     354:	f7 01       	movw	r30, r14
     356:	e8 1b       	sub	r30, r24
     358:	f9 0b       	sbc	r31, r25
     35a:	0e 0f       	add	r16, r30
     35c:	1f 1f       	adc	r17, r31
     35e:	03 c0       	rjmp	.+6      	; 0x366 <lprintf+0x94>
		} else {
			lcd_putc(*str);
     360:	a6 df       	rcall	.-180    	; 0x2ae <lcd_putc>
			charnum++;
     362:	0f 5f       	subi	r16, 0xFF	; 255
     364:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divmodhi4>
     36e:	89 2b       	or	r24, r25
     370:	91 f4       	brne	.+36     	; 0x396 <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divmodhi4>
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	71 05       	cpc	r23, r1
     37e:	41 f0       	breq	.+16     	; 0x390 <lprintf+0xbe>
     380:	63 30       	cpi	r22, 0x03	; 3
     382:	71 05       	cpc	r23, r1
     384:	39 f0       	breq	.+14     	; 0x394 <lprintf+0xc2>
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	71 05       	cpc	r23, r1
     38a:	29 f4       	brne	.+10     	; 0x396 <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     38c:	87 df       	rcall	.-242    	; 0x29c <lcd_home_line2>
				break;
     38e:	03 c0       	rjmp	.+6      	; 0x396 <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     390:	88 df       	rcall	.-240    	; 0x2a2 <lcd_home_line3>
				break;
     392:	01 c0       	rjmp	.+2      	; 0x396 <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     394:	89 df       	rcall	.-238    	; 0x2a8 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     396:	f6 01       	movw	r30, r12
     398:	81 91       	ld	r24, Z+
     39a:	6f 01       	movw	r12, r30
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <lprintf+0xd4>
     3a0:	00 35       	cpi	r16, 0x50	; 80
     3a2:	11 05       	cpc	r17, r1
     3a4:	8c f2       	brlt	.-94     	; 0x348 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3a6:	cf 5a       	subi	r28, 0xAF	; 175
     3a8:	df 4f       	sbci	r29, 0xFF	; 255
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	08 95       	ret

000003c6 <init>:
void calibrateServo(){
	move_servo(0);
	wait_ms(750);
	move_servo(90);
	wait_ms(750);
	move_servo(180);
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	32 df       	rcall	.-412    	; 0x230 <lcd_init>
     3cc:	7e de       	rcall	.-772    	; 0xca <serial_init>
     3ce:	78 94       	sei
     3d0:	fa de       	rcall	.-524    	; 0x1c6 <ADC_init>
     3d2:	f0 d5       	rcall	.+3040   	; 0xfb4 <timer1_init>
     3d4:	73 d5       	rcall	.+2790   	; 0xebc <timer3_init>
     3d6:	07 d4       	rcall	.+2062   	; 0xbe6 <oi_alloc>
     3d8:	ec 01       	movw	r28, r24
     3da:	44 d5       	rcall	.+2696   	; 0xe64 <oi_init>
     3dc:	8e e4       	ldi	r24, 0x4E	; 78
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	84 de       	rcall	.-760    	; 0xea <serial_puts>
     3e2:	ce 01       	movw	r24, r28
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <determineBoundryType>:
     3ea:	9c 01       	movw	r18, r24
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	31 09       	sbc	r19, r1
     3f0:	23 36       	cpi	r18, 0x63	; 99
     3f2:	31 05       	cpc	r19, r1
     3f4:	70 f0       	brcs	.+28     	; 0x412 <determineBoundryType+0x28>
     3f6:	85 36       	cpi	r24, 0x65	; 101
     3f8:	91 05       	cpc	r25, r1
     3fa:	74 f0       	brlt	.+28     	; 0x418 <determineBoundryType+0x2e>
     3fc:	66 0f       	add	r22, r22
     3fe:	77 1f       	adc	r23, r23
     400:	31 e0       	ldi	r19, 0x01	; 1
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	86 17       	cp	r24, r22
     406:	97 07       	cpc	r25, r23
     408:	0c f4       	brge	.+2      	; 0x40c <determineBoundryType+0x22>
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	83 2f       	mov	r24, r19
     40e:	92 2f       	mov	r25, r18
     410:	08 95       	ret
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret

0000041e <winProcedure>:
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	a6 97       	sbiw	r28, 0x26	; 38
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	7c 01       	movw	r14, r24
     43c:	08 e0       	ldi	r16, 0x08	; 8
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	97 01       	movw	r18, r14
     442:	42 e3       	ldi	r20, 0x32	; 50
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	64 ef       	ldi	r22, 0xF4	; 244
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	84 ef       	ldi	r24, 0xF4	; 244
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	81 d3       	rcall	.+1794   	; 0xb52 <move>
     450:	97 01       	movw	r18, r14
     452:	42 e3       	ldi	r20, 0x32	; 50
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	6c e0       	ldi	r22, 0x0C	; 12
     458:	7e ef       	ldi	r23, 0xFE	; 254
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	9e ef       	ldi	r25, 0xFE	; 254
     45e:	79 d3       	rcall	.+1778   	; 0xb52 <move>
     460:	01 50       	subi	r16, 0x01	; 1
     462:	11 09       	sbc	r17, r1
     464:	01 15       	cp	r16, r1
     466:	11 05       	cpc	r17, r1
     468:	59 f7       	brne	.-42     	; 0x440 <winProcedure+0x22>
     46a:	83 e1       	ldi	r24, 0x13	; 19
     46c:	e8 e2       	ldi	r30, 0x28	; 40
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	de 01       	movw	r26, r28
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	8a 95       	dec	r24
     47a:	e1 f7       	brne	.-8      	; 0x474 <winProcedure+0x56>
     47c:	83 e1       	ldi	r24, 0x13	; 19
     47e:	eb e3       	ldi	r30, 0x3B	; 59
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	de 01       	movw	r26, r28
     484:	54 96       	adiw	r26, 0x14	; 20
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <winProcedure+0x68>
     48e:	9e 01       	movw	r18, r28
     490:	2c 5e       	subi	r18, 0xEC	; 236
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	ae 01       	movw	r20, r28
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	63 e1       	ldi	r22, 0x13	; 19
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	e4 d3       	rcall	.+1992   	; 0xc6c <oi_load_song>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	12 d4       	rcall	.+2084   	; 0xcce <oi_play_song>
     4aa:	b7 01       	movw	r22, r14
     4ac:	88 ee       	ldi	r24, 0xE8	; 232
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	e7 d2       	rcall	.+1486   	; 0xa80 <turn>
     4b2:	a6 96       	adiw	r28, 0x26	; 38
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <setBaseLightSensors>:
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4da:	90 93 76 02 	sts	0x0276, r25
     4de:	80 93 75 02 	sts	0x0275, r24
     4e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4e6:	90 93 74 02 	sts	0x0274, r25
     4ea:	80 93 73 02 	sts	0x0273, r24
     4ee:	88 a1       	ldd	r24, Y+32	; 0x20
     4f0:	99 a1       	ldd	r25, Y+33	; 0x21
     4f2:	90 93 72 02 	sts	0x0272, r25
     4f6:	80 93 71 02 	sts	0x0271, r24
     4fa:	8a a1       	ldd	r24, Y+34	; 0x22
     4fc:	9b a1       	ldd	r25, Y+35	; 0x23
     4fe:	90 93 70 02 	sts	0x0270, r25
     502:	80 93 6f 02 	sts	0x026F, r24
     506:	0b e5       	ldi	r16, 0x5B	; 91
     508:	11 e0       	ldi	r17, 0x01	; 1
     50a:	2d c0       	rjmp	.+90     	; 0x566 <setBaseLightSensors+0x9a>
     50c:	ce 01       	movw	r24, r28
     50e:	ef d3       	rcall	.+2014   	; 0xcee <oi_update>
     510:	8c 8d       	ldd	r24, Y+28	; 0x1c
     512:	9d 8d       	ldd	r25, Y+29	; 0x1d
     514:	80 93 75 02 	sts	0x0275, r24
     518:	90 93 76 02 	sts	0x0276, r25
     51c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     51e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     520:	20 93 73 02 	sts	0x0273, r18
     524:	30 93 74 02 	sts	0x0274, r19
     528:	48 a1       	ldd	r20, Y+32	; 0x20
     52a:	59 a1       	ldd	r21, Y+33	; 0x21
     52c:	40 93 71 02 	sts	0x0271, r20
     530:	50 93 72 02 	sts	0x0272, r21
     534:	6a a1       	ldd	r22, Y+34	; 0x22
     536:	7b a1       	ldd	r23, Y+35	; 0x23
     538:	60 93 6f 02 	sts	0x026F, r22
     53c:	70 93 70 02 	sts	0x0270, r23
     540:	7f 93       	push	r23
     542:	6f 93       	push	r22
     544:	5f 93       	push	r21
     546:	4f 93       	push	r20
     548:	3f 93       	push	r19
     54a:	2f 93       	push	r18
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	be de       	rcall	.-644    	; 0x2d2 <lprintf>
     556:	8d b7       	in	r24, 0x3d	; 61
     558:	9e b7       	in	r25, 0x3e	; 62
     55a:	0a 96       	adiw	r24, 0x0a	; 10
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	9e bf       	out	0x3e, r25	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	8d bf       	out	0x3d, r24	; 61
     566:	80 91 75 02 	lds	r24, 0x0275
     56a:	90 91 76 02 	lds	r25, 0x0276
     56e:	89 2b       	or	r24, r25
     570:	69 f2       	breq	.-102    	; 0x50c <setBaseLightSensors+0x40>
     572:	80 91 73 02 	lds	r24, 0x0273
     576:	90 91 74 02 	lds	r25, 0x0274
     57a:	89 2b       	or	r24, r25
     57c:	39 f2       	breq	.-114    	; 0x50c <setBaseLightSensors+0x40>
     57e:	80 91 71 02 	lds	r24, 0x0271
     582:	90 91 72 02 	lds	r25, 0x0272
     586:	89 2b       	or	r24, r25
     588:	09 f4       	brne	.+2      	; 0x58c <setBaseLightSensors+0xc0>
     58a:	c0 cf       	rjmp	.-128    	; 0x50c <setBaseLightSensors+0x40>
     58c:	80 91 6f 02 	lds	r24, 0x026F
     590:	90 91 70 02 	lds	r25, 0x0270
     594:	89 2b       	or	r24, r25
     596:	09 f4       	brne	.+2      	; 0x59a <setBaseLightSensors+0xce>
     598:	b9 cf       	rjmp	.-142    	; 0x50c <setBaseLightSensors+0x40>
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <print>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	d8 2f       	mov	r29, r24
     5aa:	c9 2f       	mov	r28, r25
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	90 de       	rcall	.-736    	; 0x2d2 <lprintf>
     5b2:	8d 2f       	mov	r24, r29
     5b4:	9c 2f       	mov	r25, r28
     5b6:	99 dd       	rcall	.-1230   	; 0xea <serial_puts>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <rapidForwardScan>:
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <rapidForwardScan+0x22>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <rapidForwardScan+0x24>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	88 e2       	ldi	r24, 0x28	; 40
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	7c d4       	rcall	.+2296   	; 0xee8 <move_servo>
     5f0:	8a ef       	ldi	r24, 0xFA	; 250
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	20 d5       	rcall	.+2624   	; 0x1036 <wait_ms>
     5f6:	0f 2e       	mov	r0, r31
     5f8:	41 2c       	mov	r4, r1
     5fa:	51 2c       	mov	r5, r1
     5fc:	f8 ec       	ldi	r31, 0xC8	; 200
     5fe:	6f 2e       	mov	r6, r31
     600:	f2 e4       	ldi	r31, 0x42	; 66
     602:	7f 2e       	mov	r7, r31
     604:	f0 2d       	mov	r31, r0
     606:	53 01       	movw	r10, r6
     608:	42 01       	movw	r8, r4
     60a:	0f 2e       	mov	r0, r31
     60c:	c1 2c       	mov	r12, r1
     60e:	d1 2c       	mov	r13, r1
     610:	f0 e2       	ldi	r31, 0x20	; 32
     612:	ef 2e       	mov	r14, r31
     614:	f2 e4       	ldi	r31, 0x42	; 66
     616:	ff 2e       	mov	r15, r31
     618:	f0 2d       	mov	r31, r0
     61a:	c7 01       	movw	r24, r14
     61c:	b6 01       	movw	r22, r12
     61e:	0e d6       	rcall	.+3100   	; 0x123c <__fixunssfsi>
     620:	cb 01       	movw	r24, r22
     622:	62 d4       	rcall	.+2244   	; 0xee8 <move_servo>
     624:	e1 d4       	rcall	.+2498   	; 0xfe8 <ping_read>
     626:	69 83       	std	Y+1, r22	; 0x01
     628:	7a 83       	std	Y+2, r23	; 0x02
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	9c 83       	std	Y+4, r25	; 0x04
     62e:	23 ec       	ldi	r18, 0xC3	; 195
     630:	35 ef       	ldi	r19, 0xF5	; 245
     632:	48 e2       	ldi	r20, 0x28	; 40
     634:	5f e3       	ldi	r21, 0x3F	; 63
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	de d6       	rcall	.+3516   	; 0x13f8 <__mulsf3>
     63c:	4b 01       	movw	r8, r22
     63e:	5c 01       	movw	r10, r24
     640:	23 ec       	ldi	r18, 0xC3	; 195
     642:	35 ef       	ldi	r19, 0xF5	; 245
     644:	48 ea       	ldi	r20, 0xA8	; 168
     646:	5e e3       	ldi	r21, 0x3E	; 62
     648:	69 81       	ldd	r22, Y+1	; 0x01
     64a:	7a 81       	ldd	r23, Y+2	; 0x02
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	9c 81       	ldd	r25, Y+4	; 0x04
     650:	d3 d6       	rcall	.+3494   	; 0x13f8 <__mulsf3>
     652:	a5 01       	movw	r20, r10
     654:	94 01       	movw	r18, r8
     656:	1d d5       	rcall	.+2618   	; 0x1092 <__addsf3>
     658:	4b 01       	movw	r8, r22
     65a:	5c 01       	movw	r10, r24
     65c:	bb dd       	rcall	.-1162   	; 0x1d4 <ADC_read>
     65e:	7e dd       	rcall	.-1284   	; 0x15c <linearRegression>
     660:	8c 01       	movw	r16, r24
     662:	23 ec       	ldi	r18, 0xC3	; 195
     664:	35 ef       	ldi	r19, 0xF5	; 245
     666:	48 e2       	ldi	r20, 0x28	; 40
     668:	5f e3       	ldi	r21, 0x3F	; 63
     66a:	c3 01       	movw	r24, r6
     66c:	b2 01       	movw	r22, r4
     66e:	c4 d6       	rcall	.+3464   	; 0x13f8 <__mulsf3>
     670:	2b 01       	movw	r4, r22
     672:	3c 01       	movw	r6, r24
     674:	b8 01       	movw	r22, r16
     676:	88 27       	eor	r24, r24
     678:	77 fd       	sbrc	r23, 7
     67a:	80 95       	com	r24
     67c:	98 2f       	mov	r25, r24
     67e:	0c d6       	rcall	.+3096   	; 0x1298 <__floatsisf>
     680:	23 ec       	ldi	r18, 0xC3	; 195
     682:	35 ef       	ldi	r19, 0xF5	; 245
     684:	48 ea       	ldi	r20, 0xA8	; 168
     686:	5e e3       	ldi	r21, 0x3E	; 62
     688:	b7 d6       	rcall	.+3438   	; 0x13f8 <__mulsf3>
     68a:	a3 01       	movw	r20, r6
     68c:	92 01       	movw	r18, r4
     68e:	01 d5       	rcall	.+2562   	; 0x1092 <__addsf3>
     690:	2b 01       	movw	r4, r22
     692:	3c 01       	movw	r6, r24
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	48 ec       	ldi	r20, 0xC8	; 200
     69a:	51 e4       	ldi	r21, 0x41	; 65
     69c:	c5 01       	movw	r24, r10
     69e:	b4 01       	movw	r22, r8
     6a0:	5c d5       	rcall	.+2744   	; 0x115a <__cmpsf2>
     6a2:	88 23       	and	r24, r24
     6a4:	4c f0       	brlt	.+18     	; 0x6b8 <rapidForwardScan+0xf6>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	48 ec       	ldi	r20, 0xC8	; 200
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	53 d5       	rcall	.+2726   	; 0x115a <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	44 f4       	brge	.+16     	; 0x6c8 <rapidForwardScan+0x106>
     6b8:	87 e6       	ldi	r24, 0x67	; 103
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	73 df       	rcall	.-282    	; 0x5a4 <print>
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	b7 d5       	rcall	.+2926   	; 0x1232 <__fixsfsi>
     6c4:	cb 01       	movw	r24, r22
     6c6:	13 c0       	rjmp	.+38     	; 0x6ee <rapidForwardScan+0x12c>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e4       	ldi	r21, 0x40	; 64
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	de d4       	rcall	.+2492   	; 0x1092 <__addsf3>
     6d6:	6b 01       	movw	r12, r22
     6d8:	7c 01       	movw	r14, r24
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	4c e0       	ldi	r20, 0x0C	; 12
     6e0:	53 e4       	ldi	r21, 0x43	; 67
     6e2:	3b d5       	rcall	.+2678   	; 0x115a <__cmpsf2>
     6e4:	18 16       	cp	r1, r24
     6e6:	0c f0       	brlt	.+2      	; 0x6ea <rapidForwardScan+0x128>
     6e8:	98 cf       	rjmp	.-208    	; 0x61a <rapidForwardScan+0x58>
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	9f 90       	pop	r9
     70c:	8f 90       	pop	r8
     70e:	7f 90       	pop	r7
     710:	6f 90       	pop	r6
     712:	5f 90       	pop	r5
     714:	4f 90       	pop	r4
     716:	08 95       	ret

00000718 <detectColoredBoundry>:
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	ec 01       	movw	r28, r24
     72a:	60 91 75 02 	lds	r22, 0x0275
     72e:	70 91 76 02 	lds	r23, 0x0276
     732:	8c 8d       	ldd	r24, Y+28	; 0x1c
     734:	9d 8d       	ldd	r25, Y+29	; 0x1d
     736:	59 de       	rcall	.-846    	; 0x3ea <determineBoundryType>
     738:	8c 01       	movw	r16, r24
     73a:	60 91 73 02 	lds	r22, 0x0273
     73e:	70 91 74 02 	lds	r23, 0x0274
     742:	8e 8d       	ldd	r24, Y+30	; 0x1e
     744:	9f 8d       	ldd	r25, Y+31	; 0x1f
     746:	51 de       	rcall	.-862    	; 0x3ea <determineBoundryType>
     748:	6c 01       	movw	r12, r24
     74a:	60 91 71 02 	lds	r22, 0x0271
     74e:	70 91 72 02 	lds	r23, 0x0272
     752:	88 a1       	ldd	r24, Y+32	; 0x20
     754:	99 a1       	ldd	r25, Y+33	; 0x21
     756:	49 de       	rcall	.-878    	; 0x3ea <determineBoundryType>
     758:	7c 01       	movw	r14, r24
     75a:	60 91 6f 02 	lds	r22, 0x026F
     75e:	70 91 70 02 	lds	r23, 0x0270
     762:	8a a1       	ldd	r24, Y+34	; 0x22
     764:	9b a1       	ldd	r25, Y+35	; 0x23
     766:	41 de       	rcall	.-894    	; 0x3ea <determineBoundryType>
     768:	01 30       	cpi	r16, 0x01	; 1
     76a:	11 05       	cpc	r17, r1
     76c:	81 f1       	breq	.+96     	; 0x7ce <detectColoredBoundry+0xb6>
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	e2 16       	cp	r14, r18
     772:	f1 04       	cpc	r15, r1
     774:	09 f4       	brne	.+2      	; 0x778 <detectColoredBoundry+0x60>
     776:	3d c0       	rjmp	.+122    	; 0x7f2 <detectColoredBoundry+0xda>
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	c2 16       	cp	r12, r18
     77c:	d1 04       	cpc	r13, r1
     77e:	09 f4       	brne	.+2      	; 0x782 <detectColoredBoundry+0x6a>
     780:	41 c0       	rjmp	.+130    	; 0x804 <detectColoredBoundry+0xec>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	91 05       	cpc	r25, r1
     786:	59 f4       	brne	.+22     	; 0x79e <detectColoredBoundry+0x86>
     788:	46 c0       	rjmp	.+140    	; 0x816 <detectColoredBoundry+0xfe>
     78a:	8a e7       	ldi	r24, 0x7A	; 122
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	0a df       	rcall	.-492    	; 0x5a4 <print>
     790:	be 01       	movw	r22, r28
     792:	84 e6       	ldi	r24, 0x64	; 100
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	74 d1       	rcall	.+744    	; 0xa80 <turn>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	4d c0       	rjmp	.+154    	; 0x838 <detectColoredBoundry+0x120>
     79e:	02 30       	cpi	r16, 0x02	; 2
     7a0:	11 05       	cpc	r17, r1
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <detectColoredBoundry+0xa0>
     7a4:	22 e0       	ldi	r18, 0x02	; 2
     7a6:	e2 16       	cp	r14, r18
     7a8:	f1 04       	cpc	r15, r1
     7aa:	31 f0       	breq	.+12     	; 0x7b8 <detectColoredBoundry+0xa0>
     7ac:	22 e0       	ldi	r18, 0x02	; 2
     7ae:	c2 16       	cp	r12, r18
     7b0:	d1 04       	cpc	r13, r1
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <detectColoredBoundry+0xa0>
     7b4:	02 97       	sbiw	r24, 0x02	; 2
     7b6:	41 f4       	brne	.+16     	; 0x7c8 <detectColoredBoundry+0xb0>
     7b8:	84 e9       	ldi	r24, 0x94	; 148
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	f3 de       	rcall	.-538    	; 0x5a4 <print>
     7be:	ce 01       	movw	r24, r28
     7c0:	2e de       	rcall	.-932    	; 0x41e <winProcedure>
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	38 c0       	rjmp	.+112    	; 0x838 <detectColoredBoundry+0x120>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	35 c0       	rjmp	.+106    	; 0x838 <detectColoredBoundry+0x120>
     7ce:	9e 01       	movw	r18, r28
     7d0:	42 e3       	ldi	r20, 0x32	; 50
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	6c e9       	ldi	r22, 0x9C	; 156
     7d6:	7f ef       	ldi	r23, 0xFF	; 255
     7d8:	8c e9       	ldi	r24, 0x9C	; 156
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	ba d1       	rcall	.+884    	; 0xb52 <move>
     7de:	85 ea       	ldi	r24, 0xA5	; 165
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	e0 de       	rcall	.-576    	; 0x5a4 <print>
     7e4:	be 01       	movw	r22, r28
     7e6:	8e ec       	ldi	r24, 0xCE	; 206
     7e8:	9f ef       	ldi	r25, 0xFF	; 255
     7ea:	4a d1       	rcall	.+660    	; 0xa80 <turn>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	23 c0       	rjmp	.+70     	; 0x838 <detectColoredBoundry+0x120>
     7f2:	9e 01       	movw	r18, r28
     7f4:	42 e3       	ldi	r20, 0x32	; 50
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	6c e9       	ldi	r22, 0x9C	; 156
     7fa:	7f ef       	ldi	r23, 0xFF	; 255
     7fc:	8c e9       	ldi	r24, 0x9C	; 156
     7fe:	9f ef       	ldi	r25, 0xFF	; 255
     800:	a8 d1       	rcall	.+848    	; 0xb52 <move>
     802:	c3 cf       	rjmp	.-122    	; 0x78a <detectColoredBoundry+0x72>
     804:	9e 01       	movw	r18, r28
     806:	42 e3       	ldi	r20, 0x32	; 50
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	6c e9       	ldi	r22, 0x9C	; 156
     80c:	7f ef       	ldi	r23, 0xFF	; 255
     80e:	8c e9       	ldi	r24, 0x9C	; 156
     810:	9f ef       	ldi	r25, 0xFF	; 255
     812:	9f d1       	rcall	.+830    	; 0xb52 <move>
     814:	ba cf       	rjmp	.-140    	; 0x78a <detectColoredBoundry+0x72>
     816:	9e 01       	movw	r18, r28
     818:	42 e3       	ldi	r20, 0x32	; 50
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	6c e9       	ldi	r22, 0x9C	; 156
     81e:	7f ef       	ldi	r23, 0xFF	; 255
     820:	8c e9       	ldi	r24, 0x9C	; 156
     822:	9f ef       	ldi	r25, 0xFF	; 255
     824:	96 d1       	rcall	.+812    	; 0xb52 <move>
     826:	8c eb       	ldi	r24, 0xBC	; 188
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	bc de       	rcall	.-648    	; 0x5a4 <print>
     82c:	be 01       	movw	r22, r28
     82e:	82 e3       	ldi	r24, 0x32	; 50
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	26 d1       	rcall	.+588    	; 0xa80 <turn>
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	08 95       	ret

0000084a <detectCrater>:
     84a:	ef 92       	push	r14
     84c:	ff 92       	push	r15
     84e:	0f 93       	push	r16
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ec 01       	movw	r28, r24
     858:	7e 8d       	ldd	r23, Y+30	; 0x1e
     85a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     85c:	58 a1       	ldd	r21, Y+32	; 0x20
     85e:	49 a1       	ldd	r20, Y+33	; 0x21
     860:	2a a1       	ldd	r18, Y+34	; 0x22
     862:	3b a1       	ldd	r19, Y+35	; 0x23
     864:	8c 8d       	ldd	r24, Y+28	; 0x1c
     866:	9d 8d       	ldd	r25, Y+29	; 0x1d
     868:	89 2b       	or	r24, r25
     86a:	21 f1       	breq	.+72     	; 0x8b4 <detectCrater+0x6a>
     86c:	e7 2e       	mov	r14, r23
     86e:	f6 2e       	mov	r15, r22
     870:	05 2f       	mov	r16, r21
     872:	14 2f       	mov	r17, r20
     874:	23 2b       	or	r18, r19
     876:	81 f1       	breq	.+96     	; 0x8d8 <detectCrater+0x8e>
     878:	01 2b       	or	r16, r17
     87a:	09 f4       	brne	.+2      	; 0x87e <detectCrater+0x34>
     87c:	41 c0       	rjmp	.+130    	; 0x900 <detectCrater+0xb6>
     87e:	ef 28       	or	r14, r15
     880:	b1 f1       	breq	.+108    	; 0x8ee <detectCrater+0xa4>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	45 c0       	rjmp	.+138    	; 0x912 <detectCrater+0xc8>
     888:	01 2b       	or	r16, r17
     88a:	51 f4       	brne	.+20     	; 0x8a0 <detectCrater+0x56>
     88c:	84 ed       	ldi	r24, 0xD4	; 212
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	89 de       	rcall	.-750    	; 0x5a4 <print>
     892:	be 01       	movw	r22, r28
     894:	8a e5       	ldi	r24, 0x5A	; 90
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	f3 d0       	rcall	.+486    	; 0xa80 <turn>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	39 c0       	rjmp	.+114    	; 0x912 <detectCrater+0xc8>
     8a0:	89 ee       	ldi	r24, 0xE9	; 233
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	7f de       	rcall	.-770    	; 0x5a4 <print>
     8a6:	be 01       	movw	r22, r28
     8a8:	82 e3       	ldi	r24, 0x32	; 50
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	e9 d0       	rcall	.+466    	; 0xa80 <turn>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2f c0       	rjmp	.+94     	; 0x912 <detectCrater+0xc8>
     8b4:	9e 01       	movw	r18, r28
     8b6:	42 e3       	ldi	r20, 0x32	; 50
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	6c e9       	ldi	r22, 0x9C	; 156
     8bc:	7f ef       	ldi	r23, 0xFF	; 255
     8be:	8c e9       	ldi	r24, 0x9C	; 156
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
     8c2:	47 d1       	rcall	.+654    	; 0xb52 <move>
     8c4:	8e ef       	ldi	r24, 0xFE	; 254
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	6d de       	rcall	.-806    	; 0x5a4 <print>
     8ca:	be 01       	movw	r22, r28
     8cc:	8e ec       	ldi	r24, 0xCE	; 206
     8ce:	9f ef       	ldi	r25, 0xFF	; 255
     8d0:	d7 d0       	rcall	.+430    	; 0xa80 <turn>
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	1d c0       	rjmp	.+58     	; 0x912 <detectCrater+0xc8>
     8d8:	9e 01       	movw	r18, r28
     8da:	42 e3       	ldi	r20, 0x32	; 50
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	6c e9       	ldi	r22, 0x9C	; 156
     8e0:	7f ef       	ldi	r23, 0xFF	; 255
     8e2:	8c e9       	ldi	r24, 0x9C	; 156
     8e4:	9f ef       	ldi	r25, 0xFF	; 255
     8e6:	35 d1       	rcall	.+618    	; 0xb52 <move>
     8e8:	ef 28       	or	r14, r15
     8ea:	71 f6       	brne	.-100    	; 0x888 <detectCrater+0x3e>
     8ec:	cf cf       	rjmp	.-98     	; 0x88c <detectCrater+0x42>
     8ee:	9e 01       	movw	r18, r28
     8f0:	42 e3       	ldi	r20, 0x32	; 50
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	6c e9       	ldi	r22, 0x9C	; 156
     8f6:	7f ef       	ldi	r23, 0xFF	; 255
     8f8:	8c e9       	ldi	r24, 0x9C	; 156
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	2a d1       	rcall	.+596    	; 0xb52 <move>
     8fe:	c6 cf       	rjmp	.-116    	; 0x88c <detectCrater+0x42>
     900:	9e 01       	movw	r18, r28
     902:	42 e3       	ldi	r20, 0x32	; 50
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	6c e9       	ldi	r22, 0x9C	; 156
     908:	7f ef       	ldi	r23, 0xFF	; 255
     90a:	8c e9       	ldi	r24, 0x9C	; 156
     90c:	9f ef       	ldi	r25, 0xFF	; 255
     90e:	21 d1       	rcall	.+578    	; 0xb52 <move>
     910:	bd cf       	rjmp	.-134    	; 0x88c <detectCrater+0x42>
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	ff 90       	pop	r15
     91c:	ef 90       	pop	r14
     91e:	08 95       	ret

00000920 <moveCautiously>:
     920:	6f 92       	push	r6
     922:	7f 92       	push	r7
     924:	8f 92       	push	r8
     926:	9f 92       	push	r9
     928:	af 92       	push	r10
     92a:	bf 92       	push	r11
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	4c 01       	movw	r8, r24
     93e:	5b 01       	movw	r10, r22
     940:	18 16       	cp	r1, r24
     942:	19 06       	cpc	r1, r25
     944:	0c f0       	brlt	.+2      	; 0x948 <moveCautiously+0x28>
     946:	6d c0       	rjmp	.+218    	; 0xa22 <moveCautiously+0x102>
     948:	ee 24       	eor	r14, r14
     94a:	ea 94       	dec	r14
     94c:	fe 2c       	mov	r15, r14
     94e:	0f ef       	ldi	r16, 0xFF	; 255
     950:	1f ef       	ldi	r17, 0xFF	; 255
     952:	cf ef       	ldi	r28, 0xFF	; 255
     954:	df ef       	ldi	r29, 0xFF	; 255
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	61 2c       	mov	r6, r1
     95c:	71 2c       	mov	r7, r1
     95e:	c5 36       	cpi	r28, 0x65	; 101
     960:	d1 05       	cpc	r29, r1
     962:	24 f4       	brge	.+8      	; 0x96c <moveCautiously+0x4c>
     964:	cf 3f       	cpi	r28, 0xFF	; 255
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	d2 07       	cpc	r29, r18
     96a:	41 f5       	brne	.+80     	; 0x9bc <moveCautiously+0x9c>
     96c:	2a de       	rcall	.-940    	; 0x5c2 <rapidForwardScan>
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	19 f1       	breq	.+70     	; 0x9b8 <moveCautiously+0x98>
     972:	8a 35       	cpi	r24, 0x5A	; 90
     974:	91 05       	cpc	r25, r1
     976:	1c f4       	brge	.+6      	; 0x97e <moveCautiously+0x5e>
     978:	e1 e0       	ldi	r30, 0x01	; 1
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <moveCautiously+0x62>
     97e:	ef ef       	ldi	r30, 0xFF	; 255
     980:	ff ef       	ldi	r31, 0xFF	; 255
     982:	4a e5       	ldi	r20, 0x5A	; 90
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	48 1b       	sub	r20, r24
     988:	59 0b       	sbc	r21, r25
     98a:	9a 01       	movw	r18, r20
     98c:	22 f4       	brpl	.+8      	; 0x996 <moveCautiously+0x76>
     98e:	22 27       	eor	r18, r18
     990:	33 27       	eor	r19, r19
     992:	24 1b       	sub	r18, r20
     994:	35 0b       	sbc	r19, r21
     996:	8c e3       	ldi	r24, 0x3C	; 60
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	82 1b       	sub	r24, r18
     99c:	93 0b       	sbc	r25, r19
     99e:	b5 01       	movw	r22, r10
     9a0:	9c 01       	movw	r18, r24
     9a2:	e2 9f       	mul	r30, r18
     9a4:	c0 01       	movw	r24, r0
     9a6:	e3 9f       	mul	r30, r19
     9a8:	90 0d       	add	r25, r0
     9aa:	f2 9f       	mul	r31, r18
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	67 d0       	rcall	.+206    	; 0xa80 <turn>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	40 c0       	rjmp	.+128    	; 0xa38 <moveCautiously+0x118>
     9b8:	c6 2d       	mov	r28, r6
     9ba:	d7 2d       	mov	r29, r7
     9bc:	0b 30       	cpi	r16, 0x0B	; 11
     9be:	11 05       	cpc	r17, r1
     9c0:	24 f4       	brge	.+8      	; 0x9ca <moveCautiously+0xaa>
     9c2:	0f 3f       	cpi	r16, 0xFF	; 255
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	12 07       	cpc	r17, r18
     9c8:	31 f4       	brne	.+12     	; 0x9d6 <moveCautiously+0xb6>
     9ca:	c5 01       	movw	r24, r10
     9cc:	a5 de       	rcall	.-694    	; 0x718 <detectColoredBoundry>
     9ce:	02 97       	sbiw	r24, 0x02	; 2
     9d0:	59 f1       	breq	.+86     	; 0xa28 <moveCautiously+0x108>
     9d2:	06 2d       	mov	r16, r6
     9d4:	17 2d       	mov	r17, r7
     9d6:	36 e0       	ldi	r19, 0x06	; 6
     9d8:	e3 16       	cp	r14, r19
     9da:	f1 04       	cpc	r15, r1
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <moveCautiously+0xc6>
     9de:	8f ef       	ldi	r24, 0xFF	; 255
     9e0:	e8 16       	cp	r14, r24
     9e2:	f8 06       	cpc	r15, r24
     9e4:	31 f4       	brne	.+12     	; 0x9f2 <moveCautiously+0xd2>
     9e6:	c5 01       	movw	r24, r10
     9e8:	30 df       	rcall	.-416    	; 0x84a <detectCrater>
     9ea:	89 2b       	or	r24, r25
     9ec:	01 f5       	brne	.+64     	; 0xa2e <moveCautiously+0x10e>
     9ee:	e6 2c       	mov	r14, r6
     9f0:	f7 2c       	mov	r15, r7
     9f2:	95 01       	movw	r18, r10
     9f4:	45 e0       	ldi	r20, 0x05	; 5
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	6d e7       	ldi	r22, 0x7D	; 125
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	8d e7       	ldi	r24, 0x7D	; 125
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a8 d0       	rcall	.+336    	; 0xb52 <move>
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	b9 f4       	brne	.+46     	; 0xa34 <moveCautiously+0x114>
     a06:	25 e0       	ldi	r18, 0x05	; 5
     a08:	c2 0e       	add	r12, r18
     a0a:	d1 1c       	adc	r13, r1
     a0c:	25 96       	adiw	r28, 0x05	; 5
     a0e:	0b 5f       	subi	r16, 0xFB	; 251
     a10:	1f 4f       	sbci	r17, 0xFF	; 255
     a12:	35 e0       	ldi	r19, 0x05	; 5
     a14:	e3 0e       	add	r14, r19
     a16:	f1 1c       	adc	r15, r1
     a18:	c8 14       	cp	r12, r8
     a1a:	d9 04       	cpc	r13, r9
     a1c:	0c f4       	brge	.+2      	; 0xa20 <moveCautiously+0x100>
     a1e:	9f cf       	rjmp	.-194    	; 0x95e <moveCautiously+0x3e>
     a20:	0b c0       	rjmp	.+22     	; 0xa38 <moveCautiously+0x118>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	08 c0       	rjmp	.+16     	; 0xa38 <moveCautiously+0x118>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <moveCautiously+0x118>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <moveCautiously+0x118>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	9f 90       	pop	r9
     a4e:	8f 90       	pop	r8
     a50:	7f 90       	pop	r7
     a52:	6f 90       	pop	r6
     a54:	08 95       	ret

00000a56 <main>:
}

int main(void)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
	oi_t * sensor_data = init();
     a5a:	b5 dc       	rcall	.-1686   	; 0x3c6 <init>
     a5c:	ec 01       	movw	r28, r24
	
	setBaseLightSensors(sensor_data);
     a5e:	36 dd       	rcall	.-1428   	; 0x4cc <setBaseLightSensors>
	
	//calibrateServo();
	
	while (1) {
		if ( moveCautiously(400, sensor_data) ) {
     a60:	be 01       	movw	r22, r28
     a62:	80 e9       	ldi	r24, 0x90	; 144
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	5c df       	rcall	.-328    	; 0x920 <moveCautiously>
     a68:	89 2b       	or	r24, r25
     a6a:	19 f4       	brne	.+6      	; 0xa72 <main+0x1c>
		}
		
		//Color sensor calibration
		//detectColoredBoundry(sensor_data);
		
		oi_update(sensor_data);
     a6c:	ce 01       	movw	r24, r28
     a6e:	3f d1       	rcall	.+638    	; 0xcee <oi_update>
	} 
     a70:	f7 cf       	rjmp	.-18     	; 0xa60 <main+0xa>
	
	oi_free(sensor_data);
     a72:	ce 01       	movw	r24, r28
     a74:	be d0       	rcall	.+380    	; 0xbf2 <oi_free>

	return 0;
}
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <turn>:
	
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     a80:	ef 92       	push	r14
     a82:	ff 92       	push	r15
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	int magnitude = turnDegrees > 0 ? 1 : -1;
     a90:	18 16       	cp	r1, r24
     a92:	19 06       	cpc	r1, r25
     a94:	1c f4       	brge	.+6      	; 0xa9c <turn+0x1c>
     a96:	21 e0       	ldi	r18, 0x01	; 1
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <turn+0x20>
     a9c:	2f ef       	ldi	r18, 0xFF	; 255
     a9e:	3f ef       	ldi	r19, 0xFF	; 255
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
     aa0:	4c e9       	ldi	r20, 0x9C	; 156
     aa2:	42 03       	mulsu	r20, r18
     aa4:	b0 01       	movw	r22, r0
     aa6:	43 9f       	mul	r20, r19
     aa8:	70 0d       	add	r23, r0
     aaa:	11 24       	eor	r1, r1
     aac:	84 e6       	ldi	r24, 0x64	; 100
     aae:	48 2f       	mov	r20, r24
     ab0:	42 9f       	mul	r20, r18
     ab2:	c0 01       	movw	r24, r0
     ab4:	43 9f       	mul	r20, r19
     ab6:	90 0d       	add	r25, r0
     ab8:	11 24       	eor	r1, r1
     aba:	c1 d0       	rcall	.+386    	; 0xc3e <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     abc:	7e 01       	movw	r14, r28
     abe:	dd 23       	and	r29, r29
     ac0:	24 f4       	brge	.+8      	; 0xaca <turn+0x4a>
     ac2:	ee 24       	eor	r14, r14
     ac4:	ff 24       	eor	r15, r15
     ac6:	ec 1a       	sub	r14, r28
     ac8:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     aca:	1e 14       	cp	r1, r14
     acc:	1f 04       	cpc	r1, r15
     ace:	a4 f4       	brge	.+40     	; 0xaf8 <turn+0x78>
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     ad0:	c0 e0       	ldi	r28, 0x00	; 0
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     ad4:	88 e2       	ldi	r24, 0x28	; 40
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	ae d2       	rcall	.+1372   	; 0x1036 <wait_ms>
		oi_update(sensor_data);
     ada:	c8 01       	movw	r24, r16
     adc:	08 d1       	rcall	.+528    	; 0xcee <oi_update>
		currentDegrees += abs(sensor_data->angle);
     ade:	f8 01       	movw	r30, r16
     ae0:	26 85       	ldd	r18, Z+14	; 0x0e
     ae2:	37 85       	ldd	r19, Z+15	; 0x0f
     ae4:	33 23       	and	r19, r19
     ae6:	1c f4       	brge	.+6      	; 0xaee <turn+0x6e>
     ae8:	31 95       	neg	r19
     aea:	21 95       	neg	r18
     aec:	31 09       	sbc	r19, r1
     aee:	c2 0f       	add	r28, r18
     af0:	d3 1f       	adc	r29, r19
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     af2:	ce 15       	cp	r28, r14
     af4:	df 05       	cpc	r29, r15
     af6:	74 f3       	brlt	.-36     	; 0xad4 <turn+0x54>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9e d0       	rcall	.+316    	; 0xc3e <oi_set_wheels>
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	08 95       	ret

00000b10 <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     b16:	88 81       	ld	r24, Y
     b18:	98 2f       	mov	r25, r24
     b1a:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     b1c:	81 fd       	sbrc	r24, 1
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <detectCollision+0x14>
     b20:	99 23       	and	r25, r25
     b22:	91 f0       	breq	.+36     	; 0xb48 <detectCollision+0x38>
		print("Collision!");
     b24:	82 e1       	ldi	r24, 0x12	; 18
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	3d dd       	rcall	.-1414   	; 0x5a4 <print>
		move(-100, -100, 50, sensor_data);
     b2a:	9e 01       	movw	r18, r28
     b2c:	42 e3       	ldi	r20, 0x32	; 50
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	6c e9       	ldi	r22, 0x9C	; 156
     b32:	7f ef       	ldi	r23, 0xFF	; 255
     b34:	8c e9       	ldi	r24, 0x9C	; 156
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	0c d0       	rcall	.+24     	; 0xb52 <move>
		turn(60, sensor_data);
     b3a:	be 01       	movw	r22, r28
     b3c:	8c e3       	ldi	r24, 0x3C	; 60
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	9f df       	rcall	.-194    	; 0xa80 <turn>
		return 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <detectCollision+0x3c>
	} else {
		return 0;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <move>:
#include "lcd.h"
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
     b52:	af 92       	push	r10
     b54:	bf 92       	push	r11
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	7c 01       	movw	r14, r24
     b68:	5b 01       	movw	r10, r22
     b6a:	ea 01       	movw	r28, r20
     b6c:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
     b6e:	08 97       	sbiw	r24, 0x08	; 8
     b70:	66 d0       	rcall	.+204    	; 0xc3e <oi_set_wheels>
	
	distance = abs(distance);
     b72:	6e 01       	movw	r12, r28
     b74:	dd 23       	and	r29, r29
     b76:	24 f4       	brge	.+8      	; 0xb80 <move+0x2e>
     b78:	cc 24       	eor	r12, r12
     b7a:	dd 24       	eor	r13, r13
     b7c:	cc 1a       	sub	r12, r28
     b7e:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     b80:	1c 14       	cp	r1, r12
     b82:	1d 04       	cpc	r1, r13
     b84:	dc f4       	brge	.+54     	; 0xbbc <move+0x6a>
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     b86:	c0 e0       	ldi	r28, 0x00	; 0
     b88:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     b8a:	c8 01       	movw	r24, r16
     b8c:	b0 d0       	rcall	.+352    	; 0xcee <oi_update>

		if ( right > 0 && left > 0 ) {
     b8e:	1e 14       	cp	r1, r14
     b90:	1f 04       	cpc	r1, r15
     b92:	3c f4       	brge	.+14     	; 0xba2 <move+0x50>
     b94:	1a 14       	cp	r1, r10
     b96:	1b 04       	cpc	r1, r11
     b98:	24 f4       	brge	.+8      	; 0xba2 <move+0x50>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     b9a:	c8 01       	movw	r24, r16
     b9c:	b9 df       	rcall	.-142    	; 0xb10 <detectCollision>
     b9e:	89 2b       	or	r24, r25
     ba0:	a9 f4       	brne	.+42     	; 0xbcc <move+0x7a>
				return 1;
			}
		}

		sum += abs(sensor_data->distance);
     ba2:	f8 01       	movw	r30, r16
     ba4:	44 85       	ldd	r20, Z+12	; 0x0c
     ba6:	55 85       	ldd	r21, Z+13	; 0x0d
     ba8:	55 23       	and	r21, r21
     baa:	1c f4       	brge	.+6      	; 0xbb2 <move+0x60>
     bac:	51 95       	neg	r21
     bae:	41 95       	neg	r20
     bb0:	51 09       	sbc	r21, r1
     bb2:	c4 0f       	add	r28, r20
     bb4:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     bb6:	cc 15       	cp	r28, r12
     bb8:	dd 05       	cpc	r29, r13
     bba:	3c f3       	brlt	.-50     	; 0xb8a <move+0x38>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	3c d0       	rcall	.+120    	; 0xc3e <oi_set_wheels>
	
	return 0;
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <move+0x7e>
		oi_update(sensor_data);

		if ( right > 0 && left > 0 ) {
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
				return 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	oi_set_wheels(0,0);
	
	return 0;
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	08 95       	ret

00000be6 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     be6:	64 e3       	ldi	r22, 0x34	; 52
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	8e c4       	rjmp	.+2332   	; 0x150c <calloc>
     bf0:	08 95       	ret

00000bf2 <oi_free>:
     bf2:	3e c5       	rjmp	.+2684   	; 0x1670 <free>
     bf4:	08 95       	ret

00000bf6 <oi_byte_tx>:
     bf6:	eb e9       	ldi	r30, 0x9B	; 155
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	90 81       	ld	r25, Z
     bfc:	95 ff       	sbrs	r25, 5
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <oi_byte_tx+0x4>
     c00:	80 93 9c 00 	sts	0x009C, r24
     c04:	08 95       	ret

00000c06 <oi_set_leds>:
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	08 2f       	mov	r16, r24
     c10:	16 2f       	mov	r17, r22
     c12:	d4 2f       	mov	r29, r20
     c14:	c2 2f       	mov	r28, r18
     c16:	8b e8       	ldi	r24, 0x8B	; 139
     c18:	ee df       	rcall	.-36     	; 0xbf6 <oi_byte_tx>
     c1a:	11 23       	and	r17, r17
     c1c:	29 f0       	breq	.+10     	; 0xc28 <oi_set_leds+0x22>
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	01 11       	cpse	r16, r1
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <oi_set_leds+0x24>
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <oi_set_leds+0x24>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	e5 df       	rcall	.-54     	; 0xbf6 <oi_byte_tx>
     c2c:	8d 2f       	mov	r24, r29
     c2e:	e3 df       	rcall	.-58     	; 0xbf6 <oi_byte_tx>
     c30:	8c 2f       	mov	r24, r28
     c32:	e1 df       	rcall	.-62     	; 0xbf6 <oi_byte_tx>
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <oi_set_wheels>:
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	18 2f       	mov	r17, r24
     c48:	09 2f       	mov	r16, r25
     c4a:	c6 2f       	mov	r28, r22
     c4c:	d7 2f       	mov	r29, r23
     c4e:	81 e9       	ldi	r24, 0x91	; 145
     c50:	d2 df       	rcall	.-92     	; 0xbf6 <oi_byte_tx>
     c52:	80 2f       	mov	r24, r16
     c54:	d0 df       	rcall	.-96     	; 0xbf6 <oi_byte_tx>
     c56:	81 2f       	mov	r24, r17
     c58:	ce df       	rcall	.-100    	; 0xbf6 <oi_byte_tx>
     c5a:	8d 2f       	mov	r24, r29
     c5c:	cc df       	rcall	.-104    	; 0xbf6 <oi_byte_tx>
     c5e:	8c 2f       	mov	r24, r28
     c60:	ca df       	rcall	.-108    	; 0xbf6 <oi_byte_tx>
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <oi_load_song>:
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	c8 2f       	mov	r28, r24
     c82:	7b 01       	movw	r14, r22
     c84:	6a 01       	movw	r12, r20
     c86:	a2 2e       	mov	r10, r18
     c88:	b3 2e       	mov	r11, r19
     c8a:	8c e8       	ldi	r24, 0x8C	; 140
     c8c:	b4 df       	rcall	.-152    	; 0xbf6 <oi_byte_tx>
     c8e:	8c 2f       	mov	r24, r28
     c90:	b2 df       	rcall	.-156    	; 0xbf6 <oi_byte_tx>
     c92:	8e 2d       	mov	r24, r14
     c94:	b0 df       	rcall	.-160    	; 0xbf6 <oi_byte_tx>
     c96:	1e 14       	cp	r1, r14
     c98:	1f 04       	cpc	r1, r15
     c9a:	74 f4       	brge	.+28     	; 0xcb8 <oi_load_song+0x4c>
     c9c:	e6 01       	movw	r28, r12
     c9e:	0a 2d       	mov	r16, r10
     ca0:	1b 2d       	mov	r17, r11
     ca2:	ec 0c       	add	r14, r12
     ca4:	fd 1c       	adc	r15, r13
     ca6:	89 91       	ld	r24, Y+
     ca8:	a6 df       	rcall	.-180    	; 0xbf6 <oi_byte_tx>
     caa:	f8 01       	movw	r30, r16
     cac:	81 91       	ld	r24, Z+
     cae:	8f 01       	movw	r16, r30
     cb0:	a2 df       	rcall	.-188    	; 0xbf6 <oi_byte_tx>
     cb2:	ce 15       	cp	r28, r14
     cb4:	df 05       	cpc	r29, r15
     cb6:	b9 f7       	brne	.-18     	; 0xca6 <oi_load_song+0x3a>
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	08 95       	ret

00000cce <oi_play_song>:
     cce:	cf 93       	push	r28
     cd0:	c8 2f       	mov	r28, r24
     cd2:	8d e8       	ldi	r24, 0x8D	; 141
     cd4:	90 df       	rcall	.-224    	; 0xbf6 <oi_byte_tx>
     cd6:	8c 2f       	mov	r24, r28
     cd8:	8e df       	rcall	.-228    	; 0xbf6 <oi_byte_tx>
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     cde:	eb e9       	ldi	r30, 0x9B	; 155
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	88 23       	and	r24, r24
     ce6:	ec f7       	brge	.-6      	; 0xce2 <oi_byte_rx+0x4>

	return UDR1;
     ce8:	80 91 9c 00 	lds	r24, 0x009C
     cec:	08 95       	ret

00000cee <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     cfc:	80 91 9b 00 	lds	r24, 0x009B
     d00:	88 23       	and	r24, r24
     d02:	44 f4       	brge	.+16     	; 0xd14 <oi_update+0x26>
		i = UDR1;
     d04:	ac e9       	ldi	r26, 0x9C	; 156
     d06:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     d08:	eb e9       	ldi	r30, 0x9B	; 155
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     d0c:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     d0e:	80 81       	ld	r24, Z
     d10:	88 23       	and	r24, r24
     d12:	e4 f3       	brlt	.-8      	; 0xd0c <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     d14:	8e e8       	ldi	r24, 0x8E	; 142
     d16:	6f df       	rcall	.-290    	; 0xbf6 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     d18:	86 e0       	ldi	r24, 0x06	; 6
     d1a:	6d df       	rcall	.-294    	; 0xbf6 <oi_byte_tx>
     d1c:	e7 01       	movw	r28, r14
     d1e:	87 01       	movw	r16, r14
     d20:	0c 5c       	subi	r16, 0xCC	; 204
     d22:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     d24:	dc df       	rcall	.-72     	; 0xcde <oi_byte_rx>
     d26:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     d28:	c0 17       	cp	r28, r16
     d2a:	d1 07       	cpc	r29, r17
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     d2e:	f7 01       	movw	r30, r14
     d30:	84 85       	ldd	r24, Z+12	; 0x0c
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	98 2f       	mov	r25, r24
     d36:	88 27       	eor	r24, r24
     d38:	25 85       	ldd	r18, Z+13	; 0x0d
     d3a:	82 0f       	add	r24, r18
     d3c:	91 1d       	adc	r25, r1
     d3e:	95 87       	std	Z+13, r25	; 0x0d
     d40:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     d42:	86 85       	ldd	r24, Z+14	; 0x0e
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	98 2f       	mov	r25, r24
     d48:	88 27       	eor	r24, r24
     d4a:	27 85       	ldd	r18, Z+15	; 0x0f
     d4c:	82 0f       	add	r24, r18
     d4e:	91 1d       	adc	r25, r1
     d50:	97 87       	std	Z+15, r25	; 0x0f
     d52:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     d54:	81 89       	ldd	r24, Z+17	; 0x11
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	98 2f       	mov	r25, r24
     d5a:	88 27       	eor	r24, r24
     d5c:	22 89       	ldd	r18, Z+18	; 0x12
     d5e:	82 0f       	add	r24, r18
     d60:	91 1d       	adc	r25, r1
     d62:	92 8b       	std	Z+18, r25	; 0x12
     d64:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     d66:	83 89       	ldd	r24, Z+19	; 0x13
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	98 2f       	mov	r25, r24
     d6c:	88 27       	eor	r24, r24
     d6e:	24 89       	ldd	r18, Z+20	; 0x14
     d70:	82 0f       	add	r24, r18
     d72:	91 1d       	adc	r25, r1
     d74:	94 8b       	std	Z+20, r25	; 0x14
     d76:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     d78:	86 89       	ldd	r24, Z+22	; 0x16
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	98 2f       	mov	r25, r24
     d7e:	88 27       	eor	r24, r24
     d80:	27 89       	ldd	r18, Z+23	; 0x17
     d82:	82 0f       	add	r24, r18
     d84:	91 1d       	adc	r25, r1
     d86:	97 8b       	std	Z+23, r25	; 0x17
     d88:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     d8a:	80 8d       	ldd	r24, Z+24	; 0x18
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	98 2f       	mov	r25, r24
     d90:	88 27       	eor	r24, r24
     d92:	21 8d       	ldd	r18, Z+25	; 0x19
     d94:	82 0f       	add	r24, r18
     d96:	91 1d       	adc	r25, r1
     d98:	91 8f       	std	Z+25, r25	; 0x19
     d9a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     d9c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	98 2f       	mov	r25, r24
     da2:	88 27       	eor	r24, r24
     da4:	23 8d       	ldd	r18, Z+27	; 0x1b
     da6:	82 0f       	add	r24, r18
     da8:	91 1d       	adc	r25, r1
     daa:	93 8f       	std	Z+27, r25	; 0x1b
     dac:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     dae:	84 8d       	ldd	r24, Z+28	; 0x1c
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	98 2f       	mov	r25, r24
     db4:	88 27       	eor	r24, r24
     db6:	25 8d       	ldd	r18, Z+29	; 0x1d
     db8:	82 0f       	add	r24, r18
     dba:	91 1d       	adc	r25, r1
     dbc:	95 8f       	std	Z+29, r25	; 0x1d
     dbe:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     dc0:	86 8d       	ldd	r24, Z+30	; 0x1e
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	98 2f       	mov	r25, r24
     dc6:	88 27       	eor	r24, r24
     dc8:	27 8d       	ldd	r18, Z+31	; 0x1f
     dca:	82 0f       	add	r24, r18
     dcc:	91 1d       	adc	r25, r1
     dce:	97 8f       	std	Z+31, r25	; 0x1f
     dd0:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     dd2:	80 a1       	ldd	r24, Z+32	; 0x20
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	98 2f       	mov	r25, r24
     dd8:	88 27       	eor	r24, r24
     dda:	21 a1       	ldd	r18, Z+33	; 0x21
     ddc:	82 0f       	add	r24, r18
     dde:	91 1d       	adc	r25, r1
     de0:	91 a3       	std	Z+33, r25	; 0x21
     de2:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     de4:	82 a1       	ldd	r24, Z+34	; 0x22
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	98 2f       	mov	r25, r24
     dea:	88 27       	eor	r24, r24
     dec:	23 a1       	ldd	r18, Z+35	; 0x23
     dee:	82 0f       	add	r24, r18
     df0:	91 1d       	adc	r25, r1
     df2:	93 a3       	std	Z+35, r25	; 0x23
     df4:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     df6:	82 a5       	ldd	r24, Z+42	; 0x2a
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	21 a5       	ldd	r18, Z+41	; 0x29
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	32 2f       	mov	r19, r18
     e00:	22 27       	eor	r18, r18
     e02:	28 0f       	add	r18, r24
     e04:	39 1f       	adc	r19, r25
     e06:	36 a3       	std	Z+38, r19	; 0x26
     e08:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     e0a:	20 a9       	ldd	r18, Z+48	; 0x30
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	32 2f       	mov	r19, r18
     e10:	22 27       	eor	r18, r18
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	95 a7       	std	Z+45, r25	; 0x2d
     e18:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     e1a:	82 a9       	ldd	r24, Z+50	; 0x32
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	98 2f       	mov	r25, r24
     e20:	88 27       	eor	r24, r24
     e22:	23 a9       	ldd	r18, Z+51	; 0x33
     e24:	82 0f       	add	r24, r18
     e26:	91 1d       	adc	r25, r1
     e28:	97 a7       	std	Z+47, r25	; 0x2f
     e2a:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     e2c:	84 a9       	ldd	r24, Z+52	; 0x34
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	98 2f       	mov	r25, r24
     e32:	88 27       	eor	r24, r24
     e34:	25 a9       	ldd	r18, Z+53	; 0x35
     e36:	82 0f       	add	r24, r18
     e38:	91 1d       	adc	r25, r1
     e3a:	91 ab       	std	Z+49, r25	; 0x31
     e3c:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     e3e:	86 a9       	ldd	r24, Z+54	; 0x36
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	98 2f       	mov	r25, r24
     e44:	88 27       	eor	r24, r24
     e46:	27 a9       	ldd	r18, Z+55	; 0x37
     e48:	82 0f       	add	r24, r18
     e4a:	91 1d       	adc	r25, r1
     e4c:	93 ab       	std	Z+51, r25	; 0x33
     e4e:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     e50:	83 e2       	ldi	r24, 0x23	; 35
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	f0 d0       	rcall	.+480    	; 0x1036 <wait_ms>
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	08 95       	ret

00000e64 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     e6e:	09 e9       	ldi	r16, 0x99	; 153
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	80 e1       	ldi	r24, 0x10	; 16
     e74:	f8 01       	movw	r30, r16
     e76:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     e78:	88 e1       	ldi	r24, 0x18	; 24
     e7a:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     e7e:	86 e0       	ldi	r24, 0x06	; 6
     e80:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     e84:	80 e8       	ldi	r24, 0x80	; 128
     e86:	b7 de       	rcall	.-658    	; 0xbf6 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     e88:	81 e8       	ldi	r24, 0x81	; 129
     e8a:	b5 de       	rcall	.-662    	; 0xbf6 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     e8c:	88 e0       	ldi	r24, 0x08	; 8
     e8e:	b3 de       	rcall	.-666    	; 0xbf6 <oi_byte_tx>
	wait_ms(100);
     e90:	84 e6       	ldi	r24, 0x64	; 100
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	d0 d0       	rcall	.+416    	; 0x1036 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     e96:	81 e2       	ldi	r24, 0x21	; 33
     e98:	f8 01       	movw	r30, r16
     e9a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     e9c:	84 e8       	ldi	r24, 0x84	; 132
     e9e:	ab de       	rcall	.-682    	; 0xbf6 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	47 e0       	ldi	r20, 0x07	; 7
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	ae de       	rcall	.-676    	; 0xc06 <oi_set_leds>
	
	oi_update(self);
     eaa:	ce 01       	movw	r24, r28
     eac:	20 df       	rcall	.-448    	; 0xcee <oi_update>
	oi_update(self); // call twice to clear distance/angle
     eae:	ce 01       	movw	r24, r28
     eb0:	1e df       	rcall	.-452    	; 0xcee <oi_update>
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <timer3_init>:
#define DEGREE_MULTIPLIER 19.2
#define DEGREE_OFFSET 800

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     ebc:	83 e2       	ldi	r24, 0x23	; 35
     ebe:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     ec2:	8a e1       	ldi	r24, 0x1A	; 26
     ec4:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     ec8:	88 ef       	ldi	r24, 0xF8	; 248
     eca:	97 ea       	ldi	r25, 0xA7	; 167
     ecc:	90 93 87 00 	sts	0x0087, r25
     ed0:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     ed4:	80 91 26 01 	lds	r24, 0x0126
     ed8:	90 91 27 01 	lds	r25, 0x0127
     edc:	90 93 85 00 	sts	0x0085, r25
     ee0:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     ee4:	14 9a       	sbi	0x02, 4	; 2
     ee6:	08 95       	ret

00000ee8 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     ee8:	bc 01       	movw	r22, r24
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	d2 d1       	rcall	.+932    	; 0x1294 <__floatunsisf>
     ef0:	2a e9       	ldi	r18, 0x9A	; 154
     ef2:	39 e9       	ldi	r19, 0x99	; 153
     ef4:	49 e9       	ldi	r20, 0x99	; 153
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	7f d2       	rcall	.+1278   	; 0x13f8 <__mulsf3>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 e4       	ldi	r20, 0x48	; 72
     f00:	54 e4       	ldi	r21, 0x44	; 68
     f02:	c7 d0       	rcall	.+398    	; 0x1092 <__addsf3>
     f04:	9b d1       	rcall	.+822    	; 0x123c <__fixunssfsi>
     f06:	70 93 27 01 	sts	0x0127, r23
     f0a:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
     f0e:	70 93 85 00 	sts	0x0085, r23
     f12:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     f16:	8e e1       	ldi	r24, 0x1E	; 30
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	8d c0       	rjmp	.+282    	; 0x1036 <wait_ms>
     f1c:	08 95       	ret

00000f1e <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     f2c:	80 91 7b 02 	lds	r24, 0x027B
     f30:	81 11       	cpse	r24, r1
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <__vector_11+0x30>
		rising_time = ICR1;
     f34:	86 b5       	in	r24, 0x26	; 38
     f36:	97 b5       	in	r25, 0x27	; 39
     f38:	90 93 7a 02 	sts	0x027A, r25
     f3c:	80 93 79 02 	sts	0x0279, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     f40:	8e b5       	in	r24, 0x2e	; 46
     f42:	8f 7b       	andi	r24, 0xBF	; 191
     f44:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 7b 02 	sts	0x027B, r24
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <__vector_11+0x4a>
		} else if ( state == FALLING) {
     f4e:	80 91 7b 02 	lds	r24, 0x027B
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	49 f4       	brne	.+18     	; 0xf68 <__vector_11+0x4a>
		falling_time = ICR1;
     f56:	86 b5       	in	r24, 0x26	; 38
     f58:	97 b5       	in	r25, 0x27	; 39
     f5a:	90 93 78 02 	sts	0x0278, r25
     f5e:	80 93 77 02 	sts	0x0277, r24
		state = DONE;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	80 93 7b 02 	sts	0x027B, r24
	}
}
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     f76:	60 91 77 02 	lds	r22, 0x0277
     f7a:	70 91 78 02 	lds	r23, 0x0278
     f7e:	80 91 79 02 	lds	r24, 0x0279
     f82:	90 91 7a 02 	lds	r25, 0x027A
     f86:	68 1b       	sub	r22, r24
     f88:	79 0b       	sbc	r23, r25
     f8a:	76 95       	lsr	r23
     f8c:	67 95       	ror	r22
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 d1       	rcall	.+768    	; 0x1294 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	34 e2       	ldi	r19, 0x24	; 36
     f98:	44 e7       	ldi	r20, 0x74	; 116
     f9a:	56 e4       	ldi	r21, 0x46	; 70
     f9c:	e2 d0       	rcall	.+452    	; 0x1162 <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4a ea       	ldi	r20, 0xAA	; 170
     fa4:	53 e4       	ldi	r21, 0x43	; 67
     fa6:	28 d2       	rcall	.+1104   	; 0x13f8 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	48 ec       	ldi	r20, 0xC8	; 200
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	23 c2       	rjmp	.+1094   	; 0x13f8 <__mulsf3>
	return timeDifference;
}
     fb2:	08 95       	ret

00000fb4 <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     fb4:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     fb6:	ea e7       	ldi	r30, 0x7A	; 122
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     fbe:	86 b7       	in	r24, 0x36	; 54
     fc0:	80 62       	ori	r24, 0x20	; 32
     fc2:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     fc4:	87 b7       	in	r24, 0x37	; 55
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     fca:	85 ec       	ldi	r24, 0xC5	; 197
     fcc:	8e bd       	out	0x2e, r24	; 46
     fce:	08 95       	ret

00000fd0 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     fd0:	87 b7       	in	r24, 0x37	; 55
     fd2:	8b 7d       	andi	r24, 0xDB	; 219
     fd4:	87 bf       	out	0x37, r24	; 55
     fd6:	08 95       	ret

00000fd8 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     fd8:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     fda:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	2a d0       	rcall	.+84     	; 0x1036 <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     fe2:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     fe4:	8c 98       	cbi	0x11, 4	; 17
     fe6:	08 95       	ret

00000fe8 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     fe8:	10 92 7b 02 	sts	0x027B, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     fec:	f1 df       	rcall	.-30     	; 0xfd0 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     fee:	f4 df       	rcall	.-24     	; 0xfd8 <send_pulse>
	
	//Enable interrupt
	timer1_init();
     ff0:	e1 df       	rcall	.-62     	; 0xfb4 <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     ff2:	80 91 7b 02 	lds	r24, 0x027B
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     ffa:	bd cf       	rjmp	.-134    	; 0xf76 <time_to_dist>
     ffc:	08 95       	ret

00000ffe <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     ffe:	10 92 7d 02 	sts	0x027D, r1
    1002:	10 92 7c 02 	sts	0x027C, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    1006:	81 11       	cpse	r24, r1
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    100a:	8b e0       	ldi	r24, 0x0B	; 11
    100c:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    100e:	87 b7       	in	r24, 0x37	; 55
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	87 bf       	out	0x37, r24	; 55
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	29 f4       	brne	.+10     	; 0x1024 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    101a:	89 e0       	ldi	r24, 0x09	; 9
    101c:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    101e:	87 b7       	in	r24, 0x37	; 55
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    1024:	78 94       	sei
    1026:	08 95       	ret

00001028 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    1028:	87 b7       	in	r24, 0x37	; 55
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    102e:	85 b5       	in	r24, 0x25	; 37
    1030:	8f 77       	andi	r24, 0x7F	; 127
    1032:	85 bd       	out	0x25, r24	; 37
    1034:	08 95       	ret

00001036 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    103c:	8a ef       	ldi	r24, 0xFA	; 250
    103e:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1040:	10 92 7d 02 	sts	0x027D, r1
    1044:	10 92 7c 02 	sts	0x027C, r1
	timer2_start(0);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	d9 df       	rcall	.-78     	; 0xffe <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    104c:	20 91 7c 02 	lds	r18, 0x027C
    1050:	30 91 7d 02 	lds	r19, 0x027D
    1054:	2c 17       	cp	r18, r28
    1056:	3d 07       	cpc	r19, r29
    1058:	c8 f3       	brcs	.-14     	; 0x104c <wait_ms+0x16>

	timer2_stop();
    105a:	e6 df       	rcall	.-52     	; 0x1028 <timer2_stop>
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
	timer2_tick++;
    1070:	80 91 7c 02 	lds	r24, 0x027C
    1074:	90 91 7d 02 	lds	r25, 0x027D
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	90 93 7d 02 	sts	0x027D, r25
    107e:	80 93 7c 02 	sts	0x027C, r24
}
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <__subsf3>:
    1090:	50 58       	subi	r21, 0x80	; 128

00001092 <__addsf3>:
    1092:	bb 27       	eor	r27, r27
    1094:	aa 27       	eor	r26, r26
    1096:	0e d0       	rcall	.+28     	; 0x10b4 <__addsf3x>
    1098:	75 c1       	rjmp	.+746    	; 0x1384 <__fp_round>
    109a:	66 d1       	rcall	.+716    	; 0x1368 <__fp_pscA>
    109c:	30 f0       	brcs	.+12     	; 0x10aa <__addsf3+0x18>
    109e:	6b d1       	rcall	.+726    	; 0x1376 <__fp_pscB>
    10a0:	20 f0       	brcs	.+8      	; 0x10aa <__addsf3+0x18>
    10a2:	31 f4       	brne	.+12     	; 0x10b0 <__addsf3+0x1e>
    10a4:	9f 3f       	cpi	r25, 0xFF	; 255
    10a6:	11 f4       	brne	.+4      	; 0x10ac <__addsf3+0x1a>
    10a8:	1e f4       	brtc	.+6      	; 0x10b0 <__addsf3+0x1e>
    10aa:	5b c1       	rjmp	.+694    	; 0x1362 <__fp_nan>
    10ac:	0e f4       	brtc	.+2      	; 0x10b0 <__addsf3+0x1e>
    10ae:	e0 95       	com	r30
    10b0:	e7 fb       	bst	r30, 7
    10b2:	51 c1       	rjmp	.+674    	; 0x1356 <__fp_inf>

000010b4 <__addsf3x>:
    10b4:	e9 2f       	mov	r30, r25
    10b6:	77 d1       	rcall	.+750    	; 0x13a6 <__fp_split3>
    10b8:	80 f3       	brcs	.-32     	; 0x109a <__addsf3+0x8>
    10ba:	ba 17       	cp	r27, r26
    10bc:	62 07       	cpc	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	18 f0       	brcs	.+6      	; 0x10cc <__addsf3x+0x18>
    10c6:	71 f4       	brne	.+28     	; 0x10e4 <__addsf3x+0x30>
    10c8:	9e f5       	brtc	.+102    	; 0x1130 <__stack+0x31>
    10ca:	8f c1       	rjmp	.+798    	; 0x13ea <__fp_zero>
    10cc:	0e f4       	brtc	.+2      	; 0x10d0 <__addsf3x+0x1c>
    10ce:	e0 95       	com	r30
    10d0:	0b 2e       	mov	r0, r27
    10d2:	ba 2f       	mov	r27, r26
    10d4:	a0 2d       	mov	r26, r0
    10d6:	0b 01       	movw	r0, r22
    10d8:	b9 01       	movw	r22, r18
    10da:	90 01       	movw	r18, r0
    10dc:	0c 01       	movw	r0, r24
    10de:	ca 01       	movw	r24, r20
    10e0:	a0 01       	movw	r20, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	ff 27       	eor	r31, r31
    10e6:	59 1b       	sub	r21, r25
    10e8:	99 f0       	breq	.+38     	; 0x1110 <__stack+0x11>
    10ea:	59 3f       	cpi	r21, 0xF9	; 249
    10ec:	50 f4       	brcc	.+20     	; 0x1102 <__stack+0x3>
    10ee:	50 3e       	cpi	r21, 0xE0	; 224
    10f0:	68 f1       	brcs	.+90     	; 0x114c <__stack+0x4d>
    10f2:	1a 16       	cp	r1, r26
    10f4:	f0 40       	sbci	r31, 0x00	; 0
    10f6:	a2 2f       	mov	r26, r18
    10f8:	23 2f       	mov	r18, r19
    10fa:	34 2f       	mov	r19, r20
    10fc:	44 27       	eor	r20, r20
    10fe:	58 5f       	subi	r21, 0xF8	; 248
    1100:	f3 cf       	rjmp	.-26     	; 0x10e8 <__addsf3x+0x34>
    1102:	46 95       	lsr	r20
    1104:	37 95       	ror	r19
    1106:	27 95       	ror	r18
    1108:	a7 95       	ror	r26
    110a:	f0 40       	sbci	r31, 0x00	; 0
    110c:	53 95       	inc	r21
    110e:	c9 f7       	brne	.-14     	; 0x1102 <__stack+0x3>
    1110:	7e f4       	brtc	.+30     	; 0x1130 <__stack+0x31>
    1112:	1f 16       	cp	r1, r31
    1114:	ba 0b       	sbc	r27, r26
    1116:	62 0b       	sbc	r22, r18
    1118:	73 0b       	sbc	r23, r19
    111a:	84 0b       	sbc	r24, r20
    111c:	ba f0       	brmi	.+46     	; 0x114c <__stack+0x4d>
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	a1 f0       	breq	.+40     	; 0x114a <__stack+0x4b>
    1122:	ff 0f       	add	r31, r31
    1124:	bb 1f       	adc	r27, r27
    1126:	66 1f       	adc	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	c2 f7       	brpl	.-16     	; 0x111e <__stack+0x1f>
    112e:	0e c0       	rjmp	.+28     	; 0x114c <__stack+0x4d>
    1130:	ba 0f       	add	r27, r26
    1132:	62 1f       	adc	r22, r18
    1134:	73 1f       	adc	r23, r19
    1136:	84 1f       	adc	r24, r20
    1138:	48 f4       	brcc	.+18     	; 0x114c <__stack+0x4d>
    113a:	87 95       	ror	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	b7 95       	ror	r27
    1142:	f7 95       	ror	r31
    1144:	9e 3f       	cpi	r25, 0xFE	; 254
    1146:	08 f0       	brcs	.+2      	; 0x114a <__stack+0x4b>
    1148:	b3 cf       	rjmp	.-154    	; 0x10b0 <__addsf3+0x1e>
    114a:	93 95       	inc	r25
    114c:	88 0f       	add	r24, r24
    114e:	08 f0       	brcs	.+2      	; 0x1152 <__stack+0x53>
    1150:	99 27       	eor	r25, r25
    1152:	ee 0f       	add	r30, r30
    1154:	97 95       	ror	r25
    1156:	87 95       	ror	r24
    1158:	08 95       	ret

0000115a <__cmpsf2>:
    115a:	d9 d0       	rcall	.+434    	; 0x130e <__fp_cmp>
    115c:	08 f4       	brcc	.+2      	; 0x1160 <__cmpsf2+0x6>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	08 95       	ret

00001162 <__divsf3>:
    1162:	0c d0       	rcall	.+24     	; 0x117c <__divsf3x>
    1164:	0f c1       	rjmp	.+542    	; 0x1384 <__fp_round>
    1166:	07 d1       	rcall	.+526    	; 0x1376 <__fp_pscB>
    1168:	40 f0       	brcs	.+16     	; 0x117a <__divsf3+0x18>
    116a:	fe d0       	rcall	.+508    	; 0x1368 <__fp_pscA>
    116c:	30 f0       	brcs	.+12     	; 0x117a <__divsf3+0x18>
    116e:	21 f4       	brne	.+8      	; 0x1178 <__divsf3+0x16>
    1170:	5f 3f       	cpi	r21, 0xFF	; 255
    1172:	19 f0       	breq	.+6      	; 0x117a <__divsf3+0x18>
    1174:	f0 c0       	rjmp	.+480    	; 0x1356 <__fp_inf>
    1176:	51 11       	cpse	r21, r1
    1178:	39 c1       	rjmp	.+626    	; 0x13ec <__fp_szero>
    117a:	f3 c0       	rjmp	.+486    	; 0x1362 <__fp_nan>

0000117c <__divsf3x>:
    117c:	14 d1       	rcall	.+552    	; 0x13a6 <__fp_split3>
    117e:	98 f3       	brcs	.-26     	; 0x1166 <__divsf3+0x4>

00001180 <__divsf3_pse>:
    1180:	99 23       	and	r25, r25
    1182:	c9 f3       	breq	.-14     	; 0x1176 <__divsf3+0x14>
    1184:	55 23       	and	r21, r21
    1186:	b1 f3       	breq	.-20     	; 0x1174 <__divsf3+0x12>
    1188:	95 1b       	sub	r25, r21
    118a:	55 0b       	sbc	r21, r21
    118c:	bb 27       	eor	r27, r27
    118e:	aa 27       	eor	r26, r26
    1190:	62 17       	cp	r22, r18
    1192:	73 07       	cpc	r23, r19
    1194:	84 07       	cpc	r24, r20
    1196:	38 f0       	brcs	.+14     	; 0x11a6 <__divsf3_pse+0x26>
    1198:	9f 5f       	subi	r25, 0xFF	; 255
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	44 1f       	adc	r20, r20
    11a2:	aa 1f       	adc	r26, r26
    11a4:	a9 f3       	breq	.-22     	; 0x1190 <__divsf3_pse+0x10>
    11a6:	33 d0       	rcall	.+102    	; 0x120e <__divsf3_pse+0x8e>
    11a8:	0e 2e       	mov	r0, r30
    11aa:	3a f0       	brmi	.+14     	; 0x11ba <__divsf3_pse+0x3a>
    11ac:	e0 e8       	ldi	r30, 0x80	; 128
    11ae:	30 d0       	rcall	.+96     	; 0x1210 <__divsf3_pse+0x90>
    11b0:	91 50       	subi	r25, 0x01	; 1
    11b2:	50 40       	sbci	r21, 0x00	; 0
    11b4:	e6 95       	lsr	r30
    11b6:	00 1c       	adc	r0, r0
    11b8:	ca f7       	brpl	.-14     	; 0x11ac <__divsf3_pse+0x2c>
    11ba:	29 d0       	rcall	.+82     	; 0x120e <__divsf3_pse+0x8e>
    11bc:	fe 2f       	mov	r31, r30
    11be:	27 d0       	rcall	.+78     	; 0x120e <__divsf3_pse+0x8e>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	bb 1f       	adc	r27, r27
    11c8:	26 17       	cp	r18, r22
    11ca:	37 07       	cpc	r19, r23
    11cc:	48 07       	cpc	r20, r24
    11ce:	ab 07       	cpc	r26, r27
    11d0:	b0 e8       	ldi	r27, 0x80	; 128
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__divsf3_pse+0x56>
    11d4:	bb 0b       	sbc	r27, r27
    11d6:	80 2d       	mov	r24, r0
    11d8:	bf 01       	movw	r22, r30
    11da:	ff 27       	eor	r31, r31
    11dc:	93 58       	subi	r25, 0x83	; 131
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	2a f0       	brmi	.+10     	; 0x11ec <__divsf3_pse+0x6c>
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	51 05       	cpc	r21, r1
    11e6:	68 f0       	brcs	.+26     	; 0x1202 <__divsf3_pse+0x82>
    11e8:	b6 c0       	rjmp	.+364    	; 0x1356 <__fp_inf>
    11ea:	00 c1       	rjmp	.+512    	; 0x13ec <__fp_szero>
    11ec:	5f 3f       	cpi	r21, 0xFF	; 255
    11ee:	ec f3       	brlt	.-6      	; 0x11ea <__divsf3_pse+0x6a>
    11f0:	98 3e       	cpi	r25, 0xE8	; 232
    11f2:	dc f3       	brlt	.-10     	; 0x11ea <__divsf3_pse+0x6a>
    11f4:	86 95       	lsr	r24
    11f6:	77 95       	ror	r23
    11f8:	67 95       	ror	r22
    11fa:	b7 95       	ror	r27
    11fc:	f7 95       	ror	r31
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	c9 f7       	brne	.-14     	; 0x11f4 <__divsf3_pse+0x74>
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret
    120e:	e1 e0       	ldi	r30, 0x01	; 1
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	bb 1f       	adc	r27, r27
    1218:	62 17       	cp	r22, r18
    121a:	73 07       	cpc	r23, r19
    121c:	84 07       	cpc	r24, r20
    121e:	ba 07       	cpc	r27, r26
    1220:	20 f0       	brcs	.+8      	; 0x122a <__divsf3_pse+0xaa>
    1222:	62 1b       	sub	r22, r18
    1224:	73 0b       	sbc	r23, r19
    1226:	84 0b       	sbc	r24, r20
    1228:	ba 0b       	sbc	r27, r26
    122a:	ee 1f       	adc	r30, r30
    122c:	88 f7       	brcc	.-30     	; 0x1210 <__divsf3_pse+0x90>
    122e:	e0 95       	com	r30
    1230:	08 95       	ret

00001232 <__fixsfsi>:
    1232:	04 d0       	rcall	.+8      	; 0x123c <__fixunssfsi>
    1234:	68 94       	set
    1236:	b1 11       	cpse	r27, r1
    1238:	d9 c0       	rjmp	.+434    	; 0x13ec <__fp_szero>
    123a:	08 95       	ret

0000123c <__fixunssfsi>:
    123c:	bc d0       	rcall	.+376    	; 0x13b6 <__fp_splitA>
    123e:	88 f0       	brcs	.+34     	; 0x1262 <__fixunssfsi+0x26>
    1240:	9f 57       	subi	r25, 0x7F	; 127
    1242:	90 f0       	brcs	.+36     	; 0x1268 <__fixunssfsi+0x2c>
    1244:	b9 2f       	mov	r27, r25
    1246:	99 27       	eor	r25, r25
    1248:	b7 51       	subi	r27, 0x17	; 23
    124a:	a0 f0       	brcs	.+40     	; 0x1274 <__fixunssfsi+0x38>
    124c:	d1 f0       	breq	.+52     	; 0x1282 <__fixunssfsi+0x46>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	1a f0       	brmi	.+6      	; 0x125e <__fixunssfsi+0x22>
    1258:	ba 95       	dec	r27
    125a:	c9 f7       	brne	.-14     	; 0x124e <__fixunssfsi+0x12>
    125c:	12 c0       	rjmp	.+36     	; 0x1282 <__fixunssfsi+0x46>
    125e:	b1 30       	cpi	r27, 0x01	; 1
    1260:	81 f0       	breq	.+32     	; 0x1282 <__fixunssfsi+0x46>
    1262:	c3 d0       	rcall	.+390    	; 0x13ea <__fp_zero>
    1264:	b1 e0       	ldi	r27, 0x01	; 1
    1266:	08 95       	ret
    1268:	c0 c0       	rjmp	.+384    	; 0x13ea <__fp_zero>
    126a:	67 2f       	mov	r22, r23
    126c:	78 2f       	mov	r23, r24
    126e:	88 27       	eor	r24, r24
    1270:	b8 5f       	subi	r27, 0xF8	; 248
    1272:	39 f0       	breq	.+14     	; 0x1282 <__fixunssfsi+0x46>
    1274:	b9 3f       	cpi	r27, 0xF9	; 249
    1276:	cc f3       	brlt	.-14     	; 0x126a <__fixunssfsi+0x2e>
    1278:	86 95       	lsr	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b3 95       	inc	r27
    1280:	d9 f7       	brne	.-10     	; 0x1278 <__fixunssfsi+0x3c>
    1282:	3e f4       	brtc	.+14     	; 0x1292 <__fixunssfsi+0x56>
    1284:	90 95       	com	r25
    1286:	80 95       	com	r24
    1288:	70 95       	com	r23
    128a:	61 95       	neg	r22
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__floatunsisf>:
    1294:	e8 94       	clt
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <__floatsisf+0x12>

00001298 <__floatsisf>:
    1298:	97 fb       	bst	r25, 7
    129a:	3e f4       	brtc	.+14     	; 0x12aa <__floatsisf+0x12>
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	99 23       	and	r25, r25
    12ac:	a9 f0       	breq	.+42     	; 0x12d8 <__floatsisf+0x40>
    12ae:	f9 2f       	mov	r31, r25
    12b0:	96 e9       	ldi	r25, 0x96	; 150
    12b2:	bb 27       	eor	r27, r27
    12b4:	93 95       	inc	r25
    12b6:	f6 95       	lsr	r31
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f1 11       	cpse	r31, r1
    12c2:	f8 cf       	rjmp	.-16     	; 0x12b4 <__floatsisf+0x1c>
    12c4:	fa f4       	brpl	.+62     	; 0x1304 <__floatsisf+0x6c>
    12c6:	bb 0f       	add	r27, r27
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__floatsisf+0x36>
    12ca:	60 ff       	sbrs	r22, 0
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <__floatsisf+0x6c>
    12ce:	6f 5f       	subi	r22, 0xFF	; 255
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	8f 4f       	sbci	r24, 0xFF	; 255
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <__floatsisf+0x6c>
    12d8:	88 23       	and	r24, r24
    12da:	11 f0       	breq	.+4      	; 0x12e0 <__floatsisf+0x48>
    12dc:	96 e9       	ldi	r25, 0x96	; 150
    12de:	11 c0       	rjmp	.+34     	; 0x1302 <__floatsisf+0x6a>
    12e0:	77 23       	and	r23, r23
    12e2:	21 f0       	breq	.+8      	; 0x12ec <__floatsisf+0x54>
    12e4:	9e e8       	ldi	r25, 0x8E	; 142
    12e6:	87 2f       	mov	r24, r23
    12e8:	76 2f       	mov	r23, r22
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <__floatsisf+0x5e>
    12ec:	66 23       	and	r22, r22
    12ee:	71 f0       	breq	.+28     	; 0x130c <__floatsisf+0x74>
    12f0:	96 e8       	ldi	r25, 0x86	; 134
    12f2:	86 2f       	mov	r24, r22
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	2a f0       	brmi	.+10     	; 0x1304 <__floatsisf+0x6c>
    12fa:	9a 95       	dec	r25
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	da f7       	brpl	.-10     	; 0x12fa <__floatsisf+0x62>
    1304:	88 0f       	add	r24, r24
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <__fp_cmp>:
    130e:	99 0f       	add	r25, r25
    1310:	00 08       	sbc	r0, r0
    1312:	55 0f       	add	r21, r21
    1314:	aa 0b       	sbc	r26, r26
    1316:	e0 e8       	ldi	r30, 0x80	; 128
    1318:	fe ef       	ldi	r31, 0xFE	; 254
    131a:	16 16       	cp	r1, r22
    131c:	17 06       	cpc	r1, r23
    131e:	e8 07       	cpc	r30, r24
    1320:	f9 07       	cpc	r31, r25
    1322:	c0 f0       	brcs	.+48     	; 0x1354 <__fp_cmp+0x46>
    1324:	12 16       	cp	r1, r18
    1326:	13 06       	cpc	r1, r19
    1328:	e4 07       	cpc	r30, r20
    132a:	f5 07       	cpc	r31, r21
    132c:	98 f0       	brcs	.+38     	; 0x1354 <__fp_cmp+0x46>
    132e:	62 1b       	sub	r22, r18
    1330:	73 0b       	sbc	r23, r19
    1332:	84 0b       	sbc	r24, r20
    1334:	95 0b       	sbc	r25, r21
    1336:	39 f4       	brne	.+14     	; 0x1346 <__fp_cmp+0x38>
    1338:	0a 26       	eor	r0, r26
    133a:	61 f0       	breq	.+24     	; 0x1354 <__fp_cmp+0x46>
    133c:	23 2b       	or	r18, r19
    133e:	24 2b       	or	r18, r20
    1340:	25 2b       	or	r18, r21
    1342:	21 f4       	brne	.+8      	; 0x134c <__fp_cmp+0x3e>
    1344:	08 95       	ret
    1346:	0a 26       	eor	r0, r26
    1348:	09 f4       	brne	.+2      	; 0x134c <__fp_cmp+0x3e>
    134a:	a1 40       	sbci	r26, 0x01	; 1
    134c:	a6 95       	lsr	r26
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	81 1d       	adc	r24, r1
    1352:	81 1d       	adc	r24, r1
    1354:	08 95       	ret

00001356 <__fp_inf>:
    1356:	97 f9       	bld	r25, 7
    1358:	9f 67       	ori	r25, 0x7F	; 127
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	08 95       	ret

00001362 <__fp_nan>:
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	80 ec       	ldi	r24, 0xC0	; 192
    1366:	08 95       	ret

00001368 <__fp_pscA>:
    1368:	00 24       	eor	r0, r0
    136a:	0a 94       	dec	r0
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	18 06       	cpc	r1, r24
    1372:	09 06       	cpc	r0, r25
    1374:	08 95       	ret

00001376 <__fp_pscB>:
    1376:	00 24       	eor	r0, r0
    1378:	0a 94       	dec	r0
    137a:	12 16       	cp	r1, r18
    137c:	13 06       	cpc	r1, r19
    137e:	14 06       	cpc	r1, r20
    1380:	05 06       	cpc	r0, r21
    1382:	08 95       	ret

00001384 <__fp_round>:
    1384:	09 2e       	mov	r0, r25
    1386:	03 94       	inc	r0
    1388:	00 0c       	add	r0, r0
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0xc>
    138c:	88 23       	and	r24, r24
    138e:	52 f0       	brmi	.+20     	; 0x13a4 <__fp_round+0x20>
    1390:	bb 0f       	add	r27, r27
    1392:	40 f4       	brcc	.+16     	; 0x13a4 <__fp_round+0x20>
    1394:	bf 2b       	or	r27, r31
    1396:	11 f4       	brne	.+4      	; 0x139c <__fp_round+0x18>
    1398:	60 ff       	sbrs	r22, 0
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <__fp_round+0x20>
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	08 95       	ret

000013a6 <__fp_split3>:
    13a6:	57 fd       	sbrc	r21, 7
    13a8:	90 58       	subi	r25, 0x80	; 128
    13aa:	44 0f       	add	r20, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <__fp_splitA+0x10>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <__fp_splitA+0x1a>
    13b4:	47 95       	ror	r20

000013b6 <__fp_splitA>:
    13b6:	88 0f       	add	r24, r24
    13b8:	97 fb       	bst	r25, 7
    13ba:	99 1f       	adc	r25, r25
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <__fp_splitA+0x20>
    13be:	9f 3f       	cpi	r25, 0xFF	; 255
    13c0:	79 f0       	breq	.+30     	; 0x13e0 <__fp_splitA+0x2a>
    13c2:	87 95       	ror	r24
    13c4:	08 95       	ret
    13c6:	12 16       	cp	r1, r18
    13c8:	13 06       	cpc	r1, r19
    13ca:	14 06       	cpc	r1, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	f2 cf       	rjmp	.-28     	; 0x13b4 <__fp_split3+0xe>
    13d0:	46 95       	lsr	r20
    13d2:	f1 df       	rcall	.-30     	; 0x13b6 <__fp_splitA>
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <__fp_splitA+0x30>
    13d6:	16 16       	cp	r1, r22
    13d8:	17 06       	cpc	r1, r23
    13da:	18 06       	cpc	r1, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	f1 cf       	rjmp	.-30     	; 0x13c2 <__fp_splitA+0xc>
    13e0:	86 95       	lsr	r24
    13e2:	71 05       	cpc	r23, r1
    13e4:	61 05       	cpc	r22, r1
    13e6:	08 94       	sec
    13e8:	08 95       	ret

000013ea <__fp_zero>:
    13ea:	e8 94       	clt

000013ec <__fp_szero>:
    13ec:	bb 27       	eor	r27, r27
    13ee:	66 27       	eor	r22, r22
    13f0:	77 27       	eor	r23, r23
    13f2:	cb 01       	movw	r24, r22
    13f4:	97 f9       	bld	r25, 7
    13f6:	08 95       	ret

000013f8 <__mulsf3>:
    13f8:	0b d0       	rcall	.+22     	; 0x1410 <__mulsf3x>
    13fa:	c4 cf       	rjmp	.-120    	; 0x1384 <__fp_round>
    13fc:	b5 df       	rcall	.-150    	; 0x1368 <__fp_pscA>
    13fe:	28 f0       	brcs	.+10     	; 0x140a <__mulsf3+0x12>
    1400:	ba df       	rcall	.-140    	; 0x1376 <__fp_pscB>
    1402:	18 f0       	brcs	.+6      	; 0x140a <__mulsf3+0x12>
    1404:	95 23       	and	r25, r21
    1406:	09 f0       	breq	.+2      	; 0x140a <__mulsf3+0x12>
    1408:	a6 cf       	rjmp	.-180    	; 0x1356 <__fp_inf>
    140a:	ab cf       	rjmp	.-170    	; 0x1362 <__fp_nan>
    140c:	11 24       	eor	r1, r1
    140e:	ee cf       	rjmp	.-36     	; 0x13ec <__fp_szero>

00001410 <__mulsf3x>:
    1410:	ca df       	rcall	.-108    	; 0x13a6 <__fp_split3>
    1412:	a0 f3       	brcs	.-24     	; 0x13fc <__mulsf3+0x4>

00001414 <__mulsf3_pse>:
    1414:	95 9f       	mul	r25, r21
    1416:	d1 f3       	breq	.-12     	; 0x140c <__mulsf3+0x14>
    1418:	95 0f       	add	r25, r21
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	55 1f       	adc	r21, r21
    141e:	62 9f       	mul	r22, r18
    1420:	f0 01       	movw	r30, r0
    1422:	72 9f       	mul	r23, r18
    1424:	bb 27       	eor	r27, r27
    1426:	f0 0d       	add	r31, r0
    1428:	b1 1d       	adc	r27, r1
    142a:	63 9f       	mul	r22, r19
    142c:	aa 27       	eor	r26, r26
    142e:	f0 0d       	add	r31, r0
    1430:	b1 1d       	adc	r27, r1
    1432:	aa 1f       	adc	r26, r26
    1434:	64 9f       	mul	r22, r20
    1436:	66 27       	eor	r22, r22
    1438:	b0 0d       	add	r27, r0
    143a:	a1 1d       	adc	r26, r1
    143c:	66 1f       	adc	r22, r22
    143e:	82 9f       	mul	r24, r18
    1440:	22 27       	eor	r18, r18
    1442:	b0 0d       	add	r27, r0
    1444:	a1 1d       	adc	r26, r1
    1446:	62 1f       	adc	r22, r18
    1448:	73 9f       	mul	r23, r19
    144a:	b0 0d       	add	r27, r0
    144c:	a1 1d       	adc	r26, r1
    144e:	62 1f       	adc	r22, r18
    1450:	83 9f       	mul	r24, r19
    1452:	a0 0d       	add	r26, r0
    1454:	61 1d       	adc	r22, r1
    1456:	22 1f       	adc	r18, r18
    1458:	74 9f       	mul	r23, r20
    145a:	33 27       	eor	r19, r19
    145c:	a0 0d       	add	r26, r0
    145e:	61 1d       	adc	r22, r1
    1460:	23 1f       	adc	r18, r19
    1462:	84 9f       	mul	r24, r20
    1464:	60 0d       	add	r22, r0
    1466:	21 1d       	adc	r18, r1
    1468:	82 2f       	mov	r24, r18
    146a:	76 2f       	mov	r23, r22
    146c:	6a 2f       	mov	r22, r26
    146e:	11 24       	eor	r1, r1
    1470:	9f 57       	subi	r25, 0x7F	; 127
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	8a f0       	brmi	.+34     	; 0x1498 <__mulsf3_pse+0x84>
    1476:	e1 f0       	breq	.+56     	; 0x14b0 <__mulsf3_pse+0x9c>
    1478:	88 23       	and	r24, r24
    147a:	4a f0       	brmi	.+18     	; 0x148e <__mulsf3_pse+0x7a>
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	bb 1f       	adc	r27, r27
    1482:	66 1f       	adc	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	a9 f7       	brne	.-22     	; 0x1478 <__mulsf3_pse+0x64>
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	51 05       	cpc	r21, r1
    1492:	70 f0       	brcs	.+28     	; 0x14b0 <__mulsf3_pse+0x9c>
    1494:	60 cf       	rjmp	.-320    	; 0x1356 <__fp_inf>
    1496:	aa cf       	rjmp	.-172    	; 0x13ec <__fp_szero>
    1498:	5f 3f       	cpi	r21, 0xFF	; 255
    149a:	ec f3       	brlt	.-6      	; 0x1496 <__mulsf3_pse+0x82>
    149c:	98 3e       	cpi	r25, 0xE8	; 232
    149e:	dc f3       	brlt	.-10     	; 0x1496 <__mulsf3_pse+0x82>
    14a0:	86 95       	lsr	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	e7 95       	ror	r30
    14ac:	9f 5f       	subi	r25, 0xFF	; 255
    14ae:	c1 f7       	brne	.-16     	; 0x14a0 <__mulsf3_pse+0x8c>
    14b0:	fe 2b       	or	r31, r30
    14b2:	88 0f       	add	r24, r24
    14b4:	91 1d       	adc	r25, r1
    14b6:	96 95       	lsr	r25
    14b8:	87 95       	ror	r24
    14ba:	97 f9       	bld	r25, 7
    14bc:	08 95       	ret

000014be <__divmodhi4>:
    14be:	97 fb       	bst	r25, 7
    14c0:	07 2e       	mov	r0, r23
    14c2:	16 f4       	brtc	.+4      	; 0x14c8 <__divmodhi4+0xa>
    14c4:	00 94       	com	r0
    14c6:	06 d0       	rcall	.+12     	; 0x14d4 <__divmodhi4_neg1>
    14c8:	77 fd       	sbrc	r23, 7
    14ca:	08 d0       	rcall	.+16     	; 0x14dc <__divmodhi4_neg2>
    14cc:	0b d0       	rcall	.+22     	; 0x14e4 <__udivmodhi4>
    14ce:	07 fc       	sbrc	r0, 7
    14d0:	05 d0       	rcall	.+10     	; 0x14dc <__divmodhi4_neg2>
    14d2:	3e f4       	brtc	.+14     	; 0x14e2 <__divmodhi4_exit>

000014d4 <__divmodhi4_neg1>:
    14d4:	90 95       	com	r25
    14d6:	81 95       	neg	r24
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	08 95       	ret

000014dc <__divmodhi4_neg2>:
    14dc:	70 95       	com	r23
    14de:	61 95       	neg	r22
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255

000014e2 <__divmodhi4_exit>:
    14e2:	08 95       	ret

000014e4 <__udivmodhi4>:
    14e4:	aa 1b       	sub	r26, r26
    14e6:	bb 1b       	sub	r27, r27
    14e8:	51 e1       	ldi	r21, 0x11	; 17
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <__udivmodhi4_ep>

000014ec <__udivmodhi4_loop>:
    14ec:	aa 1f       	adc	r26, r26
    14ee:	bb 1f       	adc	r27, r27
    14f0:	a6 17       	cp	r26, r22
    14f2:	b7 07       	cpc	r27, r23
    14f4:	10 f0       	brcs	.+4      	; 0x14fa <__udivmodhi4_ep>
    14f6:	a6 1b       	sub	r26, r22
    14f8:	b7 0b       	sbc	r27, r23

000014fa <__udivmodhi4_ep>:
    14fa:	88 1f       	adc	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	5a 95       	dec	r21
    1500:	a9 f7       	brne	.-22     	; 0x14ec <__udivmodhi4_loop>
    1502:	80 95       	com	r24
    1504:	90 95       	com	r25
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	08 95       	ret

0000150c <calloc>:
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	86 9f       	mul	r24, r22
    1516:	80 01       	movw	r16, r0
    1518:	87 9f       	mul	r24, r23
    151a:	10 0d       	add	r17, r0
    151c:	96 9f       	mul	r25, r22
    151e:	10 0d       	add	r17, r0
    1520:	11 24       	eor	r1, r1
    1522:	c8 01       	movw	r24, r16
    1524:	0d d0       	rcall	.+26     	; 0x1540 <malloc>
    1526:	ec 01       	movw	r28, r24
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	21 f0       	breq	.+8      	; 0x1534 <calloc+0x28>
    152c:	a8 01       	movw	r20, r16
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	2d d1       	rcall	.+602    	; 0x178e <memset>
    1534:	ce 01       	movw	r24, r28
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <malloc>:
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	10 f4       	brcc	.+4      	; 0x154e <malloc+0xe>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	e0 91 80 02 	lds	r30, 0x0280
    1552:	f0 91 81 02 	lds	r31, 0x0281
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	30 97       	sbiw	r30, 0x00	; 0
    1560:	39 f1       	breq	.+78     	; 0x15b0 <malloc+0x70>
    1562:	40 81       	ld	r20, Z
    1564:	51 81       	ldd	r21, Z+1	; 0x01
    1566:	48 17       	cp	r20, r24
    1568:	59 07       	cpc	r21, r25
    156a:	b8 f0       	brcs	.+46     	; 0x159a <malloc+0x5a>
    156c:	48 17       	cp	r20, r24
    156e:	59 07       	cpc	r21, r25
    1570:	71 f4       	brne	.+28     	; 0x158e <malloc+0x4e>
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	10 97       	sbiw	r26, 0x00	; 0
    1578:	29 f0       	breq	.+10     	; 0x1584 <malloc+0x44>
    157a:	13 96       	adiw	r26, 0x03	; 3
    157c:	9c 93       	st	X, r25
    157e:	8e 93       	st	-X, r24
    1580:	12 97       	sbiw	r26, 0x02	; 2
    1582:	2c c0       	rjmp	.+88     	; 0x15dc <malloc+0x9c>
    1584:	90 93 81 02 	sts	0x0281, r25
    1588:	80 93 80 02 	sts	0x0280, r24
    158c:	27 c0       	rjmp	.+78     	; 0x15dc <malloc+0x9c>
    158e:	21 15       	cp	r18, r1
    1590:	31 05       	cpc	r19, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <malloc+0x60>
    1594:	42 17       	cp	r20, r18
    1596:	53 07       	cpc	r21, r19
    1598:	18 f0       	brcs	.+6      	; 0x15a0 <malloc+0x60>
    159a:	a9 01       	movw	r20, r18
    159c:	db 01       	movw	r26, r22
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <malloc+0x62>
    15a0:	ef 01       	movw	r28, r30
    15a2:	9a 01       	movw	r18, r20
    15a4:	bd 01       	movw	r22, r26
    15a6:	df 01       	movw	r26, r30
    15a8:	02 80       	ldd	r0, Z+2	; 0x02
    15aa:	f3 81       	ldd	r31, Z+3	; 0x03
    15ac:	e0 2d       	mov	r30, r0
    15ae:	d7 cf       	rjmp	.-82     	; 0x155e <malloc+0x1e>
    15b0:	21 15       	cp	r18, r1
    15b2:	31 05       	cpc	r19, r1
    15b4:	f9 f0       	breq	.+62     	; 0x15f4 <malloc+0xb4>
    15b6:	28 1b       	sub	r18, r24
    15b8:	39 0b       	sbc	r19, r25
    15ba:	24 30       	cpi	r18, 0x04	; 4
    15bc:	31 05       	cpc	r19, r1
    15be:	80 f4       	brcc	.+32     	; 0x15e0 <malloc+0xa0>
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <malloc+0x92>
    15ca:	fb 01       	movw	r30, r22
    15cc:	93 83       	std	Z+3, r25	; 0x03
    15ce:	82 83       	std	Z+2, r24	; 0x02
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <malloc+0x9a>
    15d2:	90 93 81 02 	sts	0x0281, r25
    15d6:	80 93 80 02 	sts	0x0280, r24
    15da:	fe 01       	movw	r30, r28
    15dc:	32 96       	adiw	r30, 0x02	; 2
    15de:	44 c0       	rjmp	.+136    	; 0x1668 <malloc+0x128>
    15e0:	fe 01       	movw	r30, r28
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	81 93       	st	Z+, r24
    15e8:	91 93       	st	Z+, r25
    15ea:	22 50       	subi	r18, 0x02	; 2
    15ec:	31 09       	sbc	r19, r1
    15ee:	39 83       	std	Y+1, r19	; 0x01
    15f0:	28 83       	st	Y, r18
    15f2:	3a c0       	rjmp	.+116    	; 0x1668 <malloc+0x128>
    15f4:	20 91 7e 02 	lds	r18, 0x027E
    15f8:	30 91 7f 02 	lds	r19, 0x027F
    15fc:	23 2b       	or	r18, r19
    15fe:	41 f4       	brne	.+16     	; 0x1610 <malloc+0xd0>
    1600:	20 91 02 01 	lds	r18, 0x0102
    1604:	30 91 03 01 	lds	r19, 0x0103
    1608:	30 93 7f 02 	sts	0x027F, r19
    160c:	20 93 7e 02 	sts	0x027E, r18
    1610:	20 91 00 01 	lds	r18, 0x0100
    1614:	30 91 01 01 	lds	r19, 0x0101
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	41 f4       	brne	.+16     	; 0x162e <malloc+0xee>
    161e:	2d b7       	in	r18, 0x3d	; 61
    1620:	3e b7       	in	r19, 0x3e	; 62
    1622:	40 91 04 01 	lds	r20, 0x0104
    1626:	50 91 05 01 	lds	r21, 0x0105
    162a:	24 1b       	sub	r18, r20
    162c:	35 0b       	sbc	r19, r21
    162e:	e0 91 7e 02 	lds	r30, 0x027E
    1632:	f0 91 7f 02 	lds	r31, 0x027F
    1636:	e2 17       	cp	r30, r18
    1638:	f3 07       	cpc	r31, r19
    163a:	a0 f4       	brcc	.+40     	; 0x1664 <malloc+0x124>
    163c:	2e 1b       	sub	r18, r30
    163e:	3f 0b       	sbc	r19, r31
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	78 f0       	brcs	.+30     	; 0x1664 <malloc+0x124>
    1646:	ac 01       	movw	r20, r24
    1648:	4e 5f       	subi	r20, 0xFE	; 254
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	24 17       	cp	r18, r20
    164e:	35 07       	cpc	r19, r21
    1650:	48 f0       	brcs	.+18     	; 0x1664 <malloc+0x124>
    1652:	4e 0f       	add	r20, r30
    1654:	5f 1f       	adc	r21, r31
    1656:	50 93 7f 02 	sts	0x027F, r21
    165a:	40 93 7e 02 	sts	0x027E, r20
    165e:	81 93       	st	Z+, r24
    1660:	91 93       	st	Z+, r25
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <malloc+0x128>
    1664:	e0 e0       	ldi	r30, 0x00	; 0
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	cf 01       	movw	r24, r30
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <free>:
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	09 f4       	brne	.+2      	; 0x167a <free+0xa>
    1678:	87 c0       	rjmp	.+270    	; 0x1788 <free+0x118>
    167a:	fc 01       	movw	r30, r24
    167c:	32 97       	sbiw	r30, 0x02	; 2
    167e:	13 82       	std	Z+3, r1	; 0x03
    1680:	12 82       	std	Z+2, r1	; 0x02
    1682:	c0 91 80 02 	lds	r28, 0x0280
    1686:	d0 91 81 02 	lds	r29, 0x0281
    168a:	20 97       	sbiw	r28, 0x00	; 0
    168c:	81 f4       	brne	.+32     	; 0x16ae <free+0x3e>
    168e:	20 81       	ld	r18, Z
    1690:	31 81       	ldd	r19, Z+1	; 0x01
    1692:	28 0f       	add	r18, r24
    1694:	39 1f       	adc	r19, r25
    1696:	80 91 7e 02 	lds	r24, 0x027E
    169a:	90 91 7f 02 	lds	r25, 0x027F
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	79 f5       	brne	.+94     	; 0x1702 <free+0x92>
    16a4:	f0 93 7f 02 	sts	0x027F, r31
    16a8:	e0 93 7e 02 	sts	0x027E, r30
    16ac:	6d c0       	rjmp	.+218    	; 0x1788 <free+0x118>
    16ae:	de 01       	movw	r26, r28
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	ae 17       	cp	r26, r30
    16b6:	bf 07       	cpc	r27, r31
    16b8:	50 f4       	brcc	.+20     	; 0x16ce <free+0x5e>
    16ba:	12 96       	adiw	r26, 0x02	; 2
    16bc:	4d 91       	ld	r20, X+
    16be:	5c 91       	ld	r21, X
    16c0:	13 97       	sbiw	r26, 0x03	; 3
    16c2:	9d 01       	movw	r18, r26
    16c4:	41 15       	cp	r20, r1
    16c6:	51 05       	cpc	r21, r1
    16c8:	09 f1       	breq	.+66     	; 0x170c <free+0x9c>
    16ca:	da 01       	movw	r26, r20
    16cc:	f3 cf       	rjmp	.-26     	; 0x16b4 <free+0x44>
    16ce:	b3 83       	std	Z+3, r27	; 0x03
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	40 81       	ld	r20, Z
    16d4:	51 81       	ldd	r21, Z+1	; 0x01
    16d6:	84 0f       	add	r24, r20
    16d8:	95 1f       	adc	r25, r21
    16da:	8a 17       	cp	r24, r26
    16dc:	9b 07       	cpc	r25, r27
    16de:	71 f4       	brne	.+28     	; 0x16fc <free+0x8c>
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	11 97       	sbiw	r26, 0x01	; 1
    16e6:	84 0f       	add	r24, r20
    16e8:	95 1f       	adc	r25, r21
    16ea:	02 96       	adiw	r24, 0x02	; 2
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
    16f0:	12 96       	adiw	r26, 0x02	; 2
    16f2:	8d 91       	ld	r24, X+
    16f4:	9c 91       	ld	r25, X
    16f6:	13 97       	sbiw	r26, 0x03	; 3
    16f8:	93 83       	std	Z+3, r25	; 0x03
    16fa:	82 83       	std	Z+2, r24	; 0x02
    16fc:	21 15       	cp	r18, r1
    16fe:	31 05       	cpc	r19, r1
    1700:	29 f4       	brne	.+10     	; 0x170c <free+0x9c>
    1702:	f0 93 81 02 	sts	0x0281, r31
    1706:	e0 93 80 02 	sts	0x0280, r30
    170a:	3e c0       	rjmp	.+124    	; 0x1788 <free+0x118>
    170c:	d9 01       	movw	r26, r18
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	fc 93       	st	X, r31
    1712:	ee 93       	st	-X, r30
    1714:	12 97       	sbiw	r26, 0x02	; 2
    1716:	4d 91       	ld	r20, X+
    1718:	5d 91       	ld	r21, X+
    171a:	a4 0f       	add	r26, r20
    171c:	b5 1f       	adc	r27, r21
    171e:	ea 17       	cp	r30, r26
    1720:	fb 07       	cpc	r31, r27
    1722:	79 f4       	brne	.+30     	; 0x1742 <free+0xd2>
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	84 0f       	add	r24, r20
    172a:	95 1f       	adc	r25, r21
    172c:	02 96       	adiw	r24, 0x02	; 2
    172e:	d9 01       	movw	r26, r18
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	9c 93       	st	X, r25
    1734:	8e 93       	st	-X, r24
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	13 96       	adiw	r26, 0x03	; 3
    173c:	9c 93       	st	X, r25
    173e:	8e 93       	st	-X, r24
    1740:	12 97       	sbiw	r26, 0x02	; 2
    1742:	e0 e0       	ldi	r30, 0x00	; 0
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	19 f0       	breq	.+6      	; 0x1754 <free+0xe4>
    174e:	fe 01       	movw	r30, r28
    1750:	ec 01       	movw	r28, r24
    1752:	f9 cf       	rjmp	.-14     	; 0x1746 <free+0xd6>
    1754:	ce 01       	movw	r24, r28
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	28 81       	ld	r18, Y
    175a:	39 81       	ldd	r19, Y+1	; 0x01
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	20 91 7e 02 	lds	r18, 0x027E
    1764:	30 91 7f 02 	lds	r19, 0x027F
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	69 f4       	brne	.+26     	; 0x1788 <free+0x118>
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	29 f4       	brne	.+10     	; 0x177c <free+0x10c>
    1772:	10 92 81 02 	sts	0x0281, r1
    1776:	10 92 80 02 	sts	0x0280, r1
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <free+0x110>
    177c:	13 82       	std	Z+3, r1	; 0x03
    177e:	12 82       	std	Z+2, r1	; 0x02
    1780:	d0 93 7f 02 	sts	0x027F, r29
    1784:	c0 93 7e 02 	sts	0x027E, r28
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <memset>:
    178e:	dc 01       	movw	r26, r24
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <memset+0x6>
    1792:	6d 93       	st	X+, r22
    1794:	41 50       	subi	r20, 0x01	; 1
    1796:	50 40       	sbci	r21, 0x00	; 0
    1798:	e0 f7       	brcc	.-8      	; 0x1792 <memset+0x4>
    179a:	08 95       	ret

0000179c <strcmp>:
    179c:	fb 01       	movw	r30, r22
    179e:	dc 01       	movw	r26, r24
    17a0:	8d 91       	ld	r24, X+
    17a2:	01 90       	ld	r0, Z+
    17a4:	80 19       	sub	r24, r0
    17a6:	01 10       	cpse	r0, r1
    17a8:	d9 f3       	breq	.-10     	; 0x17a0 <strcmp+0x4>
    17aa:	99 0b       	sbc	r25, r25
    17ac:	08 95       	ret

000017ae <strcpy>:
    17ae:	fb 01       	movw	r30, r22
    17b0:	dc 01       	movw	r26, r24
    17b2:	01 90       	ld	r0, Z+
    17b4:	0d 92       	st	X+, r0
    17b6:	00 20       	and	r0, r0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <strcpy+0x4>
    17ba:	08 95       	ret

000017bc <vsnprintf>:
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	8c 01       	movw	r16, r24
    17d6:	ca 01       	movw	r24, r20
    17d8:	46 e0       	ldi	r20, 0x06	; 6
    17da:	4c 83       	std	Y+4, r20	; 0x04
    17dc:	1a 83       	std	Y+2, r17	; 0x02
    17de:	09 83       	std	Y+1, r16	; 0x01
    17e0:	77 ff       	sbrs	r23, 7
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <vsnprintf+0x2c>
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e8       	ldi	r23, 0x80	; 128
    17e8:	61 50       	subi	r22, 0x01	; 1
    17ea:	71 09       	sbc	r23, r1
    17ec:	7e 83       	std	Y+6, r23	; 0x06
    17ee:	6d 83       	std	Y+5, r22	; 0x05
    17f0:	a9 01       	movw	r20, r18
    17f2:	bc 01       	movw	r22, r24
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	19 d0       	rcall	.+50     	; 0x182c <vfprintf>
    17fa:	4d 81       	ldd	r20, Y+5	; 0x05
    17fc:	5e 81       	ldd	r21, Y+6	; 0x06
    17fe:	57 fd       	sbrc	r21, 7
    1800:	0a c0       	rjmp	.+20     	; 0x1816 <vsnprintf+0x5a>
    1802:	2f 81       	ldd	r18, Y+7	; 0x07
    1804:	38 85       	ldd	r19, Y+8	; 0x08
    1806:	42 17       	cp	r20, r18
    1808:	53 07       	cpc	r21, r19
    180a:	0c f4       	brge	.+2      	; 0x180e <vsnprintf+0x52>
    180c:	9a 01       	movw	r18, r20
    180e:	f8 01       	movw	r30, r16
    1810:	e2 0f       	add	r30, r18
    1812:	f3 1f       	adc	r31, r19
    1814:	10 82       	st	Z, r1
    1816:	2e 96       	adiw	r28, 0x0e	; 14
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <vfprintf>:
    182c:	2f 92       	push	r2
    182e:	3f 92       	push	r3
    1830:	4f 92       	push	r4
    1832:	5f 92       	push	r5
    1834:	6f 92       	push	r6
    1836:	7f 92       	push	r7
    1838:	8f 92       	push	r8
    183a:	9f 92       	push	r9
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2c 97       	sbiw	r28, 0x0c	; 12
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	7c 01       	movw	r14, r24
    1862:	6b 01       	movw	r12, r22
    1864:	8a 01       	movw	r16, r20
    1866:	fc 01       	movw	r30, r24
    1868:	17 82       	std	Z+7, r1	; 0x07
    186a:	16 82       	std	Z+6, r1	; 0x06
    186c:	83 81       	ldd	r24, Z+3	; 0x03
    186e:	81 ff       	sbrs	r24, 1
    1870:	b0 c1       	rjmp	.+864    	; 0x1bd2 <vfprintf+0x3a6>
    1872:	ce 01       	movw	r24, r28
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	4c 01       	movw	r8, r24
    1878:	f7 01       	movw	r30, r14
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	f6 01       	movw	r30, r12
    187e:	93 fd       	sbrc	r25, 3
    1880:	85 91       	lpm	r24, Z+
    1882:	93 ff       	sbrs	r25, 3
    1884:	81 91       	ld	r24, Z+
    1886:	6f 01       	movw	r12, r30
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <vfprintf+0x62>
    188c:	9e c1       	rjmp	.+828    	; 0x1bca <vfprintf+0x39e>
    188e:	85 32       	cpi	r24, 0x25	; 37
    1890:	39 f4       	brne	.+14     	; 0x18a0 <vfprintf+0x74>
    1892:	93 fd       	sbrc	r25, 3
    1894:	85 91       	lpm	r24, Z+
    1896:	93 ff       	sbrs	r25, 3
    1898:	81 91       	ld	r24, Z+
    189a:	6f 01       	movw	r12, r30
    189c:	85 32       	cpi	r24, 0x25	; 37
    189e:	21 f4       	brne	.+8      	; 0x18a8 <vfprintf+0x7c>
    18a0:	b7 01       	movw	r22, r14
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	c7 d1       	rcall	.+910    	; 0x1c34 <fputc>
    18a6:	e8 cf       	rjmp	.-48     	; 0x1878 <vfprintf+0x4c>
    18a8:	51 2c       	mov	r5, r1
    18aa:	31 2c       	mov	r3, r1
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	20 32       	cpi	r18, 0x20	; 32
    18b0:	a0 f4       	brcc	.+40     	; 0x18da <vfprintf+0xae>
    18b2:	8b 32       	cpi	r24, 0x2B	; 43
    18b4:	69 f0       	breq	.+26     	; 0x18d0 <vfprintf+0xa4>
    18b6:	30 f4       	brcc	.+12     	; 0x18c4 <vfprintf+0x98>
    18b8:	80 32       	cpi	r24, 0x20	; 32
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <vfprintf+0xa6>
    18bc:	83 32       	cpi	r24, 0x23	; 35
    18be:	69 f4       	brne	.+26     	; 0x18da <vfprintf+0xae>
    18c0:	20 61       	ori	r18, 0x10	; 16
    18c2:	2c c0       	rjmp	.+88     	; 0x191c <vfprintf+0xf0>
    18c4:	8d 32       	cpi	r24, 0x2D	; 45
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <vfprintf+0xaa>
    18c8:	80 33       	cpi	r24, 0x30	; 48
    18ca:	39 f4       	brne	.+14     	; 0x18da <vfprintf+0xae>
    18cc:	21 60       	ori	r18, 0x01	; 1
    18ce:	26 c0       	rjmp	.+76     	; 0x191c <vfprintf+0xf0>
    18d0:	22 60       	ori	r18, 0x02	; 2
    18d2:	24 60       	ori	r18, 0x04	; 4
    18d4:	23 c0       	rjmp	.+70     	; 0x191c <vfprintf+0xf0>
    18d6:	28 60       	ori	r18, 0x08	; 8
    18d8:	21 c0       	rjmp	.+66     	; 0x191c <vfprintf+0xf0>
    18da:	27 fd       	sbrc	r18, 7
    18dc:	27 c0       	rjmp	.+78     	; 0x192c <vfprintf+0x100>
    18de:	30 ed       	ldi	r19, 0xD0	; 208
    18e0:	38 0f       	add	r19, r24
    18e2:	3a 30       	cpi	r19, 0x0A	; 10
    18e4:	78 f4       	brcc	.+30     	; 0x1904 <vfprintf+0xd8>
    18e6:	26 ff       	sbrs	r18, 6
    18e8:	06 c0       	rjmp	.+12     	; 0x18f6 <vfprintf+0xca>
    18ea:	fa e0       	ldi	r31, 0x0A	; 10
    18ec:	5f 9e       	mul	r5, r31
    18ee:	30 0d       	add	r19, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	53 2e       	mov	r5, r19
    18f4:	13 c0       	rjmp	.+38     	; 0x191c <vfprintf+0xf0>
    18f6:	8a e0       	ldi	r24, 0x0A	; 10
    18f8:	38 9e       	mul	r3, r24
    18fa:	30 0d       	add	r19, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	33 2e       	mov	r3, r19
    1900:	20 62       	ori	r18, 0x20	; 32
    1902:	0c c0       	rjmp	.+24     	; 0x191c <vfprintf+0xf0>
    1904:	8e 32       	cpi	r24, 0x2E	; 46
    1906:	21 f4       	brne	.+8      	; 0x1910 <vfprintf+0xe4>
    1908:	26 fd       	sbrc	r18, 6
    190a:	5f c1       	rjmp	.+702    	; 0x1bca <vfprintf+0x39e>
    190c:	20 64       	ori	r18, 0x40	; 64
    190e:	06 c0       	rjmp	.+12     	; 0x191c <vfprintf+0xf0>
    1910:	8c 36       	cpi	r24, 0x6C	; 108
    1912:	11 f4       	brne	.+4      	; 0x1918 <vfprintf+0xec>
    1914:	20 68       	ori	r18, 0x80	; 128
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0xf0>
    1918:	88 36       	cpi	r24, 0x68	; 104
    191a:	41 f4       	brne	.+16     	; 0x192c <vfprintf+0x100>
    191c:	f6 01       	movw	r30, r12
    191e:	93 fd       	sbrc	r25, 3
    1920:	85 91       	lpm	r24, Z+
    1922:	93 ff       	sbrs	r25, 3
    1924:	81 91       	ld	r24, Z+
    1926:	6f 01       	movw	r12, r30
    1928:	81 11       	cpse	r24, r1
    192a:	c1 cf       	rjmp	.-126    	; 0x18ae <vfprintf+0x82>
    192c:	98 2f       	mov	r25, r24
    192e:	9f 7d       	andi	r25, 0xDF	; 223
    1930:	95 54       	subi	r25, 0x45	; 69
    1932:	93 30       	cpi	r25, 0x03	; 3
    1934:	28 f4       	brcc	.+10     	; 0x1940 <vfprintf+0x114>
    1936:	0c 5f       	subi	r16, 0xFC	; 252
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	ff e3       	ldi	r31, 0x3F	; 63
    193c:	f9 83       	std	Y+1, r31	; 0x01
    193e:	0d c0       	rjmp	.+26     	; 0x195a <vfprintf+0x12e>
    1940:	83 36       	cpi	r24, 0x63	; 99
    1942:	31 f0       	breq	.+12     	; 0x1950 <vfprintf+0x124>
    1944:	83 37       	cpi	r24, 0x73	; 115
    1946:	71 f0       	breq	.+28     	; 0x1964 <vfprintf+0x138>
    1948:	83 35       	cpi	r24, 0x53	; 83
    194a:	09 f0       	breq	.+2      	; 0x194e <vfprintf+0x122>
    194c:	57 c0       	rjmp	.+174    	; 0x19fc <vfprintf+0x1d0>
    194e:	21 c0       	rjmp	.+66     	; 0x1992 <vfprintf+0x166>
    1950:	f8 01       	movw	r30, r16
    1952:	80 81       	ld	r24, Z
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	0e 5f       	subi	r16, 0xFE	; 254
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	44 24       	eor	r4, r4
    195c:	43 94       	inc	r4
    195e:	51 2c       	mov	r5, r1
    1960:	54 01       	movw	r10, r8
    1962:	14 c0       	rjmp	.+40     	; 0x198c <vfprintf+0x160>
    1964:	38 01       	movw	r6, r16
    1966:	f2 e0       	ldi	r31, 0x02	; 2
    1968:	6f 0e       	add	r6, r31
    196a:	71 1c       	adc	r7, r1
    196c:	f8 01       	movw	r30, r16
    196e:	a0 80       	ld	r10, Z
    1970:	b1 80       	ldd	r11, Z+1	; 0x01
    1972:	26 ff       	sbrs	r18, 6
    1974:	03 c0       	rjmp	.+6      	; 0x197c <vfprintf+0x150>
    1976:	65 2d       	mov	r22, r5
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x154>
    197c:	6f ef       	ldi	r22, 0xFF	; 255
    197e:	7f ef       	ldi	r23, 0xFF	; 255
    1980:	c5 01       	movw	r24, r10
    1982:	2c 87       	std	Y+12, r18	; 0x0c
    1984:	4c d1       	rcall	.+664    	; 0x1c1e <strnlen>
    1986:	2c 01       	movw	r4, r24
    1988:	83 01       	movw	r16, r6
    198a:	2c 85       	ldd	r18, Y+12	; 0x0c
    198c:	2f 77       	andi	r18, 0x7F	; 127
    198e:	22 2e       	mov	r2, r18
    1990:	16 c0       	rjmp	.+44     	; 0x19be <vfprintf+0x192>
    1992:	38 01       	movw	r6, r16
    1994:	f2 e0       	ldi	r31, 0x02	; 2
    1996:	6f 0e       	add	r6, r31
    1998:	71 1c       	adc	r7, r1
    199a:	f8 01       	movw	r30, r16
    199c:	a0 80       	ld	r10, Z
    199e:	b1 80       	ldd	r11, Z+1	; 0x01
    19a0:	26 ff       	sbrs	r18, 6
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x17e>
    19a4:	65 2d       	mov	r22, r5
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x182>
    19aa:	6f ef       	ldi	r22, 0xFF	; 255
    19ac:	7f ef       	ldi	r23, 0xFF	; 255
    19ae:	c5 01       	movw	r24, r10
    19b0:	2c 87       	std	Y+12, r18	; 0x0c
    19b2:	2a d1       	rcall	.+596    	; 0x1c08 <strnlen_P>
    19b4:	2c 01       	movw	r4, r24
    19b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    19b8:	20 68       	ori	r18, 0x80	; 128
    19ba:	22 2e       	mov	r2, r18
    19bc:	83 01       	movw	r16, r6
    19be:	23 fc       	sbrc	r2, 3
    19c0:	19 c0       	rjmp	.+50     	; 0x19f4 <vfprintf+0x1c8>
    19c2:	83 2d       	mov	r24, r3
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	48 16       	cp	r4, r24
    19c8:	59 06       	cpc	r5, r25
    19ca:	a0 f4       	brcc	.+40     	; 0x19f4 <vfprintf+0x1c8>
    19cc:	b7 01       	movw	r22, r14
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	30 d1       	rcall	.+608    	; 0x1c34 <fputc>
    19d4:	3a 94       	dec	r3
    19d6:	f5 cf       	rjmp	.-22     	; 0x19c2 <vfprintf+0x196>
    19d8:	f5 01       	movw	r30, r10
    19da:	27 fc       	sbrc	r2, 7
    19dc:	85 91       	lpm	r24, Z+
    19de:	27 fe       	sbrs	r2, 7
    19e0:	81 91       	ld	r24, Z+
    19e2:	5f 01       	movw	r10, r30
    19e4:	b7 01       	movw	r22, r14
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	25 d1       	rcall	.+586    	; 0x1c34 <fputc>
    19ea:	31 10       	cpse	r3, r1
    19ec:	3a 94       	dec	r3
    19ee:	f1 e0       	ldi	r31, 0x01	; 1
    19f0:	4f 1a       	sub	r4, r31
    19f2:	51 08       	sbc	r5, r1
    19f4:	41 14       	cp	r4, r1
    19f6:	51 04       	cpc	r5, r1
    19f8:	79 f7       	brne	.-34     	; 0x19d8 <vfprintf+0x1ac>
    19fa:	de c0       	rjmp	.+444    	; 0x1bb8 <vfprintf+0x38c>
    19fc:	84 36       	cpi	r24, 0x64	; 100
    19fe:	11 f0       	breq	.+4      	; 0x1a04 <vfprintf+0x1d8>
    1a00:	89 36       	cpi	r24, 0x69	; 105
    1a02:	31 f5       	brne	.+76     	; 0x1a50 <vfprintf+0x224>
    1a04:	f8 01       	movw	r30, r16
    1a06:	27 ff       	sbrs	r18, 7
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <vfprintf+0x1ec>
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	0c 5f       	subi	r16, 0xFC	; 252
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <vfprintf+0x1fc>
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	88 27       	eor	r24, r24
    1a1e:	77 fd       	sbrc	r23, 7
    1a20:	80 95       	com	r24
    1a22:	98 2f       	mov	r25, r24
    1a24:	0e 5f       	subi	r16, 0xFE	; 254
    1a26:	1f 4f       	sbci	r17, 0xFF	; 255
    1a28:	2f 76       	andi	r18, 0x6F	; 111
    1a2a:	b2 2e       	mov	r11, r18
    1a2c:	97 ff       	sbrs	r25, 7
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x216>
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	20 68       	ori	r18, 0x80	; 128
    1a40:	b2 2e       	mov	r11, r18
    1a42:	2a e0       	ldi	r18, 0x0A	; 10
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a4 01       	movw	r20, r8
    1a48:	27 d1       	rcall	.+590    	; 0x1c98 <__ultoa_invert>
    1a4a:	a8 2e       	mov	r10, r24
    1a4c:	a8 18       	sub	r10, r8
    1a4e:	43 c0       	rjmp	.+134    	; 0x1ad6 <vfprintf+0x2aa>
    1a50:	85 37       	cpi	r24, 0x75	; 117
    1a52:	29 f4       	brne	.+10     	; 0x1a5e <vfprintf+0x232>
    1a54:	2f 7e       	andi	r18, 0xEF	; 239
    1a56:	b2 2e       	mov	r11, r18
    1a58:	2a e0       	ldi	r18, 0x0A	; 10
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	25 c0       	rjmp	.+74     	; 0x1aa8 <vfprintf+0x27c>
    1a5e:	f2 2f       	mov	r31, r18
    1a60:	f9 7f       	andi	r31, 0xF9	; 249
    1a62:	bf 2e       	mov	r11, r31
    1a64:	8f 36       	cpi	r24, 0x6F	; 111
    1a66:	c1 f0       	breq	.+48     	; 0x1a98 <vfprintf+0x26c>
    1a68:	18 f4       	brcc	.+6      	; 0x1a70 <vfprintf+0x244>
    1a6a:	88 35       	cpi	r24, 0x58	; 88
    1a6c:	79 f0       	breq	.+30     	; 0x1a8c <vfprintf+0x260>
    1a6e:	ad c0       	rjmp	.+346    	; 0x1bca <vfprintf+0x39e>
    1a70:	80 37       	cpi	r24, 0x70	; 112
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <vfprintf+0x24e>
    1a74:	88 37       	cpi	r24, 0x78	; 120
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <vfprintf+0x254>
    1a78:	a8 c0       	rjmp	.+336    	; 0x1bca <vfprintf+0x39e>
    1a7a:	2f 2f       	mov	r18, r31
    1a7c:	20 61       	ori	r18, 0x10	; 16
    1a7e:	b2 2e       	mov	r11, r18
    1a80:	b4 fe       	sbrs	r11, 4
    1a82:	0d c0       	rjmp	.+26     	; 0x1a9e <vfprintf+0x272>
    1a84:	8b 2d       	mov	r24, r11
    1a86:	84 60       	ori	r24, 0x04	; 4
    1a88:	b8 2e       	mov	r11, r24
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <vfprintf+0x272>
    1a8c:	24 ff       	sbrs	r18, 4
    1a8e:	0a c0       	rjmp	.+20     	; 0x1aa4 <vfprintf+0x278>
    1a90:	9f 2f       	mov	r25, r31
    1a92:	96 60       	ori	r25, 0x06	; 6
    1a94:	b9 2e       	mov	r11, r25
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <vfprintf+0x278>
    1a98:	28 e0       	ldi	r18, 0x08	; 8
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <vfprintf+0x27c>
    1a9e:	20 e1       	ldi	r18, 0x10	; 16
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x27c>
    1aa4:	20 e1       	ldi	r18, 0x10	; 16
    1aa6:	32 e0       	ldi	r19, 0x02	; 2
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	b7 fe       	sbrs	r11, 7
    1aac:	07 c0       	rjmp	.+14     	; 0x1abc <vfprintf+0x290>
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	0c 5f       	subi	r16, 0xFC	; 252
    1ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aba:	06 c0       	rjmp	.+12     	; 0x1ac8 <vfprintf+0x29c>
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 5f       	subi	r16, 0xFE	; 254
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	a4 01       	movw	r20, r8
    1aca:	e6 d0       	rcall	.+460    	; 0x1c98 <__ultoa_invert>
    1acc:	a8 2e       	mov	r10, r24
    1ace:	a8 18       	sub	r10, r8
    1ad0:	fb 2d       	mov	r31, r11
    1ad2:	ff 77       	andi	r31, 0x7F	; 127
    1ad4:	bf 2e       	mov	r11, r31
    1ad6:	b6 fe       	sbrs	r11, 6
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <vfprintf+0x2c4>
    1ada:	2b 2d       	mov	r18, r11
    1adc:	2e 7f       	andi	r18, 0xFE	; 254
    1ade:	a5 14       	cp	r10, r5
    1ae0:	50 f4       	brcc	.+20     	; 0x1af6 <vfprintf+0x2ca>
    1ae2:	b4 fe       	sbrs	r11, 4
    1ae4:	0a c0       	rjmp	.+20     	; 0x1afa <vfprintf+0x2ce>
    1ae6:	b2 fc       	sbrc	r11, 2
    1ae8:	08 c0       	rjmp	.+16     	; 0x1afa <vfprintf+0x2ce>
    1aea:	2b 2d       	mov	r18, r11
    1aec:	2e 7e       	andi	r18, 0xEE	; 238
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <vfprintf+0x2ce>
    1af0:	7a 2c       	mov	r7, r10
    1af2:	2b 2d       	mov	r18, r11
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <vfprintf+0x2d0>
    1af6:	7a 2c       	mov	r7, r10
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <vfprintf+0x2d0>
    1afa:	75 2c       	mov	r7, r5
    1afc:	24 ff       	sbrs	r18, 4
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <vfprintf+0x2ee>
    1b00:	fe 01       	movw	r30, r28
    1b02:	ea 0d       	add	r30, r10
    1b04:	f1 1d       	adc	r31, r1
    1b06:	80 81       	ld	r24, Z
    1b08:	80 33       	cpi	r24, 0x30	; 48
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <vfprintf+0x2e4>
    1b0c:	29 7e       	andi	r18, 0xE9	; 233
    1b0e:	09 c0       	rjmp	.+18     	; 0x1b22 <vfprintf+0x2f6>
    1b10:	22 ff       	sbrs	r18, 2
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <vfprintf+0x2f4>
    1b14:	73 94       	inc	r7
    1b16:	73 94       	inc	r7
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <vfprintf+0x2f6>
    1b1a:	82 2f       	mov	r24, r18
    1b1c:	86 78       	andi	r24, 0x86	; 134
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <vfprintf+0x2f6>
    1b20:	73 94       	inc	r7
    1b22:	23 fd       	sbrc	r18, 3
    1b24:	12 c0       	rjmp	.+36     	; 0x1b4a <vfprintf+0x31e>
    1b26:	20 ff       	sbrs	r18, 0
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <vfprintf+0x30a>
    1b2a:	5a 2c       	mov	r5, r10
    1b2c:	73 14       	cp	r7, r3
    1b2e:	18 f4       	brcc	.+6      	; 0x1b36 <vfprintf+0x30a>
    1b30:	53 0c       	add	r5, r3
    1b32:	57 18       	sub	r5, r7
    1b34:	73 2c       	mov	r7, r3
    1b36:	73 14       	cp	r7, r3
    1b38:	60 f4       	brcc	.+24     	; 0x1b52 <vfprintf+0x326>
    1b3a:	b7 01       	movw	r22, r14
    1b3c:	80 e2       	ldi	r24, 0x20	; 32
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	2c 87       	std	Y+12, r18	; 0x0c
    1b42:	78 d0       	rcall	.+240    	; 0x1c34 <fputc>
    1b44:	73 94       	inc	r7
    1b46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b48:	f6 cf       	rjmp	.-20     	; 0x1b36 <vfprintf+0x30a>
    1b4a:	73 14       	cp	r7, r3
    1b4c:	10 f4       	brcc	.+4      	; 0x1b52 <vfprintf+0x326>
    1b4e:	37 18       	sub	r3, r7
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <vfprintf+0x328>
    1b52:	31 2c       	mov	r3, r1
    1b54:	24 ff       	sbrs	r18, 4
    1b56:	11 c0       	rjmp	.+34     	; 0x1b7a <vfprintf+0x34e>
    1b58:	b7 01       	movw	r22, r14
    1b5a:	80 e3       	ldi	r24, 0x30	; 48
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	2c 87       	std	Y+12, r18	; 0x0c
    1b60:	69 d0       	rcall	.+210    	; 0x1c34 <fputc>
    1b62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b64:	22 ff       	sbrs	r18, 2
    1b66:	16 c0       	rjmp	.+44     	; 0x1b94 <vfprintf+0x368>
    1b68:	21 ff       	sbrs	r18, 1
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <vfprintf+0x346>
    1b6c:	88 e5       	ldi	r24, 0x58	; 88
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <vfprintf+0x34a>
    1b72:	88 e7       	ldi	r24, 0x78	; 120
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	b7 01       	movw	r22, r14
    1b78:	0c c0       	rjmp	.+24     	; 0x1b92 <vfprintf+0x366>
    1b7a:	82 2f       	mov	r24, r18
    1b7c:	86 78       	andi	r24, 0x86	; 134
    1b7e:	51 f0       	breq	.+20     	; 0x1b94 <vfprintf+0x368>
    1b80:	21 fd       	sbrc	r18, 1
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <vfprintf+0x35c>
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <vfprintf+0x35e>
    1b88:	8b e2       	ldi	r24, 0x2B	; 43
    1b8a:	27 fd       	sbrc	r18, 7
    1b8c:	8d e2       	ldi	r24, 0x2D	; 45
    1b8e:	b7 01       	movw	r22, r14
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	50 d0       	rcall	.+160    	; 0x1c34 <fputc>
    1b94:	a5 14       	cp	r10, r5
    1b96:	30 f4       	brcc	.+12     	; 0x1ba4 <vfprintf+0x378>
    1b98:	b7 01       	movw	r22, r14
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	4a d0       	rcall	.+148    	; 0x1c34 <fputc>
    1ba0:	5a 94       	dec	r5
    1ba2:	f8 cf       	rjmp	.-16     	; 0x1b94 <vfprintf+0x368>
    1ba4:	aa 94       	dec	r10
    1ba6:	f4 01       	movw	r30, r8
    1ba8:	ea 0d       	add	r30, r10
    1baa:	f1 1d       	adc	r31, r1
    1bac:	80 81       	ld	r24, Z
    1bae:	b7 01       	movw	r22, r14
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	40 d0       	rcall	.+128    	; 0x1c34 <fputc>
    1bb4:	a1 10       	cpse	r10, r1
    1bb6:	f6 cf       	rjmp	.-20     	; 0x1ba4 <vfprintf+0x378>
    1bb8:	33 20       	and	r3, r3
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <vfprintf+0x392>
    1bbc:	5d ce       	rjmp	.-838    	; 0x1878 <vfprintf+0x4c>
    1bbe:	b7 01       	movw	r22, r14
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	37 d0       	rcall	.+110    	; 0x1c34 <fputc>
    1bc6:	3a 94       	dec	r3
    1bc8:	f7 cf       	rjmp	.-18     	; 0x1bb8 <vfprintf+0x38c>
    1bca:	f7 01       	movw	r30, r14
    1bcc:	86 81       	ldd	r24, Z+6	; 0x06
    1bce:	97 81       	ldd	r25, Z+7	; 0x07
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <vfprintf+0x3aa>
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	2c 96       	adiw	r28, 0x0c	; 12
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	bf 90       	pop	r11
    1bf4:	af 90       	pop	r10
    1bf6:	9f 90       	pop	r9
    1bf8:	8f 90       	pop	r8
    1bfa:	7f 90       	pop	r7
    1bfc:	6f 90       	pop	r6
    1bfe:	5f 90       	pop	r5
    1c00:	4f 90       	pop	r4
    1c02:	3f 90       	pop	r3
    1c04:	2f 90       	pop	r2
    1c06:	08 95       	ret

00001c08 <strnlen_P>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	05 90       	lpm	r0, Z+
    1c0c:	61 50       	subi	r22, 0x01	; 1
    1c0e:	70 40       	sbci	r23, 0x00	; 0
    1c10:	01 10       	cpse	r0, r1
    1c12:	d8 f7       	brcc	.-10     	; 0x1c0a <strnlen_P+0x2>
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	8e 0f       	add	r24, r30
    1c1a:	9f 1f       	adc	r25, r31
    1c1c:	08 95       	ret

00001c1e <strnlen>:
    1c1e:	fc 01       	movw	r30, r24
    1c20:	61 50       	subi	r22, 0x01	; 1
    1c22:	70 40       	sbci	r23, 0x00	; 0
    1c24:	01 90       	ld	r0, Z+
    1c26:	01 10       	cpse	r0, r1
    1c28:	d8 f7       	brcc	.-10     	; 0x1c20 <strnlen+0x2>
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	8e 0f       	add	r24, r30
    1c30:	9f 1f       	adc	r25, r31
    1c32:	08 95       	ret

00001c34 <fputc>:
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	18 2f       	mov	r17, r24
    1c3e:	09 2f       	mov	r16, r25
    1c40:	eb 01       	movw	r28, r22
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	81 fd       	sbrc	r24, 1
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <fputc+0x1a>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	20 c0       	rjmp	.+64     	; 0x1c8e <fputc+0x5a>
    1c4e:	82 ff       	sbrs	r24, 2
    1c50:	10 c0       	rjmp	.+32     	; 0x1c72 <fputc+0x3e>
    1c52:	4e 81       	ldd	r20, Y+6	; 0x06
    1c54:	5f 81       	ldd	r21, Y+7	; 0x07
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	42 17       	cp	r20, r18
    1c5c:	53 07       	cpc	r21, r19
    1c5e:	7c f4       	brge	.+30     	; 0x1c7e <fputc+0x4a>
    1c60:	e8 81       	ld	r30, Y
    1c62:	f9 81       	ldd	r31, Y+1	; 0x01
    1c64:	9f 01       	movw	r18, r30
    1c66:	2f 5f       	subi	r18, 0xFF	; 255
    1c68:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6a:	39 83       	std	Y+1, r19	; 0x01
    1c6c:	28 83       	st	Y, r18
    1c6e:	10 83       	st	Z, r17
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <fputc+0x4a>
    1c72:	e8 85       	ldd	r30, Y+8	; 0x08
    1c74:	f9 85       	ldd	r31, Y+9	; 0x09
    1c76:	81 2f       	mov	r24, r17
    1c78:	09 95       	icall
    1c7a:	89 2b       	or	r24, r25
    1c7c:	29 f7       	brne	.-54     	; 0x1c48 <fputc+0x14>
    1c7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c80:	3f 81       	ldd	r19, Y+7	; 0x07
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	3f 83       	std	Y+7, r19	; 0x07
    1c88:	2e 83       	std	Y+6, r18	; 0x06
    1c8a:	81 2f       	mov	r24, r17
    1c8c:	90 2f       	mov	r25, r16
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <__ultoa_invert>:
    1c98:	fa 01       	movw	r30, r20
    1c9a:	aa 27       	eor	r26, r26
    1c9c:	28 30       	cpi	r18, 0x08	; 8
    1c9e:	51 f1       	breq	.+84     	; 0x1cf4 <__ultoa_invert+0x5c>
    1ca0:	20 31       	cpi	r18, 0x10	; 16
    1ca2:	81 f1       	breq	.+96     	; 0x1d04 <__ultoa_invert+0x6c>
    1ca4:	e8 94       	clt
    1ca6:	6f 93       	push	r22
    1ca8:	6e 7f       	andi	r22, 0xFE	; 254
    1caa:	6e 5f       	subi	r22, 0xFE	; 254
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	af 4f       	sbci	r26, 0xFF	; 255
    1cb4:	b1 e0       	ldi	r27, 0x01	; 1
    1cb6:	3e d0       	rcall	.+124    	; 0x1d34 <__ultoa_invert+0x9c>
    1cb8:	b4 e0       	ldi	r27, 0x04	; 4
    1cba:	3c d0       	rcall	.+120    	; 0x1d34 <__ultoa_invert+0x9c>
    1cbc:	67 0f       	add	r22, r23
    1cbe:	78 1f       	adc	r23, r24
    1cc0:	89 1f       	adc	r24, r25
    1cc2:	9a 1f       	adc	r25, r26
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	68 0f       	add	r22, r24
    1cc8:	79 1f       	adc	r23, r25
    1cca:	8a 1f       	adc	r24, r26
    1ccc:	91 1d       	adc	r25, r1
    1cce:	a1 1d       	adc	r26, r1
    1cd0:	6a 0f       	add	r22, r26
    1cd2:	71 1d       	adc	r23, r1
    1cd4:	81 1d       	adc	r24, r1
    1cd6:	91 1d       	adc	r25, r1
    1cd8:	a1 1d       	adc	r26, r1
    1cda:	20 d0       	rcall	.+64     	; 0x1d1c <__ultoa_invert+0x84>
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <__ultoa_invert+0x48>
    1cde:	68 94       	set
    1ce0:	3f 91       	pop	r19
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	26 9f       	mul	r18, r22
    1ce6:	11 24       	eor	r1, r1
    1ce8:	30 19       	sub	r19, r0
    1cea:	30 5d       	subi	r19, 0xD0	; 208
    1cec:	31 93       	st	Z+, r19
    1cee:	de f6       	brtc	.-74     	; 0x1ca6 <__ultoa_invert+0xe>
    1cf0:	cf 01       	movw	r24, r30
    1cf2:	08 95       	ret
    1cf4:	46 2f       	mov	r20, r22
    1cf6:	47 70       	andi	r20, 0x07	; 7
    1cf8:	40 5d       	subi	r20, 0xD0	; 208
    1cfa:	41 93       	st	Z+, r20
    1cfc:	b3 e0       	ldi	r27, 0x03	; 3
    1cfe:	0f d0       	rcall	.+30     	; 0x1d1e <__ultoa_invert+0x86>
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__ultoa_invert+0x5c>
    1d02:	f6 cf       	rjmp	.-20     	; 0x1cf0 <__ultoa_invert+0x58>
    1d04:	46 2f       	mov	r20, r22
    1d06:	4f 70       	andi	r20, 0x0F	; 15
    1d08:	40 5d       	subi	r20, 0xD0	; 208
    1d0a:	4a 33       	cpi	r20, 0x3A	; 58
    1d0c:	18 f0       	brcs	.+6      	; 0x1d14 <__ultoa_invert+0x7c>
    1d0e:	49 5d       	subi	r20, 0xD9	; 217
    1d10:	31 fd       	sbrc	r19, 1
    1d12:	40 52       	subi	r20, 0x20	; 32
    1d14:	41 93       	st	Z+, r20
    1d16:	02 d0       	rcall	.+4      	; 0x1d1c <__ultoa_invert+0x84>
    1d18:	a9 f7       	brne	.-22     	; 0x1d04 <__ultoa_invert+0x6c>
    1d1a:	ea cf       	rjmp	.-44     	; 0x1cf0 <__ultoa_invert+0x58>
    1d1c:	b4 e0       	ldi	r27, 0x04	; 4
    1d1e:	a6 95       	lsr	r26
    1d20:	97 95       	ror	r25
    1d22:	87 95       	ror	r24
    1d24:	77 95       	ror	r23
    1d26:	67 95       	ror	r22
    1d28:	ba 95       	dec	r27
    1d2a:	c9 f7       	brne	.-14     	; 0x1d1e <__ultoa_invert+0x86>
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	61 05       	cpc	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	08 95       	ret
    1d34:	9b 01       	movw	r18, r22
    1d36:	ac 01       	movw	r20, r24
    1d38:	0a 2e       	mov	r0, r26
    1d3a:	06 94       	lsr	r0
    1d3c:	57 95       	ror	r21
    1d3e:	47 95       	ror	r20
    1d40:	37 95       	ror	r19
    1d42:	27 95       	ror	r18
    1d44:	ba 95       	dec	r27
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <__ultoa_invert+0xa2>
    1d48:	62 0f       	add	r22, r18
    1d4a:	73 1f       	adc	r23, r19
    1d4c:	84 1f       	adc	r24, r20
    1d4e:	95 1f       	adc	r25, r21
    1d50:	a0 1d       	adc	r26, r0
    1d52:	08 95       	ret

00001d54 <_exit>:
    1d54:	f8 94       	cli

00001d56 <__stop_program>:
    1d56:	ff cf       	rjmp	.-2      	; 0x1d56 <__stop_program>

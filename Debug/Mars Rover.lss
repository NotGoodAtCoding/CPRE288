
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  00001a84  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800244  00800244  00001c5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ee8  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dad  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001889  00000000  00000000  00005c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000085c  00000000  00000000  000074c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b3d  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f8a  00000000  00000000  00008861  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000a7eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	86 c6       	rjmp	.+3340   	; 0xd32 <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e0 c5       	rjmp	.+3008   	; 0xbee <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e8       	ldi	r30, 0x84	; 132
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3a       	cpi	r26, 0xA0	; 160
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	86 d3       	rcall	.+1804   	; 0x7d0 <main>
      c4:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      ca:	10 92 90 00 	sts	0x0090, r1
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	89 b9       	out	0x09, r24	; 9
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	8b b9       	out	0x0b, r24	; 11
      d6:	8e e0       	ldi	r24, 0x0E	; 14
      d8:	80 93 95 00 	sts	0x0095, r24
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	08 95       	ret

000000e2 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
      e2:	5d 9b       	sbis	0x0b, 5	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
      e6:	8c b9       	out	0x0c, r24	; 12
      e8:	08 95       	ret

000000ea <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	c1 55       	subi	r28, 0x51	; 81
      fc:	d1 09       	sbc	r29, r1
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     10a:	41 e5       	ldi	r20, 0x51	; 81
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e2       	ldi	r22, 0x20	; 32
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 2f 0a 	call	0x145e	; 0x145e <memset>
	sprintf(buf, "%s", data);
     11a:	b8 01       	movw	r22, r16
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 3f 0a 	call	0x147e	; 0x147e <strcpy>
     124:	8e 01       	movw	r16, r28
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	7e 01       	movw	r14, r28
     12c:	82 e5       	ldi	r24, 0x52	; 82
     12e:	e8 0e       	add	r14, r24
     130:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     132:	f8 01       	movw	r30, r16
     134:	81 91       	ld	r24, Z+
     136:	8f 01       	movw	r16, r30
     138:	d4 df       	rcall	.-88     	; 0xe2 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     13a:	0e 15       	cp	r16, r14
     13c:	1f 05       	cpc	r17, r15
     13e:	c9 f7       	brne	.-14     	; 0x132 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     140:	cf 5a       	subi	r28, 0xAF	; 175
     142:	df 4f       	sbci	r29, 0xFF	; 255
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     15c:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     15e:	40 91 06 01 	lds	r20, 0x0106
     162:	50 91 07 01 	lds	r21, 0x0107
     166:	48 17       	cp	r20, r24
     168:	59 07       	cpc	r21, r25
     16a:	54 f0       	brlt	.+20     	; 0x180 <linearRegression+0x24>
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     174:	41 91       	ld	r20, Z+
     176:	51 91       	ld	r21, Z+
     178:	46 17       	cp	r20, r22
     17a:	57 07       	cpc	r21, r23
     17c:	5c f4       	brge	.+22     	; 0x194 <linearRegression+0x38>
     17e:	02 c0       	rjmp	.+4      	; 0x184 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     184:	f9 01       	movw	r30, r18
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 5f       	subi	r30, 0xFC	; 252
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	20 31       	cpi	r18, 0x10	; 16
     19a:	31 05       	cpc	r19, r1
     19c:	59 f7       	brne	.-42     	; 0x174 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1a6:	84 1b       	sub	r24, r20
     1a8:	95 0b       	sbc	r25, r21
     1aa:	64 1b       	sub	r22, r20
     1ac:	75 0b       	sbc	r23, r21
     1ae:	ef d7       	rcall	.+4062   	; 0x118e <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1b0:	c9 01       	movw	r24, r18
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1be:	86 0f       	add	r24, r22
     1c0:	97 1f       	adc	r25, r23
     1c2:	08 95       	ret

000001c4 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1c4:	87 b1       	in	r24, 0x07	; 7
     1c6:	82 6c       	ori	r24, 0xC2	; 194
     1c8:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1ca:	86 b1       	in	r24, 0x06	; 6
     1cc:	87 6c       	ori	r24, 0xC7	; 199
     1ce:	86 b9       	out	0x06, r24	; 6
     1d0:	08 95       	ret

000001d2 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1d2:	86 b1       	in	r24, 0x06	; 6
     1d4:	80 6c       	ori	r24, 0xC0	; 192
     1d6:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1d8:	36 99       	sbic	0x06, 6	; 6
     1da:	fe cf       	rjmp	.-4      	; 0x1d8 <ADC_read+0x6>
	return linearRegression(ADC);
     1dc:	84 b1       	in	r24, 0x04	; 4
     1de:	95 b1       	in	r25, 0x05	; 5
     1e0:	bd cf       	rjmp	.-134    	; 0x15c <linearRegression>
     1e2:	08 95       	ret

000001e4 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1e4:	de 9a       	sbi	0x1b, 6	; 27
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	8e d5       	rcall	.+2844   	; 0xd06 <wait_ms>
     1ea:	de 98       	cbi	0x1b, 6	; 27
     1ec:	8b b3       	in	r24, 0x1b	; 27
     1ee:	80 7f       	andi	r24, 0xF0	; 240
     1f0:	8b bb       	out	0x1b, r24	; 27
     1f2:	08 95       	ret

000001f4 <lcd_command>:
     1f4:	cf 93       	push	r28
     1f6:	c8 2f       	mov	r28, r24
     1f8:	dc 98       	cbi	0x1b, 4	; 27
     1fa:	8b b3       	in	r24, 0x1b	; 27
     1fc:	9c 2f       	mov	r25, r28
     1fe:	92 95       	swap	r25
     200:	9f 70       	andi	r25, 0x0F	; 15
     202:	89 2b       	or	r24, r25
     204:	8b bb       	out	0x1b, r24	; 27
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	ed df       	rcall	.-38     	; 0x1e4 <lcd_toggle_clear>
     20a:	8b b3       	in	r24, 0x1b	; 27
     20c:	cf 70       	andi	r28, 0x0F	; 15
     20e:	c8 2b       	or	r28, r24
     210:	cb bb       	out	0x1b, r28	; 27
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	e7 df       	rcall	.-50     	; 0x1e4 <lcd_toggle_clear>
     216:	dc 9a       	sbi	0x1b, 4	; 27
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <lcd_clear>:
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	ea df       	rcall	.-44     	; 0x1f4 <lcd_command>
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	70 c5       	rjmp	.+2784   	; 0xd06 <wait_ms>
     226:	08 95       	ret

00000228 <lcd_home_line1>:
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	e4 cf       	rjmp	.-56     	; 0x1f4 <lcd_command>
     22c:	08 95       	ret

0000022e <lcd_init>:
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	8a bb       	out	0x1a, r24	; 26
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	8b bb       	out	0x1b, r24	; 27
     236:	de 9a       	sbi	0x1b, 6	; 27
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	64 d5       	rcall	.+2760   	; 0xd06 <wait_ms>
     23e:	de 98       	cbi	0x1b, 6	; 27
     240:	85 e0       	ldi	r24, 0x05	; 5
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	60 d5       	rcall	.+2752   	; 0xd06 <wait_ms>
     246:	de 9a       	sbi	0x1b, 6	; 27
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	5c d5       	rcall	.+2744   	; 0xd06 <wait_ms>
     24e:	de 98       	cbi	0x1b, 6	; 27
     250:	de 9a       	sbi	0x1b, 6	; 27
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	57 d5       	rcall	.+2734   	; 0xd06 <wait_ms>
     258:	de 98       	cbi	0x1b, 6	; 27
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	8b bb       	out	0x1b, r24	; 27
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	c1 df       	rcall	.-126    	; 0x1e4 <lcd_toggle_clear>
     262:	8b b3       	in	r24, 0x1b	; 27
     264:	8b bb       	out	0x1b, r24	; 27
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	bd df       	rcall	.-134    	; 0x1e4 <lcd_toggle_clear>
     26a:	8b b3       	in	r24, 0x1b	; 27
     26c:	8e 60       	ori	r24, 0x0E	; 14
     26e:	8b bb       	out	0x1b, r24	; 27
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	b8 df       	rcall	.-144    	; 0x1e4 <lcd_toggle_clear>
     274:	8b b3       	in	r24, 0x1b	; 27
     276:	8b bb       	out	0x1b, r24	; 27
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	b4 df       	rcall	.-152    	; 0x1e4 <lcd_toggle_clear>
     27c:	8b b3       	in	r24, 0x1b	; 27
     27e:	86 60       	ori	r24, 0x06	; 6
     280:	8b bb       	out	0x1b, r24	; 27
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	af df       	rcall	.-162    	; 0x1e4 <lcd_toggle_clear>
     286:	8b b3       	in	r24, 0x1b	; 27
     288:	8b bb       	out	0x1b, r24	; 27
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	ab df       	rcall	.-170    	; 0x1e4 <lcd_toggle_clear>
     28e:	d8 9a       	sbi	0x1b, 0	; 27
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	a8 df       	rcall	.-176    	; 0x1e4 <lcd_toggle_clear>
     294:	dc 9a       	sbi	0x1b, 4	; 27
     296:	c8 cf       	rjmp	.-112    	; 0x228 <lcd_home_line1>
     298:	08 95       	ret

0000029a <lcd_home_line2>:
     29a:	80 ec       	ldi	r24, 0xC0	; 192
     29c:	ab cf       	rjmp	.-170    	; 0x1f4 <lcd_command>
     29e:	08 95       	ret

000002a0 <lcd_home_line3>:
     2a0:	84 e9       	ldi	r24, 0x94	; 148
     2a2:	a8 cf       	rjmp	.-176    	; 0x1f4 <lcd_command>
     2a4:	08 95       	ret

000002a6 <lcd_home_line4>:
     2a6:	84 ed       	ldi	r24, 0xD4	; 212
     2a8:	a5 cf       	rjmp	.-182    	; 0x1f4 <lcd_command>
     2aa:	08 95       	ret

000002ac <lcd_putc>:
     2ac:	cf 93       	push	r28
     2ae:	c8 2f       	mov	r28, r24
     2b0:	8b b3       	in	r24, 0x1b	; 27
     2b2:	9c 2f       	mov	r25, r28
     2b4:	92 95       	swap	r25
     2b6:	9f 70       	andi	r25, 0x0F	; 15
     2b8:	89 2b       	or	r24, r25
     2ba:	8b bb       	out	0x1b, r24	; 27
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	92 df       	rcall	.-220    	; 0x1e4 <lcd_toggle_clear>
     2c0:	8b b3       	in	r24, 0x1b	; 27
     2c2:	cf 70       	andi	r28, 0x0F	; 15
     2c4:	c8 2b       	or	r28, r24
     2c6:	cb bb       	out	0x1b, r28	; 27
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	8c df       	rcall	.-232    	; 0x1e4 <lcd_toggle_clear>
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	c1 55       	subi	r28, 0x51	; 81
     2e6:	d1 09       	sbc	r29, r1
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	fe 01       	movw	r30, r28
     2f4:	e4 5a       	subi	r30, 0xA4	; 164
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	41 91       	ld	r20, Z+
     2fa:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2fc:	9f 01       	movw	r18, r30
     2fe:	61 e5       	ldi	r22, 0x51	; 81
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     30a:	be 01       	movw	r22, r28
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	84 e4       	ldi	r24, 0x44	; 68
     312:	92 e0       	ldi	r25, 0x02	; 2
     314:	0e 94 36 0a 	call	0x146c	; 0x146c <strcmp>
     318:	89 2b       	or	r24, r25
     31a:	09 f4       	brne	.+2      	; 0x31e <lprintf+0x4e>
     31c:	40 c0       	rjmp	.+128    	; 0x39e <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     31e:	be 01       	movw	r22, r28
     320:	6f 5f       	subi	r22, 0xFF	; 255
     322:	7f 4f       	sbci	r23, 0xFF	; 255
     324:	84 e4       	ldi	r24, 0x44	; 68
     326:	92 e0       	ldi	r25, 0x02	; 2
     328:	0e 94 3f 0a 	call	0x147e	; 0x147e <strcpy>
	lcd_clear();
     32c:	77 df       	rcall	.-274    	; 0x21c <lcd_clear>
     32e:	9e 01       	movw	r18, r28
     330:	2f 5f       	subi	r18, 0xFF	; 255
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     336:	00 e0       	ldi	r16, 0x00	; 0
     338:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     33a:	0f 2e       	mov	r0, r31
     33c:	f4 e1       	ldi	r31, 0x14	; 20
     33e:	ef 2e       	mov	r14, r31
     340:	f1 2c       	mov	r15, r1
     342:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     344:	24 c0       	rjmp	.+72     	; 0x38e <lprintf+0xbe>
		if (*str == '\n') {
     346:	8a 30       	cpi	r24, 0x0A	; 10
     348:	49 f4       	brne	.+18     	; 0x35c <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     34a:	c8 01       	movw	r24, r16
     34c:	b7 01       	movw	r22, r14
     34e:	1f d7       	rcall	.+3646   	; 0x118e <__divmodhi4>
     350:	f7 01       	movw	r30, r14
     352:	e8 1b       	sub	r30, r24
     354:	f9 0b       	sbc	r31, r25
     356:	0e 0f       	add	r16, r30
     358:	1f 1f       	adc	r17, r31
     35a:	03 c0       	rjmp	.+6      	; 0x362 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     35c:	a7 df       	rcall	.-178    	; 0x2ac <lcd_putc>
			charnum++;
     35e:	0f 5f       	subi	r16, 0xFF	; 255
     360:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     362:	c8 01       	movw	r24, r16
     364:	b7 01       	movw	r22, r14
     366:	13 d7       	rcall	.+3622   	; 0x118e <__divmodhi4>
     368:	89 2b       	or	r24, r25
     36a:	89 f4       	brne	.+34     	; 0x38e <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     36c:	c8 01       	movw	r24, r16
     36e:	b7 01       	movw	r22, r14
     370:	0e d7       	rcall	.+3612   	; 0x118e <__divmodhi4>
     372:	62 30       	cpi	r22, 0x02	; 2
     374:	71 05       	cpc	r23, r1
     376:	41 f0       	breq	.+16     	; 0x388 <lprintf+0xb8>
     378:	63 30       	cpi	r22, 0x03	; 3
     37a:	71 05       	cpc	r23, r1
     37c:	39 f0       	breq	.+14     	; 0x38c <lprintf+0xbc>
     37e:	61 30       	cpi	r22, 0x01	; 1
     380:	71 05       	cpc	r23, r1
     382:	29 f4       	brne	.+10     	; 0x38e <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     384:	8a df       	rcall	.-236    	; 0x29a <lcd_home_line2>
				break;
     386:	03 c0       	rjmp	.+6      	; 0x38e <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     388:	8b df       	rcall	.-234    	; 0x2a0 <lcd_home_line3>
				break;
     38a:	01 c0       	rjmp	.+2      	; 0x38e <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     38c:	8c df       	rcall	.-232    	; 0x2a6 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     38e:	f6 01       	movw	r30, r12
     390:	81 91       	ld	r24, Z+
     392:	6f 01       	movw	r12, r30
     394:	88 23       	and	r24, r24
     396:	19 f0       	breq	.+6      	; 0x39e <lprintf+0xce>
     398:	00 35       	cpi	r16, 0x50	; 80
     39a:	11 05       	cpc	r17, r1
     39c:	a4 f2       	brlt	.-88     	; 0x346 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     39e:	cf 5a       	subi	r28, 0xAF	; 175
     3a0:	df 4f       	sbci	r29, 0xFF	; 255
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	08 95       	ret

000003be <init>:
			break;
		case TURN:
			turn(quantity, sensor_data);
			break;
		case WIN:
			winProcedure(sensor_data);
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	35 df       	rcall	.-406    	; 0x22e <lcd_init>
     3c4:	82 de       	rcall	.-764    	; 0xca <serial_init>
     3c6:	78 94       	sei
     3c8:	fd de       	rcall	.-518    	; 0x1c4 <ADC_init>
     3ca:	5c d4       	rcall	.+2232   	; 0xc84 <timer1_init>
     3cc:	df d3       	rcall	.+1982   	; 0xb8c <timer3_init>
     3ce:	ae d2       	rcall	.+1372   	; 0x92c <oi_alloc>
     3d0:	ec 01       	movw	r28, r24
     3d2:	b0 d3       	rcall	.+1888   	; 0xb34 <oi_init>
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	88 de       	rcall	.-752    	; 0xea <serial_puts>
     3da:	ce 01       	movw	r24, r28
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <determineBoundryType>:
     3e2:	8e 3e       	cpi	r24, 0xEE	; 238
     3e4:	22 e0       	ldi	r18, 0x02	; 2
     3e6:	92 07       	cpc	r25, r18
     3e8:	44 f0       	brlt	.+16     	; 0x3fa <determineBoundryType+0x18>
     3ea:	8e 5e       	subi	r24, 0xEE	; 238
     3ec:	92 40       	sbci	r25, 0x02	; 2
     3ee:	8a 3f       	cpi	r24, 0xFA	; 250
     3f0:	91 05       	cpc	r25, r1
     3f2:	30 f4       	brcc	.+12     	; 0x400 <determineBoundryType+0x1e>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	08 95       	ret
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	08 95       	ret
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret

00000406 <print>:
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	d8 2f       	mov	r29, r24
     40c:	c9 2f       	mov	r28, r25
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	5e df       	rcall	.-324    	; 0x2d0 <lprintf>
     414:	8d 2f       	mov	r24, r29
     416:	9c 2f       	mov	r25, r28
     418:	68 de       	rcall	.-816    	; 0xea <serial_puts>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <rapidForwardScan>:
     424:	4f 92       	push	r4
     426:	5f 92       	push	r5
     428:	6f 92       	push	r6
     42a:	7f 92       	push	r7
     42c:	8f 92       	push	r8
     42e:	9f 92       	push	r9
     430:	af 92       	push	r10
     432:	bf 92       	push	r11
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	00 d0       	rcall	.+0      	; 0x446 <rapidForwardScan+0x22>
     446:	00 d0       	rcall	.+0      	; 0x448 <rapidForwardScan+0x24>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	0f 2e       	mov	r0, r31
     44e:	41 2c       	mov	r4, r1
     450:	51 2c       	mov	r5, r1
     452:	f8 ec       	ldi	r31, 0xC8	; 200
     454:	6f 2e       	mov	r6, r31
     456:	f2 e4       	ldi	r31, 0x42	; 66
     458:	7f 2e       	mov	r7, r31
     45a:	f0 2d       	mov	r31, r0
     45c:	53 01       	movw	r10, r6
     45e:	42 01       	movw	r8, r4
     460:	0f 2e       	mov	r0, r31
     462:	c1 2c       	mov	r12, r1
     464:	d1 2c       	mov	r13, r1
     466:	f4 e3       	ldi	r31, 0x34	; 52
     468:	ef 2e       	mov	r14, r31
     46a:	f2 e4       	ldi	r31, 0x42	; 66
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
     470:	c7 01       	movw	r24, r14
     472:	b6 01       	movw	r22, r12
     474:	4b d5       	rcall	.+2710   	; 0xf0c <__fixunssfsi>
     476:	cb 01       	movw	r24, r22
     478:	9f d3       	rcall	.+1854   	; 0xbb8 <move_servo>
     47a:	1e d4       	rcall	.+2108   	; 0xcb8 <ping_read>
     47c:	69 83       	std	Y+1, r22	; 0x01
     47e:	7a 83       	std	Y+2, r23	; 0x02
     480:	8b 83       	std	Y+3, r24	; 0x03
     482:	9c 83       	std	Y+4, r25	; 0x04
     484:	23 ec       	ldi	r18, 0xC3	; 195
     486:	35 ef       	ldi	r19, 0xF5	; 245
     488:	48 e2       	ldi	r20, 0x28	; 40
     48a:	5f e3       	ldi	r21, 0x3F	; 63
     48c:	c5 01       	movw	r24, r10
     48e:	b4 01       	movw	r22, r8
     490:	1b d6       	rcall	.+3126   	; 0x10c8 <__mulsf3>
     492:	4b 01       	movw	r8, r22
     494:	5c 01       	movw	r10, r24
     496:	23 ec       	ldi	r18, 0xC3	; 195
     498:	35 ef       	ldi	r19, 0xF5	; 245
     49a:	48 ea       	ldi	r20, 0xA8	; 168
     49c:	5e e3       	ldi	r21, 0x3E	; 62
     49e:	69 81       	ldd	r22, Y+1	; 0x01
     4a0:	7a 81       	ldd	r23, Y+2	; 0x02
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	9c 81       	ldd	r25, Y+4	; 0x04
     4a6:	10 d6       	rcall	.+3104   	; 0x10c8 <__mulsf3>
     4a8:	a5 01       	movw	r20, r10
     4aa:	94 01       	movw	r18, r8
     4ac:	5a d4       	rcall	.+2228   	; 0xd62 <__addsf3>
     4ae:	4b 01       	movw	r8, r22
     4b0:	5c 01       	movw	r10, r24
     4b2:	8f de       	rcall	.-738    	; 0x1d2 <ADC_read>
     4b4:	53 de       	rcall	.-858    	; 0x15c <linearRegression>
     4b6:	8c 01       	movw	r16, r24
     4b8:	23 ec       	ldi	r18, 0xC3	; 195
     4ba:	35 ef       	ldi	r19, 0xF5	; 245
     4bc:	48 e2       	ldi	r20, 0x28	; 40
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	c3 01       	movw	r24, r6
     4c2:	b2 01       	movw	r22, r4
     4c4:	01 d6       	rcall	.+3074   	; 0x10c8 <__mulsf3>
     4c6:	2b 01       	movw	r4, r22
     4c8:	3c 01       	movw	r6, r24
     4ca:	b8 01       	movw	r22, r16
     4cc:	88 27       	eor	r24, r24
     4ce:	77 fd       	sbrc	r23, 7
     4d0:	80 95       	com	r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	49 d5       	rcall	.+2706   	; 0xf68 <__floatsisf>
     4d6:	23 ec       	ldi	r18, 0xC3	; 195
     4d8:	35 ef       	ldi	r19, 0xF5	; 245
     4da:	48 ea       	ldi	r20, 0xA8	; 168
     4dc:	5e e3       	ldi	r21, 0x3E	; 62
     4de:	f4 d5       	rcall	.+3048   	; 0x10c8 <__mulsf3>
     4e0:	a3 01       	movw	r20, r6
     4e2:	92 01       	movw	r18, r4
     4e4:	3e d4       	rcall	.+2172   	; 0xd62 <__addsf3>
     4e6:	2b 01       	movw	r4, r22
     4e8:	3c 01       	movw	r6, r24
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	48 ec       	ldi	r20, 0xC8	; 200
     4f0:	51 e4       	ldi	r21, 0x41	; 65
     4f2:	c5 01       	movw	r24, r10
     4f4:	b4 01       	movw	r22, r8
     4f6:	99 d4       	rcall	.+2354   	; 0xe2a <__cmpsf2>
     4f8:	88 23       	and	r24, r24
     4fa:	4c f0       	brlt	.+18     	; 0x50e <rapidForwardScan+0xea>
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	48 ec       	ldi	r20, 0xC8	; 200
     502:	51 e4       	ldi	r21, 0x41	; 65
     504:	c3 01       	movw	r24, r6
     506:	b2 01       	movw	r22, r4
     508:	90 d4       	rcall	.+2336   	; 0xe2a <__cmpsf2>
     50a:	88 23       	and	r24, r24
     50c:	44 f4       	brge	.+16     	; 0x51e <rapidForwardScan+0xfa>
     50e:	8a e8       	ldi	r24, 0x8A	; 138
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	79 df       	rcall	.-270    	; 0x406 <print>
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	f4 d4       	rcall	.+2536   	; 0xf02 <__fixsfsi>
     51a:	cb 01       	movw	r24, r22
     51c:	13 c0       	rjmp	.+38     	; 0x544 <rapidForwardScan+0x120>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e4       	ldi	r21, 0x40	; 64
     526:	c7 01       	movw	r24, r14
     528:	b6 01       	movw	r22, r12
     52a:	1b d4       	rcall	.+2102   	; 0xd62 <__addsf3>
     52c:	6b 01       	movw	r12, r22
     52e:	7c 01       	movw	r14, r24
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	47 e0       	ldi	r20, 0x07	; 7
     536:	53 e4       	ldi	r21, 0x43	; 67
     538:	78 d4       	rcall	.+2288   	; 0xe2a <__cmpsf2>
     53a:	18 16       	cp	r1, r24
     53c:	0c f0       	brlt	.+2      	; 0x540 <rapidForwardScan+0x11c>
     53e:	98 cf       	rjmp	.-208    	; 0x470 <rapidForwardScan+0x4c>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	9f 90       	pop	r9
     562:	8f 90       	pop	r8
     564:	7f 90       	pop	r7
     566:	6f 90       	pop	r6
     568:	5f 90       	pop	r5
     56a:	4f 90       	pop	r4
     56c:	08 95       	ret

0000056e <detectColoredBoundry>:
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
     580:	8c 8d       	ldd	r24, Y+28	; 0x1c
     582:	9d 8d       	ldd	r25, Y+29	; 0x1d
     584:	2e df       	rcall	.-420    	; 0x3e2 <determineBoundryType>
     586:	8c 01       	movw	r16, r24
     588:	8e 8d       	ldd	r24, Y+30	; 0x1e
     58a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     58c:	2a df       	rcall	.-428    	; 0x3e2 <determineBoundryType>
     58e:	6c 01       	movw	r12, r24
     590:	88 a1       	ldd	r24, Y+32	; 0x20
     592:	99 a1       	ldd	r25, Y+33	; 0x21
     594:	26 df       	rcall	.-436    	; 0x3e2 <determineBoundryType>
     596:	7c 01       	movw	r14, r24
     598:	8a a1       	ldd	r24, Y+34	; 0x22
     59a:	9b a1       	ldd	r25, Y+35	; 0x23
     59c:	22 df       	rcall	.-444    	; 0x3e2 <determineBoundryType>
     59e:	01 30       	cpi	r16, 0x01	; 1
     5a0:	11 05       	cpc	r17, r1
     5a2:	61 f0       	breq	.+24     	; 0x5bc <detectColoredBoundry+0x4e>
     5a4:	21 e0       	ldi	r18, 0x01	; 1
     5a6:	e2 16       	cp	r14, r18
     5a8:	f1 04       	cpc	r15, r1
     5aa:	91 f0       	breq	.+36     	; 0x5d0 <detectColoredBoundry+0x62>
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	c2 16       	cp	r12, r18
     5b0:	d1 04       	cpc	r13, r1
     5b2:	71 f0       	breq	.+28     	; 0x5d0 <detectColoredBoundry+0x62>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	91 05       	cpc	r25, r1
     5b8:	f9 f4       	brne	.+62     	; 0x5f8 <detectColoredBoundry+0x8a>
     5ba:	14 c0       	rjmp	.+40     	; 0x5e4 <detectColoredBoundry+0x76>
     5bc:	8d e9       	ldi	r24, 0x9D	; 157
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	22 df       	rcall	.-444    	; 0x406 <print>
     5c2:	be 01       	movw	r22, r28
     5c4:	80 eb       	ldi	r24, 0xB0	; 176
     5c6:	9f ef       	ldi	r25, 0xFF	; 255
     5c8:	0c d1       	rcall	.+536    	; 0x7e2 <turn>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	29 c0       	rjmp	.+82     	; 0x622 <detectColoredBoundry+0xb4>
     5d0:	85 eb       	ldi	r24, 0xB5	; 181
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	18 df       	rcall	.-464    	; 0x406 <print>
     5d6:	be 01       	movw	r22, r28
     5d8:	84 e6       	ldi	r24, 0x64	; 100
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	02 d1       	rcall	.+516    	; 0x7e2 <turn>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	1f c0       	rjmp	.+62     	; 0x622 <detectColoredBoundry+0xb4>
     5e4:	8f ec       	ldi	r24, 0xCF	; 207
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e df       	rcall	.-484    	; 0x406 <print>
     5ea:	be 01       	movw	r22, r28
     5ec:	80 e5       	ldi	r24, 0x50	; 80
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	f8 d0       	rcall	.+496    	; 0x7e2 <turn>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	15 c0       	rjmp	.+42     	; 0x622 <detectColoredBoundry+0xb4>
     5f8:	02 30       	cpi	r16, 0x02	; 2
     5fa:	11 05       	cpc	r17, r1
     5fc:	51 f0       	breq	.+20     	; 0x612 <detectColoredBoundry+0xa4>
     5fe:	22 e0       	ldi	r18, 0x02	; 2
     600:	e2 16       	cp	r14, r18
     602:	f1 04       	cpc	r15, r1
     604:	31 f0       	breq	.+12     	; 0x612 <detectColoredBoundry+0xa4>
     606:	22 e0       	ldi	r18, 0x02	; 2
     608:	c2 16       	cp	r12, r18
     60a:	d1 04       	cpc	r13, r1
     60c:	11 f0       	breq	.+4      	; 0x612 <detectColoredBoundry+0xa4>
     60e:	02 97       	sbiw	r24, 0x02	; 2
     610:	31 f4       	brne	.+12     	; 0x61e <detectColoredBoundry+0xb0>
     612:	87 ee       	ldi	r24, 0xE7	; 231
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	f7 de       	rcall	.-530    	; 0x406 <print>
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <detectColoredBoundry+0xb4>
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	ef 90       	pop	r14
     62e:	df 90       	pop	r13
     630:	cf 90       	pop	r12
     632:	08 95       	ret

00000634 <detectCrater>:
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     63c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     63e:	78 a1       	ldd	r23, Y+32	; 0x20
     640:	69 a1       	ldd	r22, Y+33	; 0x21
     642:	4a a1       	ldd	r20, Y+34	; 0x22
     644:	5b a1       	ldd	r21, Y+35	; 0x23
     646:	8c 8d       	ldd	r24, Y+28	; 0x1c
     648:	9d 8d       	ldd	r25, Y+29	; 0x1d
     64a:	89 2b       	or	r24, r25
     64c:	69 f0       	breq	.+26     	; 0x668 <detectCrater+0x34>
     64e:	83 2f       	mov	r24, r19
     650:	92 2f       	mov	r25, r18
     652:	27 2f       	mov	r18, r23
     654:	36 2f       	mov	r19, r22
     656:	45 2b       	or	r20, r21
     658:	59 f0       	breq	.+22     	; 0x670 <detectCrater+0x3c>
     65a:	23 2b       	or	r18, r19
     65c:	69 f0       	breq	.+26     	; 0x678 <detectCrater+0x44>
     65e:	89 2b       	or	r24, r25
     660:	59 f0       	breq	.+22     	; 0x678 <detectCrater+0x44>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	1d c0       	rjmp	.+58     	; 0x6a2 <detectCrater+0x6e>
     668:	88 ef       	ldi	r24, 0xF8	; 248
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	cc de       	rcall	.-616    	; 0x406 <print>
     66e:	0b c0       	rjmp	.+22     	; 0x686 <detectCrater+0x52>
     670:	89 2b       	or	r24, r25
     672:	11 f0       	breq	.+4      	; 0x678 <detectCrater+0x44>
     674:	23 2b       	or	r18, r19
     676:	21 f4       	brne	.+8      	; 0x680 <detectCrater+0x4c>
     678:	8c e0       	ldi	r24, 0x0C	; 12
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	c4 de       	rcall	.-632    	; 0x406 <print>
     67e:	03 c0       	rjmp	.+6      	; 0x686 <detectCrater+0x52>
     680:	81 e2       	ldi	r24, 0x21	; 33
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	c0 de       	rcall	.-640    	; 0x406 <print>
     686:	9e 01       	movw	r18, r28
     688:	44 e6       	ldi	r20, 0x64	; 100
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	6c e9       	ldi	r22, 0x9C	; 156
     68e:	7f ef       	ldi	r23, 0xFF	; 255
     690:	8c e9       	ldi	r24, 0x9C	; 156
     692:	9f ef       	ldi	r25, 0xFF	; 255
     694:	04 d1       	rcall	.+520    	; 0x89e <move>
     696:	be 01       	movw	r22, r28
     698:	89 e6       	ldi	r24, 0x69	; 105
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	a2 d0       	rcall	.+324    	; 0x7e2 <turn>
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <moveCautiously>:
     6a8:	4f 92       	push	r4
     6aa:	5f 92       	push	r5
     6ac:	6f 92       	push	r6
     6ae:	7f 92       	push	r7
     6b0:	8f 92       	push	r8
     6b2:	9f 92       	push	r9
     6b4:	af 92       	push	r10
     6b6:	bf 92       	push	r11
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	2a 97       	sbiw	r28, 0x0a	; 10
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	4c 01       	movw	r8, r24
     6da:	3b 01       	movw	r6, r22
     6dc:	18 16       	cp	r1, r24
     6de:	19 06       	cpc	r1, r25
     6e0:	0c f0       	brlt	.+2      	; 0x6e4 <moveCautiously+0x3c>
     6e2:	5f c0       	rjmp	.+190    	; 0x7a2 <moveCautiously+0xfa>
     6e4:	cc 24       	eor	r12, r12
     6e6:	ca 94       	dec	r12
     6e8:	dc 2c       	mov	r13, r12
     6ea:	ee 24       	eor	r14, r14
     6ec:	ea 94       	dec	r14
     6ee:	fe 2c       	mov	r15, r14
     6f0:	0f ef       	ldi	r16, 0xFF	; 255
     6f2:	1f ef       	ldi	r17, 0xFF	; 255
     6f4:	a1 2c       	mov	r10, r1
     6f6:	b1 2c       	mov	r11, r1
     6f8:	41 2c       	mov	r4, r1
     6fa:	51 2c       	mov	r5, r1
     6fc:	05 36       	cpi	r16, 0x65	; 101
     6fe:	11 05       	cpc	r17, r1
     700:	24 f4       	brge	.+8      	; 0x70a <moveCautiously+0x62>
     702:	0f 3f       	cpi	r16, 0xFF	; 255
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	18 07       	cpc	r17, r24
     708:	09 f5       	brne	.+66     	; 0x74c <moveCautiously+0xa4>
     70a:	8c de       	rcall	.-744    	; 0x424 <rapidForwardScan>
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	e1 f0       	breq	.+56     	; 0x748 <moveCautiously+0xa0>
     710:	0a e5       	ldi	r16, 0x5A	; 90
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	08 1b       	sub	r16, r24
     716:	19 0b       	sbc	r17, r25
     718:	1f 93       	push	r17
     71a:	0f 93       	push	r16
     71c:	86 e3       	ldi	r24, 0x36	; 54
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	7c 01       	movw	r14, r24
     72a:	ff 92       	push	r15
     72c:	8f 93       	push	r24
     72e:	ae d6       	rcall	.+3420   	; 0x148c <sprintf>
     730:	c7 01       	movw	r24, r14
     732:	69 de       	rcall	.-814    	; 0x406 <print>
     734:	b3 01       	movw	r22, r6
     736:	c8 01       	movw	r24, r16
     738:	54 d0       	rcall	.+168    	; 0x7e2 <turn>
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	2d c0       	rjmp	.+90     	; 0x7a2 <moveCautiously+0xfa>
     748:	04 2d       	mov	r16, r4
     74a:	15 2d       	mov	r17, r5
     74c:	9a e1       	ldi	r25, 0x1A	; 26
     74e:	e9 16       	cp	r14, r25
     750:	f1 04       	cpc	r15, r1
     752:	24 f4       	brge	.+8      	; 0x75c <moveCautiously+0xb4>
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	e8 16       	cp	r14, r24
     758:	f8 06       	cpc	r15, r24
     75a:	31 f4       	brne	.+12     	; 0x768 <moveCautiously+0xc0>
     75c:	c3 01       	movw	r24, r6
     75e:	07 df       	rcall	.-498    	; 0x56e <detectColoredBoundry>
     760:	89 2b       	or	r24, r25
     762:	f9 f4       	brne	.+62     	; 0x7a2 <moveCautiously+0xfa>
     764:	e4 2c       	mov	r14, r4
     766:	f5 2c       	mov	r15, r5
     768:	9b e0       	ldi	r25, 0x0B	; 11
     76a:	c9 16       	cp	r12, r25
     76c:	d1 04       	cpc	r13, r1
     76e:	24 f4       	brge	.+8      	; 0x778 <moveCautiously+0xd0>
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	c8 16       	cp	r12, r24
     774:	d8 06       	cpc	r13, r24
     776:	31 f4       	brne	.+12     	; 0x784 <moveCautiously+0xdc>
     778:	c3 01       	movw	r24, r6
     77a:	5c df       	rcall	.-328    	; 0x634 <detectCrater>
     77c:	89 2b       	or	r24, r25
     77e:	89 f4       	brne	.+34     	; 0x7a2 <moveCautiously+0xfa>
     780:	c4 2c       	mov	r12, r4
     782:	d5 2c       	mov	r13, r5
     784:	9a e0       	ldi	r25, 0x0A	; 10
     786:	a9 0e       	add	r10, r25
     788:	b1 1c       	adc	r11, r1
     78a:	06 5f       	subi	r16, 0xF6	; 246
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	8a e0       	ldi	r24, 0x0A	; 10
     790:	e8 0e       	add	r14, r24
     792:	f1 1c       	adc	r15, r1
     794:	9a e0       	ldi	r25, 0x0A	; 10
     796:	c9 0e       	add	r12, r25
     798:	d1 1c       	adc	r13, r1
     79a:	a8 14       	cp	r10, r8
     79c:	b9 04       	cpc	r11, r9
     79e:	0c f4       	brge	.+2      	; 0x7a2 <moveCautiously+0xfa>
     7a0:	ad cf       	rjmp	.-166    	; 0x6fc <moveCautiously+0x54>
     7a2:	2a 96       	adiw	r28, 0x0a	; 10
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	bf 90       	pop	r11
     7c0:	af 90       	pop	r10
     7c2:	9f 90       	pop	r9
     7c4:	8f 90       	pop	r8
     7c6:	7f 90       	pop	r7
     7c8:	6f 90       	pop	r6
     7ca:	5f 90       	pop	r5
     7cc:	4f 90       	pop	r4
     7ce:	08 95       	ret

000007d0 <main>:
// -- Position ourselves to move in the exact center of two posts
// -- Move straight through them. Detection does the rest

int main(void)
{
	oi_t * sensor_data = init();
     7d0:	f6 dd       	rcall	.-1044   	; 0x3be <init>
     7d2:	ec 01       	movw	r28, r24
		
		print("Executing Command...");
		executeCommand(command, quantity, sensor_data);
		*/
		
		moveCautiously(450, sensor_data);
     7d4:	be 01       	movw	r22, r28
     7d6:	82 ec       	ldi	r24, 0xC2	; 194
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	66 df       	rcall	.-308    	; 0x6a8 <moveCautiously>
		
		oi_update(sensor_data);
     7dc:	ce 01       	movw	r24, r28
     7de:	ef d0       	rcall	.+478    	; 0x9be <oi_update>
     7e0:	f9 cf       	rjmp	.-14     	; 0x7d4 <main+0x4>

000007e2 <turn>:
	
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
     7f0:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	int magnitude = turnDegrees > 0 ? 1 : -1;
	
     7f2:	88 27       	eor	r24, r24
     7f4:	99 27       	eor	r25, r25
     7f6:	8c 1b       	sub	r24, r28
     7f8:	9d 0b       	sbc	r25, r29
     7fa:	23 e0       	ldi	r18, 0x03	; 3
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	b9 01       	movw	r22, r18
     800:	c6 d4       	rcall	.+2444   	; 0x118e <__divmodhi4>
     802:	fb 01       	movw	r30, r22
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	ce 01       	movw	r24, r28
     80a:	b9 01       	movw	r22, r18
     80c:	c0 d4       	rcall	.+2432   	; 0x118e <__divmodhi4>
     80e:	cb 01       	movw	r24, r22
     810:	bf 01       	movw	r22, r30
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	b4 d0       	rcall	.+360    	; 0x980 <oi_set_wheels>
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
     818:	7e 01       	movw	r14, r28
     81a:	dd 23       	and	r29, r29
     81c:	24 f4       	brge	.+8      	; 0x826 <turn+0x44>
     81e:	ee 24       	eor	r14, r14
     820:	ff 24       	eor	r15, r15
     822:	ec 1a       	sub	r14, r28
     824:	fd 0a       	sbc	r15, r29
	turnDegrees = abs(turnDegrees);

     826:	1e 14       	cp	r1, r14
     828:	1f 04       	cpc	r1, r15
     82a:	a4 f4       	brge	.+40     	; 0x854 <turn+0x72>
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     82c:	c0 e0       	ldi	r28, 0x00	; 0
     82e:	d0 e0       	ldi	r29, 0x00	; 0
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     830:	88 e2       	ldi	r24, 0x28	; 40
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	68 d2       	rcall	.+1232   	; 0xd06 <wait_ms>
		wait_ms(40);
     836:	c8 01       	movw	r24, r16
     838:	c2 d0       	rcall	.+388    	; 0x9be <oi_update>
		oi_update(sensor_data);
     83a:	f8 01       	movw	r30, r16
     83c:	26 85       	ldd	r18, Z+14	; 0x0e
     83e:	37 85       	ldd	r19, Z+15	; 0x0f
     840:	33 23       	and	r19, r19
     842:	1c f4       	brge	.+6      	; 0x84a <turn+0x68>
     844:	31 95       	neg	r19
     846:	21 95       	neg	r18
     848:	31 09       	sbc	r19, r1
     84a:	c2 0f       	add	r28, r18
     84c:	d3 1f       	adc	r29, r19
	int magnitude = turnDegrees > 0 ? 1 : -1;
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

     84e:	ce 15       	cp	r28, r14
     850:	df 05       	cpc	r29, r15
     852:	74 f3       	brlt	.-36     	; 0x830 <turn+0x4e>
	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	91 d0       	rcall	.+290    	; 0x980 <oi_set_wheels>
	oi_set_wheels(0,0); //Stop
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	08 95       	ret

0000086c <detectCollision>:
}

// Detect and react to collision - TODO: Different collision detection subroutine?
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
int detectCollision(oi_t * sensor_data){
	int left_hit = sensor_data->bumper_left;
     872:	88 81       	ld	r24, Y
     874:	98 2f       	mov	r25, r24
     876:	91 70       	andi	r25, 0x01	; 1
	int right_hit = sensor_data->bumper_right;
	
     878:	81 fd       	sbrc	r24, 1
     87a:	02 c0       	rjmp	.+4      	; 0x880 <detectCollision+0x14>
     87c:	99 23       	and	r25, r25
     87e:	51 f0       	breq	.+20     	; 0x894 <detectCollision+0x28>
	if ( left_hit || right_hit ) {
     880:	89 e3       	ldi	r24, 0x39	; 57
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	c0 dd       	rcall	.-1152   	; 0x406 <print>
		print("Collision!");
		//move(-100, -100, 150, sensor_data);
     886:	be 01       	movw	r22, r28
     888:	89 e6       	ldi	r24, 0x69	; 105
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	aa df       	rcall	.-172    	; 0x7e2 <turn>
		turn(105, sensor_data);
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <detectCollision+0x2c>
		return 1;
	} else {
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
		return 0;
	}
	
	return 0;
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <move>:
#include <avr/io.h>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	7c 01       	movw	r14, r24
     8b4:	5b 01       	movw	r10, r22
     8b6:	ea 01       	movw	r28, r20
     8b8:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
     8ba:	62 d0       	rcall	.+196    	; 0x980 <oi_set_wheels>
	
	distance = abs(distance);
     8bc:	6e 01       	movw	r12, r28
     8be:	dd 23       	and	r29, r29
     8c0:	24 f4       	brge	.+8      	; 0x8ca <move+0x2c>
     8c2:	cc 24       	eor	r12, r12
     8c4:	dd 24       	eor	r13, r13
     8c6:	cc 1a       	sub	r12, r28
     8c8:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     8ca:	1c 14       	cp	r1, r12
     8cc:	1d 04       	cpc	r1, r13
     8ce:	f4 f4       	brge	.+60     	; 0x90c <move+0x6e>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     8d4:	c8 01       	movw	r24, r16
     8d6:	73 d0       	rcall	.+230    	; 0x9be <oi_update>

		if ( right > 0 && left > 0 ) {
     8d8:	1e 14       	cp	r1, r14
     8da:	1f 04       	cpc	r1, r15
     8dc:	54 f4       	brge	.+20     	; 0x8f2 <move+0x54>
     8de:	1a 14       	cp	r1, r10
     8e0:	1b 04       	cpc	r1, r11
     8e2:	3c f4       	brge	.+14     	; 0x8f2 <move+0x54>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     8e4:	c8 01       	movw	r24, r16
     8e6:	c2 df       	rcall	.-124    	; 0x86c <detectCollision>
     8e8:	89 2b       	or	r24, r25
     8ea:	19 f0       	breq	.+6      	; 0x8f2 <move+0x54>
				oi_set_wheels(right, left);
     8ec:	b5 01       	movw	r22, r10
     8ee:	c7 01       	movw	r24, r14
     8f0:	47 d0       	rcall	.+142    	; 0x980 <oi_set_wheels>
			}
		}

		sum += abs(sensor_data->distance);
     8f2:	f8 01       	movw	r30, r16
     8f4:	44 85       	ldd	r20, Z+12	; 0x0c
     8f6:	55 85       	ldd	r21, Z+13	; 0x0d
     8f8:	55 23       	and	r21, r21
     8fa:	1c f4       	brge	.+6      	; 0x902 <move+0x64>
     8fc:	51 95       	neg	r21
     8fe:	41 95       	neg	r20
     900:	51 09       	sbc	r21, r1
     902:	c4 0f       	add	r28, r20
     904:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     906:	cc 15       	cp	r28, r12
     908:	dd 05       	cpc	r29, r13
     90a:	24 f3       	brlt	.-56     	; 0x8d4 <move+0x36>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	35 d0       	rcall	.+106    	; 0x980 <oi_set_wheels>
}
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     92c:	64 e3       	ldi	r22, 0x34	; 52
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	53 c4       	rjmp	.+2214   	; 0x11dc <calloc>
     936:	08 95       	ret

00000938 <oi_byte_tx>:
     938:	eb e9       	ldi	r30, 0x9B	; 155
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	90 81       	ld	r25, Z
     93e:	95 ff       	sbrs	r25, 5
     940:	fd cf       	rjmp	.-6      	; 0x93c <oi_byte_tx+0x4>
     942:	80 93 9c 00 	sts	0x009C, r24
     946:	08 95       	ret

00000948 <oi_set_leds>:
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	08 2f       	mov	r16, r24
     952:	16 2f       	mov	r17, r22
     954:	d4 2f       	mov	r29, r20
     956:	c2 2f       	mov	r28, r18
     958:	8b e8       	ldi	r24, 0x8B	; 139
     95a:	ee df       	rcall	.-36     	; 0x938 <oi_byte_tx>
     95c:	11 23       	and	r17, r17
     95e:	29 f0       	breq	.+10     	; 0x96a <oi_set_leds+0x22>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	01 11       	cpse	r16, r1
     964:	03 c0       	rjmp	.+6      	; 0x96c <oi_set_leds+0x24>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	01 c0       	rjmp	.+2      	; 0x96c <oi_set_leds+0x24>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	e5 df       	rcall	.-54     	; 0x938 <oi_byte_tx>
     96e:	8d 2f       	mov	r24, r29
     970:	e3 df       	rcall	.-58     	; 0x938 <oi_byte_tx>
     972:	8c 2f       	mov	r24, r28
     974:	e1 df       	rcall	.-62     	; 0x938 <oi_byte_tx>
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <oi_set_wheels>:
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	18 2f       	mov	r17, r24
     98a:	09 2f       	mov	r16, r25
     98c:	c6 2f       	mov	r28, r22
     98e:	d7 2f       	mov	r29, r23
     990:	81 e9       	ldi	r24, 0x91	; 145
     992:	d2 df       	rcall	.-92     	; 0x938 <oi_byte_tx>
     994:	80 2f       	mov	r24, r16
     996:	d0 df       	rcall	.-96     	; 0x938 <oi_byte_tx>
     998:	81 2f       	mov	r24, r17
     99a:	ce df       	rcall	.-100    	; 0x938 <oi_byte_tx>
     99c:	8d 2f       	mov	r24, r29
     99e:	cc df       	rcall	.-104    	; 0x938 <oi_byte_tx>
     9a0:	8c 2f       	mov	r24, r28
     9a2:	ca df       	rcall	.-108    	; 0x938 <oi_byte_tx>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     9ae:	eb e9       	ldi	r30, 0x9B	; 155
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	88 23       	and	r24, r24
     9b6:	ec f7       	brge	.-6      	; 0x9b2 <oi_byte_rx+0x4>

	return UDR1;
     9b8:	80 91 9c 00 	lds	r24, 0x009C
     9bc:	08 95       	ret

000009be <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9cc:	80 91 9b 00 	lds	r24, 0x009B
     9d0:	88 23       	and	r24, r24
     9d2:	44 f4       	brge	.+16     	; 0x9e4 <oi_update+0x26>
		i = UDR1;
     9d4:	ac e9       	ldi	r26, 0x9C	; 156
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9d8:	eb e9       	ldi	r30, 0x9B	; 155
     9da:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     9dc:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     9de:	80 81       	ld	r24, Z
     9e0:	88 23       	and	r24, r24
     9e2:	e4 f3       	brlt	.-8      	; 0x9dc <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     9e4:	8e e8       	ldi	r24, 0x8E	; 142
     9e6:	a8 df       	rcall	.-176    	; 0x938 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	a6 df       	rcall	.-180    	; 0x938 <oi_byte_tx>
     9ec:	e7 01       	movw	r28, r14
     9ee:	87 01       	movw	r16, r14
     9f0:	0c 5c       	subi	r16, 0xCC	; 204
     9f2:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     9f4:	dc df       	rcall	.-72     	; 0x9ae <oi_byte_rx>
     9f6:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     9f8:	c0 17       	cp	r28, r16
     9fa:	d1 07       	cpc	r29, r17
     9fc:	d9 f7       	brne	.-10     	; 0x9f4 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     9fe:	f7 01       	movw	r30, r14
     a00:	84 85       	ldd	r24, Z+12	; 0x0c
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	98 2f       	mov	r25, r24
     a06:	88 27       	eor	r24, r24
     a08:	25 85       	ldd	r18, Z+13	; 0x0d
     a0a:	82 0f       	add	r24, r18
     a0c:	91 1d       	adc	r25, r1
     a0e:	95 87       	std	Z+13, r25	; 0x0d
     a10:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     a12:	86 85       	ldd	r24, Z+14	; 0x0e
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	98 2f       	mov	r25, r24
     a18:	88 27       	eor	r24, r24
     a1a:	27 85       	ldd	r18, Z+15	; 0x0f
     a1c:	82 0f       	add	r24, r18
     a1e:	91 1d       	adc	r25, r1
     a20:	97 87       	std	Z+15, r25	; 0x0f
     a22:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     a24:	81 89       	ldd	r24, Z+17	; 0x11
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	98 2f       	mov	r25, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	22 89       	ldd	r18, Z+18	; 0x12
     a2e:	82 0f       	add	r24, r18
     a30:	91 1d       	adc	r25, r1
     a32:	92 8b       	std	Z+18, r25	; 0x12
     a34:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     a36:	83 89       	ldd	r24, Z+19	; 0x13
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	98 2f       	mov	r25, r24
     a3c:	88 27       	eor	r24, r24
     a3e:	24 89       	ldd	r18, Z+20	; 0x14
     a40:	82 0f       	add	r24, r18
     a42:	91 1d       	adc	r25, r1
     a44:	94 8b       	std	Z+20, r25	; 0x14
     a46:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     a48:	86 89       	ldd	r24, Z+22	; 0x16
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	98 2f       	mov	r25, r24
     a4e:	88 27       	eor	r24, r24
     a50:	27 89       	ldd	r18, Z+23	; 0x17
     a52:	82 0f       	add	r24, r18
     a54:	91 1d       	adc	r25, r1
     a56:	97 8b       	std	Z+23, r25	; 0x17
     a58:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     a5a:	80 8d       	ldd	r24, Z+24	; 0x18
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	98 2f       	mov	r25, r24
     a60:	88 27       	eor	r24, r24
     a62:	21 8d       	ldd	r18, Z+25	; 0x19
     a64:	82 0f       	add	r24, r18
     a66:	91 1d       	adc	r25, r1
     a68:	91 8f       	std	Z+25, r25	; 0x19
     a6a:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     a6c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	98 2f       	mov	r25, r24
     a72:	88 27       	eor	r24, r24
     a74:	23 8d       	ldd	r18, Z+27	; 0x1b
     a76:	82 0f       	add	r24, r18
     a78:	91 1d       	adc	r25, r1
     a7a:	93 8f       	std	Z+27, r25	; 0x1b
     a7c:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     a7e:	84 8d       	ldd	r24, Z+28	; 0x1c
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	98 2f       	mov	r25, r24
     a84:	88 27       	eor	r24, r24
     a86:	25 8d       	ldd	r18, Z+29	; 0x1d
     a88:	82 0f       	add	r24, r18
     a8a:	91 1d       	adc	r25, r1
     a8c:	95 8f       	std	Z+29, r25	; 0x1d
     a8e:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     a90:	86 8d       	ldd	r24, Z+30	; 0x1e
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	98 2f       	mov	r25, r24
     a96:	88 27       	eor	r24, r24
     a98:	27 8d       	ldd	r18, Z+31	; 0x1f
     a9a:	82 0f       	add	r24, r18
     a9c:	91 1d       	adc	r25, r1
     a9e:	97 8f       	std	Z+31, r25	; 0x1f
     aa0:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     aa2:	80 a1       	ldd	r24, Z+32	; 0x20
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	98 2f       	mov	r25, r24
     aa8:	88 27       	eor	r24, r24
     aaa:	21 a1       	ldd	r18, Z+33	; 0x21
     aac:	82 0f       	add	r24, r18
     aae:	91 1d       	adc	r25, r1
     ab0:	91 a3       	std	Z+33, r25	; 0x21
     ab2:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     ab4:	82 a1       	ldd	r24, Z+34	; 0x22
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	98 2f       	mov	r25, r24
     aba:	88 27       	eor	r24, r24
     abc:	23 a1       	ldd	r18, Z+35	; 0x23
     abe:	82 0f       	add	r24, r18
     ac0:	91 1d       	adc	r25, r1
     ac2:	93 a3       	std	Z+35, r25	; 0x23
     ac4:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     ac6:	82 a5       	ldd	r24, Z+42	; 0x2a
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	21 a5       	ldd	r18, Z+41	; 0x29
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	32 2f       	mov	r19, r18
     ad0:	22 27       	eor	r18, r18
     ad2:	28 0f       	add	r18, r24
     ad4:	39 1f       	adc	r19, r25
     ad6:	36 a3       	std	Z+38, r19	; 0x26
     ad8:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     ada:	20 a9       	ldd	r18, Z+48	; 0x30
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	32 2f       	mov	r19, r18
     ae0:	22 27       	eor	r18, r18
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	95 a7       	std	Z+45, r25	; 0x2d
     ae8:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     aea:	82 a9       	ldd	r24, Z+50	; 0x32
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	98 2f       	mov	r25, r24
     af0:	88 27       	eor	r24, r24
     af2:	23 a9       	ldd	r18, Z+51	; 0x33
     af4:	82 0f       	add	r24, r18
     af6:	91 1d       	adc	r25, r1
     af8:	97 a7       	std	Z+47, r25	; 0x2f
     afa:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     afc:	84 a9       	ldd	r24, Z+52	; 0x34
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	98 2f       	mov	r25, r24
     b02:	88 27       	eor	r24, r24
     b04:	25 a9       	ldd	r18, Z+53	; 0x35
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	91 ab       	std	Z+49, r25	; 0x31
     b0c:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     b0e:	86 a9       	ldd	r24, Z+54	; 0x36
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	98 2f       	mov	r25, r24
     b14:	88 27       	eor	r24, r24
     b16:	27 a9       	ldd	r18, Z+55	; 0x37
     b18:	82 0f       	add	r24, r18
     b1a:	91 1d       	adc	r25, r1
     b1c:	93 ab       	std	Z+51, r25	; 0x33
     b1e:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     b20:	83 e2       	ldi	r24, 0x23	; 35
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	f0 d0       	rcall	.+480    	; 0xd06 <wait_ms>
}
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	08 95       	ret

00000b34 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     b3e:	09 e9       	ldi	r16, 0x99	; 153
     b40:	10 e0       	ldi	r17, 0x00	; 0
     b42:	80 e1       	ldi	r24, 0x10	; 16
     b44:	f8 01       	movw	r30, r16
     b46:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     b48:	88 e1       	ldi	r24, 0x18	; 24
     b4a:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     b54:	80 e8       	ldi	r24, 0x80	; 128
     b56:	f0 de       	rcall	.-544    	; 0x938 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     b58:	81 e8       	ldi	r24, 0x81	; 129
     b5a:	ee de       	rcall	.-548    	; 0x938 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     b5c:	88 e0       	ldi	r24, 0x08	; 8
     b5e:	ec de       	rcall	.-552    	; 0x938 <oi_byte_tx>
	wait_ms(100);
     b60:	84 e6       	ldi	r24, 0x64	; 100
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	d0 d0       	rcall	.+416    	; 0xd06 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     b66:	81 e2       	ldi	r24, 0x21	; 33
     b68:	f8 01       	movw	r30, r16
     b6a:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     b6c:	84 e8       	ldi	r24, 0x84	; 132
     b6e:	e4 de       	rcall	.-568    	; 0x938 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	47 e0       	ldi	r20, 0x07	; 7
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	e7 de       	rcall	.-562    	; 0x948 <oi_set_leds>
	
	oi_update(self);
     b7a:	ce 01       	movw	r24, r28
     b7c:	20 df       	rcall	.-448    	; 0x9be <oi_update>
	oi_update(self); // call twice to clear distance/angle
     b7e:	ce 01       	movw	r24, r28
     b80:	1e df       	rcall	.-452    	; 0x9be <oi_update>
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <timer3_init>:
#define DEGREE_MULTIPLIER 20.5
#define DEGREE_OFFSET 700

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     b8c:	83 e2       	ldi	r24, 0x23	; 35
     b8e:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     b92:	8a e1       	ldi	r24, 0x1A	; 26
     b94:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     b98:	88 ef       	ldi	r24, 0xF8	; 248
     b9a:	97 ea       	ldi	r25, 0xA7	; 167
     b9c:	90 93 87 00 	sts	0x0087, r25
     ba0:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     ba4:	80 91 26 01 	lds	r24, 0x0126
     ba8:	90 91 27 01 	lds	r25, 0x0127
     bac:	90 93 85 00 	sts	0x0085, r25
     bb0:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     bb4:	14 9a       	sbi	0x02, 4	; 2
     bb6:	08 95       	ret

00000bb8 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     bb8:	bc 01       	movw	r22, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	d2 d1       	rcall	.+932    	; 0xf64 <__floatunsisf>
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	44 ea       	ldi	r20, 0xA4	; 164
     bc6:	51 e4       	ldi	r21, 0x41	; 65
     bc8:	7f d2       	rcall	.+1278   	; 0x10c8 <__mulsf3>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4f e2       	ldi	r20, 0x2F	; 47
     bd0:	54 e4       	ldi	r21, 0x44	; 68
     bd2:	c7 d0       	rcall	.+398    	; 0xd62 <__addsf3>
     bd4:	9b d1       	rcall	.+822    	; 0xf0c <__fixunssfsi>
     bd6:	70 93 27 01 	sts	0x0127, r23
     bda:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
     bde:	70 93 85 00 	sts	0x0085, r23
     be2:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     be6:	8e e1       	ldi	r24, 0x1E	; 30
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	8d c0       	rjmp	.+282    	; 0xd06 <wait_ms>
     bec:	08 95       	ret

00000bee <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	8f 93       	push	r24
     bfa:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     bfc:	80 91 99 02 	lds	r24, 0x0299
     c00:	81 11       	cpse	r24, r1
     c02:	0d c0       	rjmp	.+26     	; 0xc1e <__vector_11+0x30>
		rising_time = ICR1;
     c04:	86 b5       	in	r24, 0x26	; 38
     c06:	97 b5       	in	r25, 0x27	; 39
     c08:	90 93 98 02 	sts	0x0298, r25
     c0c:	80 93 97 02 	sts	0x0297, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     c10:	8e b5       	in	r24, 0x2e	; 46
     c12:	8f 7b       	andi	r24, 0xBF	; 191
     c14:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 99 02 	sts	0x0299, r24
     c1c:	0d c0       	rjmp	.+26     	; 0xc38 <__vector_11+0x4a>
		} else if ( state == FALLING) {
     c1e:	80 91 99 02 	lds	r24, 0x0299
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	49 f4       	brne	.+18     	; 0xc38 <__vector_11+0x4a>
		falling_time = ICR1;
     c26:	86 b5       	in	r24, 0x26	; 38
     c28:	97 b5       	in	r25, 0x27	; 39
     c2a:	90 93 96 02 	sts	0x0296, r25
     c2e:	80 93 95 02 	sts	0x0295, r24
		state = DONE;
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	80 93 99 02 	sts	0x0299, r24
	}
}
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     c46:	60 91 95 02 	lds	r22, 0x0295
     c4a:	70 91 96 02 	lds	r23, 0x0296
     c4e:	80 91 97 02 	lds	r24, 0x0297
     c52:	90 91 98 02 	lds	r25, 0x0298
     c56:	68 1b       	sub	r22, r24
     c58:	79 0b       	sbc	r23, r25
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	80 d1       	rcall	.+768    	; 0xf64 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	34 e2       	ldi	r19, 0x24	; 36
     c68:	44 e7       	ldi	r20, 0x74	; 116
     c6a:	56 e4       	ldi	r21, 0x46	; 70
     c6c:	e2 d0       	rcall	.+452    	; 0xe32 <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	4a ea       	ldi	r20, 0xAA	; 170
     c74:	53 e4       	ldi	r21, 0x43	; 67
     c76:	28 d2       	rcall	.+1104   	; 0x10c8 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	48 ec       	ldi	r20, 0xC8	; 200
     c7e:	52 e4       	ldi	r21, 0x42	; 66
     c80:	23 c2       	rjmp	.+1094   	; 0x10c8 <__mulsf3>
	return timeDifference;
}
     c82:	08 95       	ret

00000c84 <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     c84:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     c86:	ea e7       	ldi	r30, 0x7A	; 122
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     c8e:	86 b7       	in	r24, 0x36	; 54
     c90:	80 62       	ori	r24, 0x20	; 32
     c92:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     c94:	87 b7       	in	r24, 0x37	; 55
     c96:	80 62       	ori	r24, 0x20	; 32
     c98:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     c9a:	85 ec       	ldi	r24, 0xC5	; 197
     c9c:	8e bd       	out	0x2e, r24	; 46
     c9e:	08 95       	ret

00000ca0 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     ca0:	87 b7       	in	r24, 0x37	; 55
     ca2:	8b 7d       	andi	r24, 0xDB	; 219
     ca4:	87 bf       	out	0x37, r24	; 55
     ca6:	08 95       	ret

00000ca8 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     ca8:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     caa:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	2a d0       	rcall	.+84     	; 0xd06 <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     cb2:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     cb4:	8c 98       	cbi	0x11, 4	; 17
     cb6:	08 95       	ret

00000cb8 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     cb8:	10 92 99 02 	sts	0x0299, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     cbc:	f1 df       	rcall	.-30     	; 0xca0 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     cbe:	f4 df       	rcall	.-24     	; 0xca8 <send_pulse>
	
	//Enable interrupt
	timer1_init();
     cc0:	e1 df       	rcall	.-62     	; 0xc84 <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     cc2:	80 91 99 02 	lds	r24, 0x0299
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     cca:	bd cf       	rjmp	.-134    	; 0xc46 <time_to_dist>
     ccc:	08 95       	ret

00000cce <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     cce:	10 92 9b 02 	sts	0x029B, r1
     cd2:	10 92 9a 02 	sts	0x029A, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     cd6:	81 11       	cpse	r24, r1
     cd8:	06 c0       	rjmp	.+12     	; 0xce6 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     cda:	8b e0       	ldi	r24, 0x0B	; 11
     cdc:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     cde:	87 b7       	in	r24, 0x37	; 55
     ce0:	80 68       	ori	r24, 0x80	; 128
     ce2:	87 bf       	out	0x37, r24	; 55
     ce4:	07 c0       	rjmp	.+14     	; 0xcf4 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	29 f4       	brne	.+10     	; 0xcf4 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     cea:	89 e0       	ldi	r24, 0x09	; 9
     cec:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     cee:	87 b7       	in	r24, 0x37	; 55
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     cf4:	78 94       	sei
     cf6:	08 95       	ret

00000cf8 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     cf8:	87 b7       	in	r24, 0x37	; 55
     cfa:	8f 77       	andi	r24, 0x7F	; 127
     cfc:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     cfe:	85 b5       	in	r24, 0x25	; 37
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	85 bd       	out	0x25, r24	; 37
     d04:	08 95       	ret

00000d06 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     d0c:	8a ef       	ldi	r24, 0xFA	; 250
     d0e:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     d10:	10 92 9b 02 	sts	0x029B, r1
     d14:	10 92 9a 02 	sts	0x029A, r1
	timer2_start(0);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	d9 df       	rcall	.-78     	; 0xcce <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     d1c:	20 91 9a 02 	lds	r18, 0x029A
     d20:	30 91 9b 02 	lds	r19, 0x029B
     d24:	2c 17       	cp	r18, r28
     d26:	3d 07       	cpc	r19, r29
     d28:	c8 f3       	brcs	.-14     	; 0xd1c <wait_ms+0x16>

	timer2_stop();
     d2a:	e6 df       	rcall	.-52     	; 0xcf8 <timer2_stop>
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
	timer2_tick++;
     d40:	80 91 9a 02 	lds	r24, 0x029A
     d44:	90 91 9b 02 	lds	r25, 0x029B
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	90 93 9b 02 	sts	0x029B, r25
     d4e:	80 93 9a 02 	sts	0x029A, r24
}
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <__subsf3>:
     d60:	50 58       	subi	r21, 0x80	; 128

00000d62 <__addsf3>:
     d62:	bb 27       	eor	r27, r27
     d64:	aa 27       	eor	r26, r26
     d66:	0e d0       	rcall	.+28     	; 0xd84 <__addsf3x>
     d68:	75 c1       	rjmp	.+746    	; 0x1054 <__fp_round>
     d6a:	66 d1       	rcall	.+716    	; 0x1038 <__fp_pscA>
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <__addsf3+0x18>
     d6e:	6b d1       	rcall	.+726    	; 0x1046 <__fp_pscB>
     d70:	20 f0       	brcs	.+8      	; 0xd7a <__addsf3+0x18>
     d72:	31 f4       	brne	.+12     	; 0xd80 <__addsf3+0x1e>
     d74:	9f 3f       	cpi	r25, 0xFF	; 255
     d76:	11 f4       	brne	.+4      	; 0xd7c <__addsf3+0x1a>
     d78:	1e f4       	brtc	.+6      	; 0xd80 <__addsf3+0x1e>
     d7a:	5b c1       	rjmp	.+694    	; 0x1032 <__fp_nan>
     d7c:	0e f4       	brtc	.+2      	; 0xd80 <__addsf3+0x1e>
     d7e:	e0 95       	com	r30
     d80:	e7 fb       	bst	r30, 7
     d82:	51 c1       	rjmp	.+674    	; 0x1026 <__fp_inf>

00000d84 <__addsf3x>:
     d84:	e9 2f       	mov	r30, r25
     d86:	77 d1       	rcall	.+750    	; 0x1076 <__fp_split3>
     d88:	80 f3       	brcs	.-32     	; 0xd6a <__addsf3+0x8>
     d8a:	ba 17       	cp	r27, r26
     d8c:	62 07       	cpc	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	95 07       	cpc	r25, r21
     d94:	18 f0       	brcs	.+6      	; 0xd9c <__addsf3x+0x18>
     d96:	71 f4       	brne	.+28     	; 0xdb4 <__addsf3x+0x30>
     d98:	9e f5       	brtc	.+102    	; 0xe00 <__addsf3x+0x7c>
     d9a:	8f c1       	rjmp	.+798    	; 0x10ba <__fp_zero>
     d9c:	0e f4       	brtc	.+2      	; 0xda0 <__addsf3x+0x1c>
     d9e:	e0 95       	com	r30
     da0:	0b 2e       	mov	r0, r27
     da2:	ba 2f       	mov	r27, r26
     da4:	a0 2d       	mov	r26, r0
     da6:	0b 01       	movw	r0, r22
     da8:	b9 01       	movw	r22, r18
     daa:	90 01       	movw	r18, r0
     dac:	0c 01       	movw	r0, r24
     dae:	ca 01       	movw	r24, r20
     db0:	a0 01       	movw	r20, r0
     db2:	11 24       	eor	r1, r1
     db4:	ff 27       	eor	r31, r31
     db6:	59 1b       	sub	r21, r25
     db8:	99 f0       	breq	.+38     	; 0xde0 <__addsf3x+0x5c>
     dba:	59 3f       	cpi	r21, 0xF9	; 249
     dbc:	50 f4       	brcc	.+20     	; 0xdd2 <__addsf3x+0x4e>
     dbe:	50 3e       	cpi	r21, 0xE0	; 224
     dc0:	68 f1       	brcs	.+90     	; 0xe1c <__addsf3x+0x98>
     dc2:	1a 16       	cp	r1, r26
     dc4:	f0 40       	sbci	r31, 0x00	; 0
     dc6:	a2 2f       	mov	r26, r18
     dc8:	23 2f       	mov	r18, r19
     dca:	34 2f       	mov	r19, r20
     dcc:	44 27       	eor	r20, r20
     dce:	58 5f       	subi	r21, 0xF8	; 248
     dd0:	f3 cf       	rjmp	.-26     	; 0xdb8 <__addsf3x+0x34>
     dd2:	46 95       	lsr	r20
     dd4:	37 95       	ror	r19
     dd6:	27 95       	ror	r18
     dd8:	a7 95       	ror	r26
     dda:	f0 40       	sbci	r31, 0x00	; 0
     ddc:	53 95       	inc	r21
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__addsf3x+0x4e>
     de0:	7e f4       	brtc	.+30     	; 0xe00 <__addsf3x+0x7c>
     de2:	1f 16       	cp	r1, r31
     de4:	ba 0b       	sbc	r27, r26
     de6:	62 0b       	sbc	r22, r18
     de8:	73 0b       	sbc	r23, r19
     dea:	84 0b       	sbc	r24, r20
     dec:	ba f0       	brmi	.+46     	; 0xe1c <__addsf3x+0x98>
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	a1 f0       	breq	.+40     	; 0xe1a <__addsf3x+0x96>
     df2:	ff 0f       	add	r31, r31
     df4:	bb 1f       	adc	r27, r27
     df6:	66 1f       	adc	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	c2 f7       	brpl	.-16     	; 0xdee <__addsf3x+0x6a>
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <__addsf3x+0x98>
     e00:	ba 0f       	add	r27, r26
     e02:	62 1f       	adc	r22, r18
     e04:	73 1f       	adc	r23, r19
     e06:	84 1f       	adc	r24, r20
     e08:	48 f4       	brcc	.+18     	; 0xe1c <__addsf3x+0x98>
     e0a:	87 95       	ror	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	f7 95       	ror	r31
     e14:	9e 3f       	cpi	r25, 0xFE	; 254
     e16:	08 f0       	brcs	.+2      	; 0xe1a <__addsf3x+0x96>
     e18:	b3 cf       	rjmp	.-154    	; 0xd80 <__addsf3+0x1e>
     e1a:	93 95       	inc	r25
     e1c:	88 0f       	add	r24, r24
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <__addsf3x+0x9e>
     e20:	99 27       	eor	r25, r25
     e22:	ee 0f       	add	r30, r30
     e24:	97 95       	ror	r25
     e26:	87 95       	ror	r24
     e28:	08 95       	ret

00000e2a <__cmpsf2>:
     e2a:	d9 d0       	rcall	.+434    	; 0xfde <__fp_cmp>
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <__cmpsf2+0x6>
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	08 95       	ret

00000e32 <__divsf3>:
     e32:	0c d0       	rcall	.+24     	; 0xe4c <__divsf3x>
     e34:	0f c1       	rjmp	.+542    	; 0x1054 <__fp_round>
     e36:	07 d1       	rcall	.+526    	; 0x1046 <__fp_pscB>
     e38:	40 f0       	brcs	.+16     	; 0xe4a <__divsf3+0x18>
     e3a:	fe d0       	rcall	.+508    	; 0x1038 <__fp_pscA>
     e3c:	30 f0       	brcs	.+12     	; 0xe4a <__divsf3+0x18>
     e3e:	21 f4       	brne	.+8      	; 0xe48 <__divsf3+0x16>
     e40:	5f 3f       	cpi	r21, 0xFF	; 255
     e42:	19 f0       	breq	.+6      	; 0xe4a <__divsf3+0x18>
     e44:	f0 c0       	rjmp	.+480    	; 0x1026 <__fp_inf>
     e46:	51 11       	cpse	r21, r1
     e48:	39 c1       	rjmp	.+626    	; 0x10bc <__fp_szero>
     e4a:	f3 c0       	rjmp	.+486    	; 0x1032 <__fp_nan>

00000e4c <__divsf3x>:
     e4c:	14 d1       	rcall	.+552    	; 0x1076 <__fp_split3>
     e4e:	98 f3       	brcs	.-26     	; 0xe36 <__divsf3+0x4>

00000e50 <__divsf3_pse>:
     e50:	99 23       	and	r25, r25
     e52:	c9 f3       	breq	.-14     	; 0xe46 <__divsf3+0x14>
     e54:	55 23       	and	r21, r21
     e56:	b1 f3       	breq	.-20     	; 0xe44 <__divsf3+0x12>
     e58:	95 1b       	sub	r25, r21
     e5a:	55 0b       	sbc	r21, r21
     e5c:	bb 27       	eor	r27, r27
     e5e:	aa 27       	eor	r26, r26
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	38 f0       	brcs	.+14     	; 0xe76 <__divsf3_pse+0x26>
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	44 1f       	adc	r20, r20
     e72:	aa 1f       	adc	r26, r26
     e74:	a9 f3       	breq	.-22     	; 0xe60 <__divsf3_pse+0x10>
     e76:	33 d0       	rcall	.+102    	; 0xede <__divsf3_pse+0x8e>
     e78:	0e 2e       	mov	r0, r30
     e7a:	3a f0       	brmi	.+14     	; 0xe8a <__divsf3_pse+0x3a>
     e7c:	e0 e8       	ldi	r30, 0x80	; 128
     e7e:	30 d0       	rcall	.+96     	; 0xee0 <__divsf3_pse+0x90>
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	e6 95       	lsr	r30
     e86:	00 1c       	adc	r0, r0
     e88:	ca f7       	brpl	.-14     	; 0xe7c <__divsf3_pse+0x2c>
     e8a:	29 d0       	rcall	.+82     	; 0xede <__divsf3_pse+0x8e>
     e8c:	fe 2f       	mov	r31, r30
     e8e:	27 d0       	rcall	.+78     	; 0xede <__divsf3_pse+0x8e>
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	bb 1f       	adc	r27, r27
     e98:	26 17       	cp	r18, r22
     e9a:	37 07       	cpc	r19, r23
     e9c:	48 07       	cpc	r20, r24
     e9e:	ab 07       	cpc	r26, r27
     ea0:	b0 e8       	ldi	r27, 0x80	; 128
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__divsf3_pse+0x56>
     ea4:	bb 0b       	sbc	r27, r27
     ea6:	80 2d       	mov	r24, r0
     ea8:	bf 01       	movw	r22, r30
     eaa:	ff 27       	eor	r31, r31
     eac:	93 58       	subi	r25, 0x83	; 131
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	2a f0       	brmi	.+10     	; 0xebc <__divsf3_pse+0x6c>
     eb2:	9e 3f       	cpi	r25, 0xFE	; 254
     eb4:	51 05       	cpc	r21, r1
     eb6:	68 f0       	brcs	.+26     	; 0xed2 <__divsf3_pse+0x82>
     eb8:	b6 c0       	rjmp	.+364    	; 0x1026 <__fp_inf>
     eba:	00 c1       	rjmp	.+512    	; 0x10bc <__fp_szero>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	ec f3       	brlt	.-6      	; 0xeba <__divsf3_pse+0x6a>
     ec0:	98 3e       	cpi	r25, 0xE8	; 232
     ec2:	dc f3       	brlt	.-10     	; 0xeba <__divsf3_pse+0x6a>
     ec4:	86 95       	lsr	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	f7 95       	ror	r31
     ece:	9f 5f       	subi	r25, 0xFF	; 255
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__divsf3_pse+0x74>
     ed2:	88 0f       	add	r24, r24
     ed4:	91 1d       	adc	r25, r1
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret
     ede:	e1 e0       	ldi	r30, 0x01	; 1
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	bb 1f       	adc	r27, r27
     ee8:	62 17       	cp	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	ba 07       	cpc	r27, r26
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__divsf3_pse+0xaa>
     ef2:	62 1b       	sub	r22, r18
     ef4:	73 0b       	sbc	r23, r19
     ef6:	84 0b       	sbc	r24, r20
     ef8:	ba 0b       	sbc	r27, r26
     efa:	ee 1f       	adc	r30, r30
     efc:	88 f7       	brcc	.-30     	; 0xee0 <__divsf3_pse+0x90>
     efe:	e0 95       	com	r30
     f00:	08 95       	ret

00000f02 <__fixsfsi>:
     f02:	04 d0       	rcall	.+8      	; 0xf0c <__fixunssfsi>
     f04:	68 94       	set
     f06:	b1 11       	cpse	r27, r1
     f08:	d9 c0       	rjmp	.+434    	; 0x10bc <__fp_szero>
     f0a:	08 95       	ret

00000f0c <__fixunssfsi>:
     f0c:	bc d0       	rcall	.+376    	; 0x1086 <__fp_splitA>
     f0e:	88 f0       	brcs	.+34     	; 0xf32 <__fixunssfsi+0x26>
     f10:	9f 57       	subi	r25, 0x7F	; 127
     f12:	90 f0       	brcs	.+36     	; 0xf38 <__fixunssfsi+0x2c>
     f14:	b9 2f       	mov	r27, r25
     f16:	99 27       	eor	r25, r25
     f18:	b7 51       	subi	r27, 0x17	; 23
     f1a:	a0 f0       	brcs	.+40     	; 0xf44 <__fixunssfsi+0x38>
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <__fixunssfsi+0x46>
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	1a f0       	brmi	.+6      	; 0xf2e <__fixunssfsi+0x22>
     f28:	ba 95       	dec	r27
     f2a:	c9 f7       	brne	.-14     	; 0xf1e <__fixunssfsi+0x12>
     f2c:	12 c0       	rjmp	.+36     	; 0xf52 <__fixunssfsi+0x46>
     f2e:	b1 30       	cpi	r27, 0x01	; 1
     f30:	81 f0       	breq	.+32     	; 0xf52 <__fixunssfsi+0x46>
     f32:	c3 d0       	rcall	.+390    	; 0x10ba <__fp_zero>
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	08 95       	ret
     f38:	c0 c0       	rjmp	.+384    	; 0x10ba <__fp_zero>
     f3a:	67 2f       	mov	r22, r23
     f3c:	78 2f       	mov	r23, r24
     f3e:	88 27       	eor	r24, r24
     f40:	b8 5f       	subi	r27, 0xF8	; 248
     f42:	39 f0       	breq	.+14     	; 0xf52 <__fixunssfsi+0x46>
     f44:	b9 3f       	cpi	r27, 0xF9	; 249
     f46:	cc f3       	brlt	.-14     	; 0xf3a <__fixunssfsi+0x2e>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b3 95       	inc	r27
     f50:	d9 f7       	brne	.-10     	; 0xf48 <__fixunssfsi+0x3c>
     f52:	3e f4       	brtc	.+14     	; 0xf62 <__fixunssfsi+0x56>
     f54:	90 95       	com	r25
     f56:	80 95       	com	r24
     f58:	70 95       	com	r23
     f5a:	61 95       	neg	r22
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	08 95       	ret

00000f64 <__floatunsisf>:
     f64:	e8 94       	clt
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <__floatsisf+0x12>

00000f68 <__floatsisf>:
     f68:	97 fb       	bst	r25, 7
     f6a:	3e f4       	brtc	.+14     	; 0xf7a <__floatsisf+0x12>
     f6c:	90 95       	com	r25
     f6e:	80 95       	com	r24
     f70:	70 95       	com	r23
     f72:	61 95       	neg	r22
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f 4f       	sbci	r24, 0xFF	; 255
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	99 23       	and	r25, r25
     f7c:	a9 f0       	breq	.+42     	; 0xfa8 <__floatsisf+0x40>
     f7e:	f9 2f       	mov	r31, r25
     f80:	96 e9       	ldi	r25, 0x96	; 150
     f82:	bb 27       	eor	r27, r27
     f84:	93 95       	inc	r25
     f86:	f6 95       	lsr	r31
     f88:	87 95       	ror	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b7 95       	ror	r27
     f90:	f1 11       	cpse	r31, r1
     f92:	f8 cf       	rjmp	.-16     	; 0xf84 <__floatsisf+0x1c>
     f94:	fa f4       	brpl	.+62     	; 0xfd4 <__floatsisf+0x6c>
     f96:	bb 0f       	add	r27, r27
     f98:	11 f4       	brne	.+4      	; 0xf9e <__floatsisf+0x36>
     f9a:	60 ff       	sbrs	r22, 0
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__floatsisf+0x6c>
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <__floatsisf+0x6c>
     fa8:	88 23       	and	r24, r24
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__floatsisf+0x48>
     fac:	96 e9       	ldi	r25, 0x96	; 150
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <__floatsisf+0x6a>
     fb0:	77 23       	and	r23, r23
     fb2:	21 f0       	breq	.+8      	; 0xfbc <__floatsisf+0x54>
     fb4:	9e e8       	ldi	r25, 0x8E	; 142
     fb6:	87 2f       	mov	r24, r23
     fb8:	76 2f       	mov	r23, r22
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <__floatsisf+0x5e>
     fbc:	66 23       	and	r22, r22
     fbe:	71 f0       	breq	.+28     	; 0xfdc <__floatsisf+0x74>
     fc0:	96 e8       	ldi	r25, 0x86	; 134
     fc2:	86 2f       	mov	r24, r22
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	2a f0       	brmi	.+10     	; 0xfd4 <__floatsisf+0x6c>
     fca:	9a 95       	dec	r25
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	da f7       	brpl	.-10     	; 0xfca <__floatsisf+0x62>
     fd4:	88 0f       	add	r24, r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__fp_cmp>:
     fde:	99 0f       	add	r25, r25
     fe0:	00 08       	sbc	r0, r0
     fe2:	55 0f       	add	r21, r21
     fe4:	aa 0b       	sbc	r26, r26
     fe6:	e0 e8       	ldi	r30, 0x80	; 128
     fe8:	fe ef       	ldi	r31, 0xFE	; 254
     fea:	16 16       	cp	r1, r22
     fec:	17 06       	cpc	r1, r23
     fee:	e8 07       	cpc	r30, r24
     ff0:	f9 07       	cpc	r31, r25
     ff2:	c0 f0       	brcs	.+48     	; 0x1024 <__fp_cmp+0x46>
     ff4:	12 16       	cp	r1, r18
     ff6:	13 06       	cpc	r1, r19
     ff8:	e4 07       	cpc	r30, r20
     ffa:	f5 07       	cpc	r31, r21
     ffc:	98 f0       	brcs	.+38     	; 0x1024 <__fp_cmp+0x46>
     ffe:	62 1b       	sub	r22, r18
    1000:	73 0b       	sbc	r23, r19
    1002:	84 0b       	sbc	r24, r20
    1004:	95 0b       	sbc	r25, r21
    1006:	39 f4       	brne	.+14     	; 0x1016 <__fp_cmp+0x38>
    1008:	0a 26       	eor	r0, r26
    100a:	61 f0       	breq	.+24     	; 0x1024 <__fp_cmp+0x46>
    100c:	23 2b       	or	r18, r19
    100e:	24 2b       	or	r18, r20
    1010:	25 2b       	or	r18, r21
    1012:	21 f4       	brne	.+8      	; 0x101c <__fp_cmp+0x3e>
    1014:	08 95       	ret
    1016:	0a 26       	eor	r0, r26
    1018:	09 f4       	brne	.+2      	; 0x101c <__fp_cmp+0x3e>
    101a:	a1 40       	sbci	r26, 0x01	; 1
    101c:	a6 95       	lsr	r26
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	81 1d       	adc	r24, r1
    1022:	81 1d       	adc	r24, r1
    1024:	08 95       	ret

00001026 <__fp_inf>:
    1026:	97 f9       	bld	r25, 7
    1028:	9f 67       	ori	r25, 0x7F	; 127
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	08 95       	ret

00001032 <__fp_nan>:
    1032:	9f ef       	ldi	r25, 0xFF	; 255
    1034:	80 ec       	ldi	r24, 0xC0	; 192
    1036:	08 95       	ret

00001038 <__fp_pscA>:
    1038:	00 24       	eor	r0, r0
    103a:	0a 94       	dec	r0
    103c:	16 16       	cp	r1, r22
    103e:	17 06       	cpc	r1, r23
    1040:	18 06       	cpc	r1, r24
    1042:	09 06       	cpc	r0, r25
    1044:	08 95       	ret

00001046 <__fp_pscB>:
    1046:	00 24       	eor	r0, r0
    1048:	0a 94       	dec	r0
    104a:	12 16       	cp	r1, r18
    104c:	13 06       	cpc	r1, r19
    104e:	14 06       	cpc	r1, r20
    1050:	05 06       	cpc	r0, r21
    1052:	08 95       	ret

00001054 <__fp_round>:
    1054:	09 2e       	mov	r0, r25
    1056:	03 94       	inc	r0
    1058:	00 0c       	add	r0, r0
    105a:	11 f4       	brne	.+4      	; 0x1060 <__fp_round+0xc>
    105c:	88 23       	and	r24, r24
    105e:	52 f0       	brmi	.+20     	; 0x1074 <__fp_round+0x20>
    1060:	bb 0f       	add	r27, r27
    1062:	40 f4       	brcc	.+16     	; 0x1074 <__fp_round+0x20>
    1064:	bf 2b       	or	r27, r31
    1066:	11 f4       	brne	.+4      	; 0x106c <__fp_round+0x18>
    1068:	60 ff       	sbrs	r22, 0
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__fp_round+0x20>
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8f 4f       	sbci	r24, 0xFF	; 255
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	08 95       	ret

00001076 <__fp_split3>:
    1076:	57 fd       	sbrc	r21, 7
    1078:	90 58       	subi	r25, 0x80	; 128
    107a:	44 0f       	add	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	59 f0       	breq	.+22     	; 0x1096 <__fp_splitA+0x10>
    1080:	5f 3f       	cpi	r21, 0xFF	; 255
    1082:	71 f0       	breq	.+28     	; 0x10a0 <__fp_splitA+0x1a>
    1084:	47 95       	ror	r20

00001086 <__fp_splitA>:
    1086:	88 0f       	add	r24, r24
    1088:	97 fb       	bst	r25, 7
    108a:	99 1f       	adc	r25, r25
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_splitA+0x20>
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	79 f0       	breq	.+30     	; 0x10b0 <__fp_splitA+0x2a>
    1092:	87 95       	ror	r24
    1094:	08 95       	ret
    1096:	12 16       	cp	r1, r18
    1098:	13 06       	cpc	r1, r19
    109a:	14 06       	cpc	r1, r20
    109c:	55 1f       	adc	r21, r21
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <__fp_split3+0xe>
    10a0:	46 95       	lsr	r20
    10a2:	f1 df       	rcall	.-30     	; 0x1086 <__fp_splitA>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__fp_splitA+0x30>
    10a6:	16 16       	cp	r1, r22
    10a8:	17 06       	cpc	r1, r23
    10aa:	18 06       	cpc	r1, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	f1 cf       	rjmp	.-30     	; 0x1092 <__fp_splitA+0xc>
    10b0:	86 95       	lsr	r24
    10b2:	71 05       	cpc	r23, r1
    10b4:	61 05       	cpc	r22, r1
    10b6:	08 94       	sec
    10b8:	08 95       	ret

000010ba <__fp_zero>:
    10ba:	e8 94       	clt

000010bc <__fp_szero>:
    10bc:	bb 27       	eor	r27, r27
    10be:	66 27       	eor	r22, r22
    10c0:	77 27       	eor	r23, r23
    10c2:	cb 01       	movw	r24, r22
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__mulsf3>:
    10c8:	0b d0       	rcall	.+22     	; 0x10e0 <__mulsf3x>
    10ca:	c4 cf       	rjmp	.-120    	; 0x1054 <__fp_round>
    10cc:	b5 df       	rcall	.-150    	; 0x1038 <__fp_pscA>
    10ce:	28 f0       	brcs	.+10     	; 0x10da <__mulsf3+0x12>
    10d0:	ba df       	rcall	.-140    	; 0x1046 <__fp_pscB>
    10d2:	18 f0       	brcs	.+6      	; 0x10da <__mulsf3+0x12>
    10d4:	95 23       	and	r25, r21
    10d6:	09 f0       	breq	.+2      	; 0x10da <__mulsf3+0x12>
    10d8:	a6 cf       	rjmp	.-180    	; 0x1026 <__fp_inf>
    10da:	ab cf       	rjmp	.-170    	; 0x1032 <__fp_nan>
    10dc:	11 24       	eor	r1, r1
    10de:	ee cf       	rjmp	.-36     	; 0x10bc <__fp_szero>

000010e0 <__mulsf3x>:
    10e0:	ca df       	rcall	.-108    	; 0x1076 <__fp_split3>
    10e2:	a0 f3       	brcs	.-24     	; 0x10cc <__mulsf3+0x4>

000010e4 <__mulsf3_pse>:
    10e4:	95 9f       	mul	r25, r21
    10e6:	d1 f3       	breq	.-12     	; 0x10dc <__mulsf3+0x14>
    10e8:	95 0f       	add	r25, r21
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	55 1f       	adc	r21, r21
    10ee:	62 9f       	mul	r22, r18
    10f0:	f0 01       	movw	r30, r0
    10f2:	72 9f       	mul	r23, r18
    10f4:	bb 27       	eor	r27, r27
    10f6:	f0 0d       	add	r31, r0
    10f8:	b1 1d       	adc	r27, r1
    10fa:	63 9f       	mul	r22, r19
    10fc:	aa 27       	eor	r26, r26
    10fe:	f0 0d       	add	r31, r0
    1100:	b1 1d       	adc	r27, r1
    1102:	aa 1f       	adc	r26, r26
    1104:	64 9f       	mul	r22, r20
    1106:	66 27       	eor	r22, r22
    1108:	b0 0d       	add	r27, r0
    110a:	a1 1d       	adc	r26, r1
    110c:	66 1f       	adc	r22, r22
    110e:	82 9f       	mul	r24, r18
    1110:	22 27       	eor	r18, r18
    1112:	b0 0d       	add	r27, r0
    1114:	a1 1d       	adc	r26, r1
    1116:	62 1f       	adc	r22, r18
    1118:	73 9f       	mul	r23, r19
    111a:	b0 0d       	add	r27, r0
    111c:	a1 1d       	adc	r26, r1
    111e:	62 1f       	adc	r22, r18
    1120:	83 9f       	mul	r24, r19
    1122:	a0 0d       	add	r26, r0
    1124:	61 1d       	adc	r22, r1
    1126:	22 1f       	adc	r18, r18
    1128:	74 9f       	mul	r23, r20
    112a:	33 27       	eor	r19, r19
    112c:	a0 0d       	add	r26, r0
    112e:	61 1d       	adc	r22, r1
    1130:	23 1f       	adc	r18, r19
    1132:	84 9f       	mul	r24, r20
    1134:	60 0d       	add	r22, r0
    1136:	21 1d       	adc	r18, r1
    1138:	82 2f       	mov	r24, r18
    113a:	76 2f       	mov	r23, r22
    113c:	6a 2f       	mov	r22, r26
    113e:	11 24       	eor	r1, r1
    1140:	9f 57       	subi	r25, 0x7F	; 127
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	8a f0       	brmi	.+34     	; 0x1168 <__stack+0x69>
    1146:	e1 f0       	breq	.+56     	; 0x1180 <__stack+0x81>
    1148:	88 23       	and	r24, r24
    114a:	4a f0       	brmi	.+18     	; 0x115e <__stack+0x5f>
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	bb 1f       	adc	r27, r27
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	88 1f       	adc	r24, r24
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	50 40       	sbci	r21, 0x00	; 0
    115c:	a9 f7       	brne	.-22     	; 0x1148 <__stack+0x49>
    115e:	9e 3f       	cpi	r25, 0xFE	; 254
    1160:	51 05       	cpc	r21, r1
    1162:	70 f0       	brcs	.+28     	; 0x1180 <__stack+0x81>
    1164:	60 cf       	rjmp	.-320    	; 0x1026 <__fp_inf>
    1166:	aa cf       	rjmp	.-172    	; 0x10bc <__fp_szero>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	ec f3       	brlt	.-6      	; 0x1166 <__stack+0x67>
    116c:	98 3e       	cpi	r25, 0xE8	; 232
    116e:	dc f3       	brlt	.-10     	; 0x1166 <__stack+0x67>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	e7 95       	ror	r30
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	c1 f7       	brne	.-16     	; 0x1170 <__stack+0x71>
    1180:	fe 2b       	or	r31, r30
    1182:	88 0f       	add	r24, r24
    1184:	91 1d       	adc	r25, r1
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <__divmodhi4>:
    118e:	97 fb       	bst	r25, 7
    1190:	07 2e       	mov	r0, r23
    1192:	16 f4       	brtc	.+4      	; 0x1198 <__divmodhi4+0xa>
    1194:	00 94       	com	r0
    1196:	06 d0       	rcall	.+12     	; 0x11a4 <__divmodhi4_neg1>
    1198:	77 fd       	sbrc	r23, 7
    119a:	08 d0       	rcall	.+16     	; 0x11ac <__divmodhi4_neg2>
    119c:	0b d0       	rcall	.+22     	; 0x11b4 <__udivmodhi4>
    119e:	07 fc       	sbrc	r0, 7
    11a0:	05 d0       	rcall	.+10     	; 0x11ac <__divmodhi4_neg2>
    11a2:	3e f4       	brtc	.+14     	; 0x11b2 <__divmodhi4_exit>

000011a4 <__divmodhi4_neg1>:
    11a4:	90 95       	com	r25
    11a6:	81 95       	neg	r24
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	08 95       	ret

000011ac <__divmodhi4_neg2>:
    11ac:	70 95       	com	r23
    11ae:	61 95       	neg	r22
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255

000011b2 <__divmodhi4_exit>:
    11b2:	08 95       	ret

000011b4 <__udivmodhi4>:
    11b4:	aa 1b       	sub	r26, r26
    11b6:	bb 1b       	sub	r27, r27
    11b8:	51 e1       	ldi	r21, 0x11	; 17
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <__udivmodhi4_ep>

000011bc <__udivmodhi4_loop>:
    11bc:	aa 1f       	adc	r26, r26
    11be:	bb 1f       	adc	r27, r27
    11c0:	a6 17       	cp	r26, r22
    11c2:	b7 07       	cpc	r27, r23
    11c4:	10 f0       	brcs	.+4      	; 0x11ca <__udivmodhi4_ep>
    11c6:	a6 1b       	sub	r26, r22
    11c8:	b7 0b       	sbc	r27, r23

000011ca <__udivmodhi4_ep>:
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	5a 95       	dec	r21
    11d0:	a9 f7       	brne	.-22     	; 0x11bc <__udivmodhi4_loop>
    11d2:	80 95       	com	r24
    11d4:	90 95       	com	r25
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	08 95       	ret

000011dc <calloc>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	86 9f       	mul	r24, r22
    11e6:	80 01       	movw	r16, r0
    11e8:	87 9f       	mul	r24, r23
    11ea:	10 0d       	add	r17, r0
    11ec:	96 9f       	mul	r25, r22
    11ee:	10 0d       	add	r17, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	c8 01       	movw	r24, r16
    11f4:	0d d0       	rcall	.+26     	; 0x1210 <malloc>
    11f6:	ec 01       	movw	r28, r24
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	21 f0       	breq	.+8      	; 0x1204 <calloc+0x28>
    11fc:	a8 01       	movw	r20, r16
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	2d d1       	rcall	.+602    	; 0x145e <memset>
    1204:	ce 01       	movw	r24, r28
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	08 95       	ret

00001210 <malloc>:
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	91 05       	cpc	r25, r1
    1218:	10 f4       	brcc	.+4      	; 0x121e <malloc+0xe>
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	e0 91 9e 02 	lds	r30, 0x029E
    1222:	f0 91 9f 02 	lds	r31, 0x029F
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	30 97       	sbiw	r30, 0x00	; 0
    1230:	39 f1       	breq	.+78     	; 0x1280 <malloc+0x70>
    1232:	40 81       	ld	r20, Z
    1234:	51 81       	ldd	r21, Z+1	; 0x01
    1236:	48 17       	cp	r20, r24
    1238:	59 07       	cpc	r21, r25
    123a:	b8 f0       	brcs	.+46     	; 0x126a <malloc+0x5a>
    123c:	48 17       	cp	r20, r24
    123e:	59 07       	cpc	r21, r25
    1240:	71 f4       	brne	.+28     	; 0x125e <malloc+0x4e>
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	10 97       	sbiw	r26, 0x00	; 0
    1248:	29 f0       	breq	.+10     	; 0x1254 <malloc+0x44>
    124a:	13 96       	adiw	r26, 0x03	; 3
    124c:	9c 93       	st	X, r25
    124e:	8e 93       	st	-X, r24
    1250:	12 97       	sbiw	r26, 0x02	; 2
    1252:	2c c0       	rjmp	.+88     	; 0x12ac <malloc+0x9c>
    1254:	90 93 9f 02 	sts	0x029F, r25
    1258:	80 93 9e 02 	sts	0x029E, r24
    125c:	27 c0       	rjmp	.+78     	; 0x12ac <malloc+0x9c>
    125e:	21 15       	cp	r18, r1
    1260:	31 05       	cpc	r19, r1
    1262:	31 f0       	breq	.+12     	; 0x1270 <malloc+0x60>
    1264:	42 17       	cp	r20, r18
    1266:	53 07       	cpc	r21, r19
    1268:	18 f0       	brcs	.+6      	; 0x1270 <malloc+0x60>
    126a:	a9 01       	movw	r20, r18
    126c:	db 01       	movw	r26, r22
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <malloc+0x62>
    1270:	ef 01       	movw	r28, r30
    1272:	9a 01       	movw	r18, r20
    1274:	bd 01       	movw	r22, r26
    1276:	df 01       	movw	r26, r30
    1278:	02 80       	ldd	r0, Z+2	; 0x02
    127a:	f3 81       	ldd	r31, Z+3	; 0x03
    127c:	e0 2d       	mov	r30, r0
    127e:	d7 cf       	rjmp	.-82     	; 0x122e <malloc+0x1e>
    1280:	21 15       	cp	r18, r1
    1282:	31 05       	cpc	r19, r1
    1284:	f9 f0       	breq	.+62     	; 0x12c4 <malloc+0xb4>
    1286:	28 1b       	sub	r18, r24
    1288:	39 0b       	sbc	r19, r25
    128a:	24 30       	cpi	r18, 0x04	; 4
    128c:	31 05       	cpc	r19, r1
    128e:	80 f4       	brcc	.+32     	; 0x12b0 <malloc+0xa0>
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	61 15       	cp	r22, r1
    1296:	71 05       	cpc	r23, r1
    1298:	21 f0       	breq	.+8      	; 0x12a2 <malloc+0x92>
    129a:	fb 01       	movw	r30, r22
    129c:	93 83       	std	Z+3, r25	; 0x03
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <malloc+0x9a>
    12a2:	90 93 9f 02 	sts	0x029F, r25
    12a6:	80 93 9e 02 	sts	0x029E, r24
    12aa:	fe 01       	movw	r30, r28
    12ac:	32 96       	adiw	r30, 0x02	; 2
    12ae:	44 c0       	rjmp	.+136    	; 0x1338 <malloc+0x128>
    12b0:	fe 01       	movw	r30, r28
    12b2:	e2 0f       	add	r30, r18
    12b4:	f3 1f       	adc	r31, r19
    12b6:	81 93       	st	Z+, r24
    12b8:	91 93       	st	Z+, r25
    12ba:	22 50       	subi	r18, 0x02	; 2
    12bc:	31 09       	sbc	r19, r1
    12be:	39 83       	std	Y+1, r19	; 0x01
    12c0:	28 83       	st	Y, r18
    12c2:	3a c0       	rjmp	.+116    	; 0x1338 <malloc+0x128>
    12c4:	20 91 9c 02 	lds	r18, 0x029C
    12c8:	30 91 9d 02 	lds	r19, 0x029D
    12cc:	23 2b       	or	r18, r19
    12ce:	41 f4       	brne	.+16     	; 0x12e0 <malloc+0xd0>
    12d0:	20 91 02 01 	lds	r18, 0x0102
    12d4:	30 91 03 01 	lds	r19, 0x0103
    12d8:	30 93 9d 02 	sts	0x029D, r19
    12dc:	20 93 9c 02 	sts	0x029C, r18
    12e0:	20 91 00 01 	lds	r18, 0x0100
    12e4:	30 91 01 01 	lds	r19, 0x0101
    12e8:	21 15       	cp	r18, r1
    12ea:	31 05       	cpc	r19, r1
    12ec:	41 f4       	brne	.+16     	; 0x12fe <malloc+0xee>
    12ee:	2d b7       	in	r18, 0x3d	; 61
    12f0:	3e b7       	in	r19, 0x3e	; 62
    12f2:	40 91 04 01 	lds	r20, 0x0104
    12f6:	50 91 05 01 	lds	r21, 0x0105
    12fa:	24 1b       	sub	r18, r20
    12fc:	35 0b       	sbc	r19, r21
    12fe:	e0 91 9c 02 	lds	r30, 0x029C
    1302:	f0 91 9d 02 	lds	r31, 0x029D
    1306:	e2 17       	cp	r30, r18
    1308:	f3 07       	cpc	r31, r19
    130a:	a0 f4       	brcc	.+40     	; 0x1334 <malloc+0x124>
    130c:	2e 1b       	sub	r18, r30
    130e:	3f 0b       	sbc	r19, r31
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	78 f0       	brcs	.+30     	; 0x1334 <malloc+0x124>
    1316:	ac 01       	movw	r20, r24
    1318:	4e 5f       	subi	r20, 0xFE	; 254
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	24 17       	cp	r18, r20
    131e:	35 07       	cpc	r19, r21
    1320:	48 f0       	brcs	.+18     	; 0x1334 <malloc+0x124>
    1322:	4e 0f       	add	r20, r30
    1324:	5f 1f       	adc	r21, r31
    1326:	50 93 9d 02 	sts	0x029D, r21
    132a:	40 93 9c 02 	sts	0x029C, r20
    132e:	81 93       	st	Z+, r24
    1330:	91 93       	st	Z+, r25
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <malloc+0x128>
    1334:	e0 e0       	ldi	r30, 0x00	; 0
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	cf 01       	movw	r24, r30
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <free>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	09 f4       	brne	.+2      	; 0x134a <free+0xa>
    1348:	87 c0       	rjmp	.+270    	; 0x1458 <free+0x118>
    134a:	fc 01       	movw	r30, r24
    134c:	32 97       	sbiw	r30, 0x02	; 2
    134e:	13 82       	std	Z+3, r1	; 0x03
    1350:	12 82       	std	Z+2, r1	; 0x02
    1352:	c0 91 9e 02 	lds	r28, 0x029E
    1356:	d0 91 9f 02 	lds	r29, 0x029F
    135a:	20 97       	sbiw	r28, 0x00	; 0
    135c:	81 f4       	brne	.+32     	; 0x137e <free+0x3e>
    135e:	20 81       	ld	r18, Z
    1360:	31 81       	ldd	r19, Z+1	; 0x01
    1362:	28 0f       	add	r18, r24
    1364:	39 1f       	adc	r19, r25
    1366:	80 91 9c 02 	lds	r24, 0x029C
    136a:	90 91 9d 02 	lds	r25, 0x029D
    136e:	82 17       	cp	r24, r18
    1370:	93 07       	cpc	r25, r19
    1372:	79 f5       	brne	.+94     	; 0x13d2 <free+0x92>
    1374:	f0 93 9d 02 	sts	0x029D, r31
    1378:	e0 93 9c 02 	sts	0x029C, r30
    137c:	6d c0       	rjmp	.+218    	; 0x1458 <free+0x118>
    137e:	de 01       	movw	r26, r28
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	ae 17       	cp	r26, r30
    1386:	bf 07       	cpc	r27, r31
    1388:	50 f4       	brcc	.+20     	; 0x139e <free+0x5e>
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	4d 91       	ld	r20, X+
    138e:	5c 91       	ld	r21, X
    1390:	13 97       	sbiw	r26, 0x03	; 3
    1392:	9d 01       	movw	r18, r26
    1394:	41 15       	cp	r20, r1
    1396:	51 05       	cpc	r21, r1
    1398:	09 f1       	breq	.+66     	; 0x13dc <free+0x9c>
    139a:	da 01       	movw	r26, r20
    139c:	f3 cf       	rjmp	.-26     	; 0x1384 <free+0x44>
    139e:	b3 83       	std	Z+3, r27	; 0x03
    13a0:	a2 83       	std	Z+2, r26	; 0x02
    13a2:	40 81       	ld	r20, Z
    13a4:	51 81       	ldd	r21, Z+1	; 0x01
    13a6:	84 0f       	add	r24, r20
    13a8:	95 1f       	adc	r25, r21
    13aa:	8a 17       	cp	r24, r26
    13ac:	9b 07       	cpc	r25, r27
    13ae:	71 f4       	brne	.+28     	; 0x13cc <free+0x8c>
    13b0:	8d 91       	ld	r24, X+
    13b2:	9c 91       	ld	r25, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
    13b6:	84 0f       	add	r24, r20
    13b8:	95 1f       	adc	r25, r21
    13ba:	02 96       	adiw	r24, 0x02	; 2
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
    13c0:	12 96       	adiw	r26, 0x02	; 2
    13c2:	8d 91       	ld	r24, X+
    13c4:	9c 91       	ld	r25, X
    13c6:	13 97       	sbiw	r26, 0x03	; 3
    13c8:	93 83       	std	Z+3, r25	; 0x03
    13ca:	82 83       	std	Z+2, r24	; 0x02
    13cc:	21 15       	cp	r18, r1
    13ce:	31 05       	cpc	r19, r1
    13d0:	29 f4       	brne	.+10     	; 0x13dc <free+0x9c>
    13d2:	f0 93 9f 02 	sts	0x029F, r31
    13d6:	e0 93 9e 02 	sts	0x029E, r30
    13da:	3e c0       	rjmp	.+124    	; 0x1458 <free+0x118>
    13dc:	d9 01       	movw	r26, r18
    13de:	13 96       	adiw	r26, 0x03	; 3
    13e0:	fc 93       	st	X, r31
    13e2:	ee 93       	st	-X, r30
    13e4:	12 97       	sbiw	r26, 0x02	; 2
    13e6:	4d 91       	ld	r20, X+
    13e8:	5d 91       	ld	r21, X+
    13ea:	a4 0f       	add	r26, r20
    13ec:	b5 1f       	adc	r27, r21
    13ee:	ea 17       	cp	r30, r26
    13f0:	fb 07       	cpc	r31, r27
    13f2:	79 f4       	brne	.+30     	; 0x1412 <free+0xd2>
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	84 0f       	add	r24, r20
    13fa:	95 1f       	adc	r25, r21
    13fc:	02 96       	adiw	r24, 0x02	; 2
    13fe:	d9 01       	movw	r26, r18
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	13 96       	adiw	r26, 0x03	; 3
    140c:	9c 93       	st	X, r25
    140e:	8e 93       	st	-X, r24
    1410:	12 97       	sbiw	r26, 0x02	; 2
    1412:	e0 e0       	ldi	r30, 0x00	; 0
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	19 f0       	breq	.+6      	; 0x1424 <free+0xe4>
    141e:	fe 01       	movw	r30, r28
    1420:	ec 01       	movw	r28, r24
    1422:	f9 cf       	rjmp	.-14     	; 0x1416 <free+0xd6>
    1424:	ce 01       	movw	r24, r28
    1426:	02 96       	adiw	r24, 0x02	; 2
    1428:	28 81       	ld	r18, Y
    142a:	39 81       	ldd	r19, Y+1	; 0x01
    142c:	82 0f       	add	r24, r18
    142e:	93 1f       	adc	r25, r19
    1430:	20 91 9c 02 	lds	r18, 0x029C
    1434:	30 91 9d 02 	lds	r19, 0x029D
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	69 f4       	brne	.+26     	; 0x1458 <free+0x118>
    143e:	30 97       	sbiw	r30, 0x00	; 0
    1440:	29 f4       	brne	.+10     	; 0x144c <free+0x10c>
    1442:	10 92 9f 02 	sts	0x029F, r1
    1446:	10 92 9e 02 	sts	0x029E, r1
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <free+0x110>
    144c:	13 82       	std	Z+3, r1	; 0x03
    144e:	12 82       	std	Z+2, r1	; 0x02
    1450:	d0 93 9d 02 	sts	0x029D, r29
    1454:	c0 93 9c 02 	sts	0x029C, r28
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <memset>:
    145e:	dc 01       	movw	r26, r24
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <memset+0x6>
    1462:	6d 93       	st	X+, r22
    1464:	41 50       	subi	r20, 0x01	; 1
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	e0 f7       	brcc	.-8      	; 0x1462 <memset+0x4>
    146a:	08 95       	ret

0000146c <strcmp>:
    146c:	fb 01       	movw	r30, r22
    146e:	dc 01       	movw	r26, r24
    1470:	8d 91       	ld	r24, X+
    1472:	01 90       	ld	r0, Z+
    1474:	80 19       	sub	r24, r0
    1476:	01 10       	cpse	r0, r1
    1478:	d9 f3       	breq	.-10     	; 0x1470 <strcmp+0x4>
    147a:	99 0b       	sbc	r25, r25
    147c:	08 95       	ret

0000147e <strcpy>:
    147e:	fb 01       	movw	r30, r22
    1480:	dc 01       	movw	r26, r24
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	00 20       	and	r0, r0
    1488:	e1 f7       	brne	.-8      	; 0x1482 <strcpy+0x4>
    148a:	08 95       	ret

0000148c <sprintf>:
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	2e 97       	sbiw	r28, 0x0e	; 14
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	0d 89       	ldd	r16, Y+21	; 0x15
    14a6:	1e 89       	ldd	r17, Y+22	; 0x16
    14a8:	86 e0       	ldi	r24, 0x06	; 6
    14aa:	8c 83       	std	Y+4, r24	; 0x04
    14ac:	1a 83       	std	Y+2, r17	; 0x02
    14ae:	09 83       	std	Y+1, r16	; 0x01
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f e7       	ldi	r25, 0x7F	; 127
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	ae 01       	movw	r20, r28
    14ba:	47 5e       	subi	r20, 0xE7	; 231
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255
    14be:	6f 89       	ldd	r22, Y+23	; 0x17
    14c0:	78 8d       	ldd	r23, Y+24	; 0x18
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	48 d0       	rcall	.+144    	; 0x1558 <vfprintf>
    14c8:	ef 81       	ldd	r30, Y+7	; 0x07
    14ca:	f8 85       	ldd	r31, Y+8	; 0x08
    14cc:	e0 0f       	add	r30, r16
    14ce:	f1 1f       	adc	r31, r17
    14d0:	10 82       	st	Z, r1
    14d2:	2e 96       	adiw	r28, 0x0e	; 14
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	08 95       	ret

000014e8 <vsnprintf>:
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	2e 97       	sbiw	r28, 0x0e	; 14
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	8c 01       	movw	r16, r24
    1502:	ca 01       	movw	r24, r20
    1504:	46 e0       	ldi	r20, 0x06	; 6
    1506:	4c 83       	std	Y+4, r20	; 0x04
    1508:	1a 83       	std	Y+2, r17	; 0x02
    150a:	09 83       	std	Y+1, r16	; 0x01
    150c:	77 ff       	sbrs	r23, 7
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <vsnprintf+0x2c>
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e8       	ldi	r23, 0x80	; 128
    1514:	61 50       	subi	r22, 0x01	; 1
    1516:	71 09       	sbc	r23, r1
    1518:	7e 83       	std	Y+6, r23	; 0x06
    151a:	6d 83       	std	Y+5, r22	; 0x05
    151c:	a9 01       	movw	r20, r18
    151e:	bc 01       	movw	r22, r24
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	19 d0       	rcall	.+50     	; 0x1558 <vfprintf>
    1526:	4d 81       	ldd	r20, Y+5	; 0x05
    1528:	5e 81       	ldd	r21, Y+6	; 0x06
    152a:	57 fd       	sbrc	r21, 7
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <vsnprintf+0x5a>
    152e:	2f 81       	ldd	r18, Y+7	; 0x07
    1530:	38 85       	ldd	r19, Y+8	; 0x08
    1532:	42 17       	cp	r20, r18
    1534:	53 07       	cpc	r21, r19
    1536:	0c f4       	brge	.+2      	; 0x153a <vsnprintf+0x52>
    1538:	9a 01       	movw	r18, r20
    153a:	f8 01       	movw	r30, r16
    153c:	e2 0f       	add	r30, r18
    153e:	f3 1f       	adc	r31, r19
    1540:	10 82       	st	Z, r1
    1542:	2e 96       	adiw	r28, 0x0e	; 14
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <vfprintf>:
    1558:	2f 92       	push	r2
    155a:	3f 92       	push	r3
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	2c 97       	sbiw	r28, 0x0c	; 12
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	7c 01       	movw	r14, r24
    158e:	6b 01       	movw	r12, r22
    1590:	8a 01       	movw	r16, r20
    1592:	fc 01       	movw	r30, r24
    1594:	17 82       	std	Z+7, r1	; 0x07
    1596:	16 82       	std	Z+6, r1	; 0x06
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	81 ff       	sbrs	r24, 1
    159c:	b0 c1       	rjmp	.+864    	; 0x18fe <vfprintf+0x3a6>
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	4c 01       	movw	r8, r24
    15a4:	f7 01       	movw	r30, r14
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	f6 01       	movw	r30, r12
    15aa:	93 fd       	sbrc	r25, 3
    15ac:	85 91       	lpm	r24, Z+
    15ae:	93 ff       	sbrs	r25, 3
    15b0:	81 91       	ld	r24, Z+
    15b2:	6f 01       	movw	r12, r30
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vfprintf+0x62>
    15b8:	9e c1       	rjmp	.+828    	; 0x18f6 <vfprintf+0x39e>
    15ba:	85 32       	cpi	r24, 0x25	; 37
    15bc:	39 f4       	brne	.+14     	; 0x15cc <vfprintf+0x74>
    15be:	93 fd       	sbrc	r25, 3
    15c0:	85 91       	lpm	r24, Z+
    15c2:	93 ff       	sbrs	r25, 3
    15c4:	81 91       	ld	r24, Z+
    15c6:	6f 01       	movw	r12, r30
    15c8:	85 32       	cpi	r24, 0x25	; 37
    15ca:	21 f4       	brne	.+8      	; 0x15d4 <vfprintf+0x7c>
    15cc:	b7 01       	movw	r22, r14
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	c7 d1       	rcall	.+910    	; 0x1960 <fputc>
    15d2:	e8 cf       	rjmp	.-48     	; 0x15a4 <vfprintf+0x4c>
    15d4:	51 2c       	mov	r5, r1
    15d6:	31 2c       	mov	r3, r1
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	20 32       	cpi	r18, 0x20	; 32
    15dc:	a0 f4       	brcc	.+40     	; 0x1606 <vfprintf+0xae>
    15de:	8b 32       	cpi	r24, 0x2B	; 43
    15e0:	69 f0       	breq	.+26     	; 0x15fc <vfprintf+0xa4>
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <vfprintf+0x98>
    15e4:	80 32       	cpi	r24, 0x20	; 32
    15e6:	59 f0       	breq	.+22     	; 0x15fe <vfprintf+0xa6>
    15e8:	83 32       	cpi	r24, 0x23	; 35
    15ea:	69 f4       	brne	.+26     	; 0x1606 <vfprintf+0xae>
    15ec:	20 61       	ori	r18, 0x10	; 16
    15ee:	2c c0       	rjmp	.+88     	; 0x1648 <vfprintf+0xf0>
    15f0:	8d 32       	cpi	r24, 0x2D	; 45
    15f2:	39 f0       	breq	.+14     	; 0x1602 <vfprintf+0xaa>
    15f4:	80 33       	cpi	r24, 0x30	; 48
    15f6:	39 f4       	brne	.+14     	; 0x1606 <vfprintf+0xae>
    15f8:	21 60       	ori	r18, 0x01	; 1
    15fa:	26 c0       	rjmp	.+76     	; 0x1648 <vfprintf+0xf0>
    15fc:	22 60       	ori	r18, 0x02	; 2
    15fe:	24 60       	ori	r18, 0x04	; 4
    1600:	23 c0       	rjmp	.+70     	; 0x1648 <vfprintf+0xf0>
    1602:	28 60       	ori	r18, 0x08	; 8
    1604:	21 c0       	rjmp	.+66     	; 0x1648 <vfprintf+0xf0>
    1606:	27 fd       	sbrc	r18, 7
    1608:	27 c0       	rjmp	.+78     	; 0x1658 <vfprintf+0x100>
    160a:	30 ed       	ldi	r19, 0xD0	; 208
    160c:	38 0f       	add	r19, r24
    160e:	3a 30       	cpi	r19, 0x0A	; 10
    1610:	78 f4       	brcc	.+30     	; 0x1630 <vfprintf+0xd8>
    1612:	26 ff       	sbrs	r18, 6
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <vfprintf+0xca>
    1616:	fa e0       	ldi	r31, 0x0A	; 10
    1618:	5f 9e       	mul	r5, r31
    161a:	30 0d       	add	r19, r0
    161c:	11 24       	eor	r1, r1
    161e:	53 2e       	mov	r5, r19
    1620:	13 c0       	rjmp	.+38     	; 0x1648 <vfprintf+0xf0>
    1622:	8a e0       	ldi	r24, 0x0A	; 10
    1624:	38 9e       	mul	r3, r24
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	33 2e       	mov	r3, r19
    162c:	20 62       	ori	r18, 0x20	; 32
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <vfprintf+0xf0>
    1630:	8e 32       	cpi	r24, 0x2E	; 46
    1632:	21 f4       	brne	.+8      	; 0x163c <vfprintf+0xe4>
    1634:	26 fd       	sbrc	r18, 6
    1636:	5f c1       	rjmp	.+702    	; 0x18f6 <vfprintf+0x39e>
    1638:	20 64       	ori	r18, 0x40	; 64
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <vfprintf+0xf0>
    163c:	8c 36       	cpi	r24, 0x6C	; 108
    163e:	11 f4       	brne	.+4      	; 0x1644 <vfprintf+0xec>
    1640:	20 68       	ori	r18, 0x80	; 128
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0xf0>
    1644:	88 36       	cpi	r24, 0x68	; 104
    1646:	41 f4       	brne	.+16     	; 0x1658 <vfprintf+0x100>
    1648:	f6 01       	movw	r30, r12
    164a:	93 fd       	sbrc	r25, 3
    164c:	85 91       	lpm	r24, Z+
    164e:	93 ff       	sbrs	r25, 3
    1650:	81 91       	ld	r24, Z+
    1652:	6f 01       	movw	r12, r30
    1654:	81 11       	cpse	r24, r1
    1656:	c1 cf       	rjmp	.-126    	; 0x15da <vfprintf+0x82>
    1658:	98 2f       	mov	r25, r24
    165a:	9f 7d       	andi	r25, 0xDF	; 223
    165c:	95 54       	subi	r25, 0x45	; 69
    165e:	93 30       	cpi	r25, 0x03	; 3
    1660:	28 f4       	brcc	.+10     	; 0x166c <vfprintf+0x114>
    1662:	0c 5f       	subi	r16, 0xFC	; 252
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	ff e3       	ldi	r31, 0x3F	; 63
    1668:	f9 83       	std	Y+1, r31	; 0x01
    166a:	0d c0       	rjmp	.+26     	; 0x1686 <vfprintf+0x12e>
    166c:	83 36       	cpi	r24, 0x63	; 99
    166e:	31 f0       	breq	.+12     	; 0x167c <vfprintf+0x124>
    1670:	83 37       	cpi	r24, 0x73	; 115
    1672:	71 f0       	breq	.+28     	; 0x1690 <vfprintf+0x138>
    1674:	83 35       	cpi	r24, 0x53	; 83
    1676:	09 f0       	breq	.+2      	; 0x167a <vfprintf+0x122>
    1678:	57 c0       	rjmp	.+174    	; 0x1728 <vfprintf+0x1d0>
    167a:	21 c0       	rjmp	.+66     	; 0x16be <vfprintf+0x166>
    167c:	f8 01       	movw	r30, r16
    167e:	80 81       	ld	r24, Z
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	44 24       	eor	r4, r4
    1688:	43 94       	inc	r4
    168a:	51 2c       	mov	r5, r1
    168c:	54 01       	movw	r10, r8
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <vfprintf+0x160>
    1690:	38 01       	movw	r6, r16
    1692:	f2 e0       	ldi	r31, 0x02	; 2
    1694:	6f 0e       	add	r6, r31
    1696:	71 1c       	adc	r7, r1
    1698:	f8 01       	movw	r30, r16
    169a:	a0 80       	ld	r10, Z
    169c:	b1 80       	ldd	r11, Z+1	; 0x01
    169e:	26 ff       	sbrs	r18, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x150>
    16a2:	65 2d       	mov	r22, r5
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x154>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	c5 01       	movw	r24, r10
    16ae:	2c 87       	std	Y+12, r18	; 0x0c
    16b0:	4c d1       	rcall	.+664    	; 0x194a <strnlen>
    16b2:	2c 01       	movw	r4, r24
    16b4:	83 01       	movw	r16, r6
    16b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16b8:	2f 77       	andi	r18, 0x7F	; 127
    16ba:	22 2e       	mov	r2, r18
    16bc:	16 c0       	rjmp	.+44     	; 0x16ea <vfprintf+0x192>
    16be:	38 01       	movw	r6, r16
    16c0:	f2 e0       	ldi	r31, 0x02	; 2
    16c2:	6f 0e       	add	r6, r31
    16c4:	71 1c       	adc	r7, r1
    16c6:	f8 01       	movw	r30, r16
    16c8:	a0 80       	ld	r10, Z
    16ca:	b1 80       	ldd	r11, Z+1	; 0x01
    16cc:	26 ff       	sbrs	r18, 6
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <vfprintf+0x17e>
    16d0:	65 2d       	mov	r22, r5
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x182>
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	7f ef       	ldi	r23, 0xFF	; 255
    16da:	c5 01       	movw	r24, r10
    16dc:	2c 87       	std	Y+12, r18	; 0x0c
    16de:	2a d1       	rcall	.+596    	; 0x1934 <strnlen_P>
    16e0:	2c 01       	movw	r4, r24
    16e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e4:	20 68       	ori	r18, 0x80	; 128
    16e6:	22 2e       	mov	r2, r18
    16e8:	83 01       	movw	r16, r6
    16ea:	23 fc       	sbrc	r2, 3
    16ec:	19 c0       	rjmp	.+50     	; 0x1720 <vfprintf+0x1c8>
    16ee:	83 2d       	mov	r24, r3
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	48 16       	cp	r4, r24
    16f4:	59 06       	cpc	r5, r25
    16f6:	a0 f4       	brcc	.+40     	; 0x1720 <vfprintf+0x1c8>
    16f8:	b7 01       	movw	r22, r14
    16fa:	80 e2       	ldi	r24, 0x20	; 32
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	30 d1       	rcall	.+608    	; 0x1960 <fputc>
    1700:	3a 94       	dec	r3
    1702:	f5 cf       	rjmp	.-22     	; 0x16ee <vfprintf+0x196>
    1704:	f5 01       	movw	r30, r10
    1706:	27 fc       	sbrc	r2, 7
    1708:	85 91       	lpm	r24, Z+
    170a:	27 fe       	sbrs	r2, 7
    170c:	81 91       	ld	r24, Z+
    170e:	5f 01       	movw	r10, r30
    1710:	b7 01       	movw	r22, r14
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	25 d1       	rcall	.+586    	; 0x1960 <fputc>
    1716:	31 10       	cpse	r3, r1
    1718:	3a 94       	dec	r3
    171a:	f1 e0       	ldi	r31, 0x01	; 1
    171c:	4f 1a       	sub	r4, r31
    171e:	51 08       	sbc	r5, r1
    1720:	41 14       	cp	r4, r1
    1722:	51 04       	cpc	r5, r1
    1724:	79 f7       	brne	.-34     	; 0x1704 <vfprintf+0x1ac>
    1726:	de c0       	rjmp	.+444    	; 0x18e4 <vfprintf+0x38c>
    1728:	84 36       	cpi	r24, 0x64	; 100
    172a:	11 f0       	breq	.+4      	; 0x1730 <vfprintf+0x1d8>
    172c:	89 36       	cpi	r24, 0x69	; 105
    172e:	31 f5       	brne	.+76     	; 0x177c <vfprintf+0x224>
    1730:	f8 01       	movw	r30, r16
    1732:	27 ff       	sbrs	r18, 7
    1734:	07 c0       	rjmp	.+14     	; 0x1744 <vfprintf+0x1ec>
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0c 5f       	subi	r16, 0xFC	; 252
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <vfprintf+0x1fc>
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	88 27       	eor	r24, r24
    174a:	77 fd       	sbrc	r23, 7
    174c:	80 95       	com	r24
    174e:	98 2f       	mov	r25, r24
    1750:	0e 5f       	subi	r16, 0xFE	; 254
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	2f 76       	andi	r18, 0x6F	; 111
    1756:	b2 2e       	mov	r11, r18
    1758:	97 ff       	sbrs	r25, 7
    175a:	09 c0       	rjmp	.+18     	; 0x176e <vfprintf+0x216>
    175c:	90 95       	com	r25
    175e:	80 95       	com	r24
    1760:	70 95       	com	r23
    1762:	61 95       	neg	r22
    1764:	7f 4f       	sbci	r23, 0xFF	; 255
    1766:	8f 4f       	sbci	r24, 0xFF	; 255
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
    176a:	20 68       	ori	r18, 0x80	; 128
    176c:	b2 2e       	mov	r11, r18
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	a4 01       	movw	r20, r8
    1774:	27 d1       	rcall	.+590    	; 0x19c4 <__ultoa_invert>
    1776:	a8 2e       	mov	r10, r24
    1778:	a8 18       	sub	r10, r8
    177a:	43 c0       	rjmp	.+134    	; 0x1802 <vfprintf+0x2aa>
    177c:	85 37       	cpi	r24, 0x75	; 117
    177e:	29 f4       	brne	.+10     	; 0x178a <vfprintf+0x232>
    1780:	2f 7e       	andi	r18, 0xEF	; 239
    1782:	b2 2e       	mov	r11, r18
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	25 c0       	rjmp	.+74     	; 0x17d4 <vfprintf+0x27c>
    178a:	f2 2f       	mov	r31, r18
    178c:	f9 7f       	andi	r31, 0xF9	; 249
    178e:	bf 2e       	mov	r11, r31
    1790:	8f 36       	cpi	r24, 0x6F	; 111
    1792:	c1 f0       	breq	.+48     	; 0x17c4 <vfprintf+0x26c>
    1794:	18 f4       	brcc	.+6      	; 0x179c <vfprintf+0x244>
    1796:	88 35       	cpi	r24, 0x58	; 88
    1798:	79 f0       	breq	.+30     	; 0x17b8 <vfprintf+0x260>
    179a:	ad c0       	rjmp	.+346    	; 0x18f6 <vfprintf+0x39e>
    179c:	80 37       	cpi	r24, 0x70	; 112
    179e:	19 f0       	breq	.+6      	; 0x17a6 <vfprintf+0x24e>
    17a0:	88 37       	cpi	r24, 0x78	; 120
    17a2:	21 f0       	breq	.+8      	; 0x17ac <vfprintf+0x254>
    17a4:	a8 c0       	rjmp	.+336    	; 0x18f6 <vfprintf+0x39e>
    17a6:	2f 2f       	mov	r18, r31
    17a8:	20 61       	ori	r18, 0x10	; 16
    17aa:	b2 2e       	mov	r11, r18
    17ac:	b4 fe       	sbrs	r11, 4
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <vfprintf+0x272>
    17b0:	8b 2d       	mov	r24, r11
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	b8 2e       	mov	r11, r24
    17b6:	09 c0       	rjmp	.+18     	; 0x17ca <vfprintf+0x272>
    17b8:	24 ff       	sbrs	r18, 4
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <vfprintf+0x278>
    17bc:	9f 2f       	mov	r25, r31
    17be:	96 60       	ori	r25, 0x06	; 6
    17c0:	b9 2e       	mov	r11, r25
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <vfprintf+0x278>
    17c4:	28 e0       	ldi	r18, 0x08	; 8
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <vfprintf+0x27c>
    17ca:	20 e1       	ldi	r18, 0x10	; 16
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x27c>
    17d0:	20 e1       	ldi	r18, 0x10	; 16
    17d2:	32 e0       	ldi	r19, 0x02	; 2
    17d4:	f8 01       	movw	r30, r16
    17d6:	b7 fe       	sbrs	r11, 7
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <vfprintf+0x290>
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	0c 5f       	subi	r16, 0xFC	; 252
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x29c>
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 5f       	subi	r16, 0xFE	; 254
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	a4 01       	movw	r20, r8
    17f6:	e6 d0       	rcall	.+460    	; 0x19c4 <__ultoa_invert>
    17f8:	a8 2e       	mov	r10, r24
    17fa:	a8 18       	sub	r10, r8
    17fc:	fb 2d       	mov	r31, r11
    17fe:	ff 77       	andi	r31, 0x7F	; 127
    1800:	bf 2e       	mov	r11, r31
    1802:	b6 fe       	sbrs	r11, 6
    1804:	0b c0       	rjmp	.+22     	; 0x181c <vfprintf+0x2c4>
    1806:	2b 2d       	mov	r18, r11
    1808:	2e 7f       	andi	r18, 0xFE	; 254
    180a:	a5 14       	cp	r10, r5
    180c:	50 f4       	brcc	.+20     	; 0x1822 <vfprintf+0x2ca>
    180e:	b4 fe       	sbrs	r11, 4
    1810:	0a c0       	rjmp	.+20     	; 0x1826 <vfprintf+0x2ce>
    1812:	b2 fc       	sbrc	r11, 2
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <vfprintf+0x2ce>
    1816:	2b 2d       	mov	r18, r11
    1818:	2e 7e       	andi	r18, 0xEE	; 238
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x2ce>
    181c:	7a 2c       	mov	r7, r10
    181e:	2b 2d       	mov	r18, r11
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <vfprintf+0x2d0>
    1822:	7a 2c       	mov	r7, r10
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <vfprintf+0x2d0>
    1826:	75 2c       	mov	r7, r5
    1828:	24 ff       	sbrs	r18, 4
    182a:	0d c0       	rjmp	.+26     	; 0x1846 <vfprintf+0x2ee>
    182c:	fe 01       	movw	r30, r28
    182e:	ea 0d       	add	r30, r10
    1830:	f1 1d       	adc	r31, r1
    1832:	80 81       	ld	r24, Z
    1834:	80 33       	cpi	r24, 0x30	; 48
    1836:	11 f4       	brne	.+4      	; 0x183c <vfprintf+0x2e4>
    1838:	29 7e       	andi	r18, 0xE9	; 233
    183a:	09 c0       	rjmp	.+18     	; 0x184e <vfprintf+0x2f6>
    183c:	22 ff       	sbrs	r18, 2
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0x2f4>
    1840:	73 94       	inc	r7
    1842:	73 94       	inc	r7
    1844:	04 c0       	rjmp	.+8      	; 0x184e <vfprintf+0x2f6>
    1846:	82 2f       	mov	r24, r18
    1848:	86 78       	andi	r24, 0x86	; 134
    184a:	09 f0       	breq	.+2      	; 0x184e <vfprintf+0x2f6>
    184c:	73 94       	inc	r7
    184e:	23 fd       	sbrc	r18, 3
    1850:	12 c0       	rjmp	.+36     	; 0x1876 <vfprintf+0x31e>
    1852:	20 ff       	sbrs	r18, 0
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x30a>
    1856:	5a 2c       	mov	r5, r10
    1858:	73 14       	cp	r7, r3
    185a:	18 f4       	brcc	.+6      	; 0x1862 <vfprintf+0x30a>
    185c:	53 0c       	add	r5, r3
    185e:	57 18       	sub	r5, r7
    1860:	73 2c       	mov	r7, r3
    1862:	73 14       	cp	r7, r3
    1864:	60 f4       	brcc	.+24     	; 0x187e <vfprintf+0x326>
    1866:	b7 01       	movw	r22, r14
    1868:	80 e2       	ldi	r24, 0x20	; 32
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	2c 87       	std	Y+12, r18	; 0x0c
    186e:	78 d0       	rcall	.+240    	; 0x1960 <fputc>
    1870:	73 94       	inc	r7
    1872:	2c 85       	ldd	r18, Y+12	; 0x0c
    1874:	f6 cf       	rjmp	.-20     	; 0x1862 <vfprintf+0x30a>
    1876:	73 14       	cp	r7, r3
    1878:	10 f4       	brcc	.+4      	; 0x187e <vfprintf+0x326>
    187a:	37 18       	sub	r3, r7
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <vfprintf+0x328>
    187e:	31 2c       	mov	r3, r1
    1880:	24 ff       	sbrs	r18, 4
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <vfprintf+0x34e>
    1884:	b7 01       	movw	r22, r14
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	2c 87       	std	Y+12, r18	; 0x0c
    188c:	69 d0       	rcall	.+210    	; 0x1960 <fputc>
    188e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1890:	22 ff       	sbrs	r18, 2
    1892:	16 c0       	rjmp	.+44     	; 0x18c0 <vfprintf+0x368>
    1894:	21 ff       	sbrs	r18, 1
    1896:	03 c0       	rjmp	.+6      	; 0x189e <vfprintf+0x346>
    1898:	88 e5       	ldi	r24, 0x58	; 88
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <vfprintf+0x34a>
    189e:	88 e7       	ldi	r24, 0x78	; 120
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	b7 01       	movw	r22, r14
    18a4:	0c c0       	rjmp	.+24     	; 0x18be <vfprintf+0x366>
    18a6:	82 2f       	mov	r24, r18
    18a8:	86 78       	andi	r24, 0x86	; 134
    18aa:	51 f0       	breq	.+20     	; 0x18c0 <vfprintf+0x368>
    18ac:	21 fd       	sbrc	r18, 1
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x35c>
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	01 c0       	rjmp	.+2      	; 0x18b6 <vfprintf+0x35e>
    18b4:	8b e2       	ldi	r24, 0x2B	; 43
    18b6:	27 fd       	sbrc	r18, 7
    18b8:	8d e2       	ldi	r24, 0x2D	; 45
    18ba:	b7 01       	movw	r22, r14
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	50 d0       	rcall	.+160    	; 0x1960 <fputc>
    18c0:	a5 14       	cp	r10, r5
    18c2:	30 f4       	brcc	.+12     	; 0x18d0 <vfprintf+0x378>
    18c4:	b7 01       	movw	r22, r14
    18c6:	80 e3       	ldi	r24, 0x30	; 48
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	4a d0       	rcall	.+148    	; 0x1960 <fputc>
    18cc:	5a 94       	dec	r5
    18ce:	f8 cf       	rjmp	.-16     	; 0x18c0 <vfprintf+0x368>
    18d0:	aa 94       	dec	r10
    18d2:	f4 01       	movw	r30, r8
    18d4:	ea 0d       	add	r30, r10
    18d6:	f1 1d       	adc	r31, r1
    18d8:	80 81       	ld	r24, Z
    18da:	b7 01       	movw	r22, r14
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	40 d0       	rcall	.+128    	; 0x1960 <fputc>
    18e0:	a1 10       	cpse	r10, r1
    18e2:	f6 cf       	rjmp	.-20     	; 0x18d0 <vfprintf+0x378>
    18e4:	33 20       	and	r3, r3
    18e6:	09 f4       	brne	.+2      	; 0x18ea <vfprintf+0x392>
    18e8:	5d ce       	rjmp	.-838    	; 0x15a4 <vfprintf+0x4c>
    18ea:	b7 01       	movw	r22, r14
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	37 d0       	rcall	.+110    	; 0x1960 <fputc>
    18f2:	3a 94       	dec	r3
    18f4:	f7 cf       	rjmp	.-18     	; 0x18e4 <vfprintf+0x38c>
    18f6:	f7 01       	movw	r30, r14
    18f8:	86 81       	ldd	r24, Z+6	; 0x06
    18fa:	97 81       	ldd	r25, Z+7	; 0x07
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <vfprintf+0x3aa>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	2c 96       	adiw	r28, 0x0c	; 12
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	7f 90       	pop	r7
    1928:	6f 90       	pop	r6
    192a:	5f 90       	pop	r5
    192c:	4f 90       	pop	r4
    192e:	3f 90       	pop	r3
    1930:	2f 90       	pop	r2
    1932:	08 95       	ret

00001934 <strnlen_P>:
    1934:	fc 01       	movw	r30, r24
    1936:	05 90       	lpm	r0, Z+
    1938:	61 50       	subi	r22, 0x01	; 1
    193a:	70 40       	sbci	r23, 0x00	; 0
    193c:	01 10       	cpse	r0, r1
    193e:	d8 f7       	brcc	.-10     	; 0x1936 <strnlen_P+0x2>
    1940:	80 95       	com	r24
    1942:	90 95       	com	r25
    1944:	8e 0f       	add	r24, r30
    1946:	9f 1f       	adc	r25, r31
    1948:	08 95       	ret

0000194a <strnlen>:
    194a:	fc 01       	movw	r30, r24
    194c:	61 50       	subi	r22, 0x01	; 1
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	01 90       	ld	r0, Z+
    1952:	01 10       	cpse	r0, r1
    1954:	d8 f7       	brcc	.-10     	; 0x194c <strnlen+0x2>
    1956:	80 95       	com	r24
    1958:	90 95       	com	r25
    195a:	8e 0f       	add	r24, r30
    195c:	9f 1f       	adc	r25, r31
    195e:	08 95       	ret

00001960 <fputc>:
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	18 2f       	mov	r17, r24
    196a:	09 2f       	mov	r16, r25
    196c:	eb 01       	movw	r28, r22
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 fd       	sbrc	r24, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <fputc+0x1a>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	9f ef       	ldi	r25, 0xFF	; 255
    1978:	20 c0       	rjmp	.+64     	; 0x19ba <fputc+0x5a>
    197a:	82 ff       	sbrs	r24, 2
    197c:	10 c0       	rjmp	.+32     	; 0x199e <fputc+0x3e>
    197e:	4e 81       	ldd	r20, Y+6	; 0x06
    1980:	5f 81       	ldd	r21, Y+7	; 0x07
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	7c f4       	brge	.+30     	; 0x19aa <fputc+0x4a>
    198c:	e8 81       	ld	r30, Y
    198e:	f9 81       	ldd	r31, Y+1	; 0x01
    1990:	9f 01       	movw	r18, r30
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	39 83       	std	Y+1, r19	; 0x01
    1998:	28 83       	st	Y, r18
    199a:	10 83       	st	Z, r17
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <fputc+0x4a>
    199e:	e8 85       	ldd	r30, Y+8	; 0x08
    19a0:	f9 85       	ldd	r31, Y+9	; 0x09
    19a2:	81 2f       	mov	r24, r17
    19a4:	09 95       	icall
    19a6:	89 2b       	or	r24, r25
    19a8:	29 f7       	brne	.-54     	; 0x1974 <fputc+0x14>
    19aa:	2e 81       	ldd	r18, Y+6	; 0x06
    19ac:	3f 81       	ldd	r19, Y+7	; 0x07
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	3f 83       	std	Y+7, r19	; 0x07
    19b4:	2e 83       	std	Y+6, r18	; 0x06
    19b6:	81 2f       	mov	r24, r17
    19b8:	90 2f       	mov	r25, r16
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <__ultoa_invert>:
    19c4:	fa 01       	movw	r30, r20
    19c6:	aa 27       	eor	r26, r26
    19c8:	28 30       	cpi	r18, 0x08	; 8
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <__ultoa_invert+0x5c>
    19cc:	20 31       	cpi	r18, 0x10	; 16
    19ce:	81 f1       	breq	.+96     	; 0x1a30 <__ultoa_invert+0x6c>
    19d0:	e8 94       	clt
    19d2:	6f 93       	push	r22
    19d4:	6e 7f       	andi	r22, 0xFE	; 254
    19d6:	6e 5f       	subi	r22, 0xFE	; 254
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	af 4f       	sbci	r26, 0xFF	; 255
    19e0:	b1 e0       	ldi	r27, 0x01	; 1
    19e2:	3e d0       	rcall	.+124    	; 0x1a60 <__ultoa_invert+0x9c>
    19e4:	b4 e0       	ldi	r27, 0x04	; 4
    19e6:	3c d0       	rcall	.+120    	; 0x1a60 <__ultoa_invert+0x9c>
    19e8:	67 0f       	add	r22, r23
    19ea:	78 1f       	adc	r23, r24
    19ec:	89 1f       	adc	r24, r25
    19ee:	9a 1f       	adc	r25, r26
    19f0:	a1 1d       	adc	r26, r1
    19f2:	68 0f       	add	r22, r24
    19f4:	79 1f       	adc	r23, r25
    19f6:	8a 1f       	adc	r24, r26
    19f8:	91 1d       	adc	r25, r1
    19fa:	a1 1d       	adc	r26, r1
    19fc:	6a 0f       	add	r22, r26
    19fe:	71 1d       	adc	r23, r1
    1a00:	81 1d       	adc	r24, r1
    1a02:	91 1d       	adc	r25, r1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	20 d0       	rcall	.+64     	; 0x1a48 <__ultoa_invert+0x84>
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <__ultoa_invert+0x48>
    1a0a:	68 94       	set
    1a0c:	3f 91       	pop	r19
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	26 9f       	mul	r18, r22
    1a12:	11 24       	eor	r1, r1
    1a14:	30 19       	sub	r19, r0
    1a16:	30 5d       	subi	r19, 0xD0	; 208
    1a18:	31 93       	st	Z+, r19
    1a1a:	de f6       	brtc	.-74     	; 0x19d2 <__ultoa_invert+0xe>
    1a1c:	cf 01       	movw	r24, r30
    1a1e:	08 95       	ret
    1a20:	46 2f       	mov	r20, r22
    1a22:	47 70       	andi	r20, 0x07	; 7
    1a24:	40 5d       	subi	r20, 0xD0	; 208
    1a26:	41 93       	st	Z+, r20
    1a28:	b3 e0       	ldi	r27, 0x03	; 3
    1a2a:	0f d0       	rcall	.+30     	; 0x1a4a <__ultoa_invert+0x86>
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__ultoa_invert+0x5c>
    1a2e:	f6 cf       	rjmp	.-20     	; 0x1a1c <__ultoa_invert+0x58>
    1a30:	46 2f       	mov	r20, r22
    1a32:	4f 70       	andi	r20, 0x0F	; 15
    1a34:	40 5d       	subi	r20, 0xD0	; 208
    1a36:	4a 33       	cpi	r20, 0x3A	; 58
    1a38:	18 f0       	brcs	.+6      	; 0x1a40 <__ultoa_invert+0x7c>
    1a3a:	49 5d       	subi	r20, 0xD9	; 217
    1a3c:	31 fd       	sbrc	r19, 1
    1a3e:	40 52       	subi	r20, 0x20	; 32
    1a40:	41 93       	st	Z+, r20
    1a42:	02 d0       	rcall	.+4      	; 0x1a48 <__ultoa_invert+0x84>
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__ultoa_invert+0x6c>
    1a46:	ea cf       	rjmp	.-44     	; 0x1a1c <__ultoa_invert+0x58>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	a6 95       	lsr	r26
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	ba 95       	dec	r27
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <__ultoa_invert+0x86>
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	08 95       	ret
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	0a 2e       	mov	r0, r26
    1a66:	06 94       	lsr	r0
    1a68:	57 95       	ror	r21
    1a6a:	47 95       	ror	r20
    1a6c:	37 95       	ror	r19
    1a6e:	27 95       	ror	r18
    1a70:	ba 95       	dec	r27
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__ultoa_invert+0xa2>
    1a74:	62 0f       	add	r22, r18
    1a76:	73 1f       	adc	r23, r19
    1a78:	84 1f       	adc	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	a0 1d       	adc	r26, r0
    1a7e:	08 95       	ret

00001a80 <_exit>:
    1a80:	f8 94       	cli

00001a82 <__stop_program>:
    1a82:	ff cf       	rjmp	.-2      	; 0x1a82 <__stop_program>

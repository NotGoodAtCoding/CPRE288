
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00001d4c  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080021e  0080021e  00001efe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001efe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e7b  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d52  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001876  00000000  00000000  00005e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000818  00000000  00000000  00007680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b17  00000000  00000000  00007e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f38  00000000  00000000  000089af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000a8e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_9>
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	72 c7       	rjmp	.+3812   	; 0xf12 <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 38       	cpi	r26, 0x82	; 130
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c3 d4       	rcall	.+2438   	; 0xa4a <main>
      c4:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      ca:	10 92 90 00 	sts	0x0090, r1
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	89 b9       	out	0x09, r24	; 9
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	8b b9       	out	0x0b, r24	; 11
      d6:	8e e0       	ldi	r24, 0x0E	; 14
      d8:	80 93 95 00 	sts	0x0095, r24
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	08 95       	ret

000000e2 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
      e2:	5d 9b       	sbis	0x0b, 5	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
      e6:	8c b9       	out	0x0c, r24	; 12
      e8:	08 95       	ret

000000ea <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	c1 55       	subi	r28, 0x51	; 81
      fc:	d1 09       	sbc	r29, r1
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     10a:	41 e5       	ldi	r20, 0x51	; 81
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e2       	ldi	r22, 0x20	; 32
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 c1 0b 	call	0x1782	; 0x1782 <memset>
	sprintf(buf, "%s", data);
     11a:	b8 01       	movw	r22, r16
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <strcpy>
     124:	8e 01       	movw	r16, r28
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	7e 01       	movw	r14, r28
     12c:	82 e5       	ldi	r24, 0x52	; 82
     12e:	e8 0e       	add	r14, r24
     130:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     132:	f8 01       	movw	r30, r16
     134:	81 91       	ld	r24, Z+
     136:	8f 01       	movw	r16, r30
     138:	d4 df       	rcall	.-88     	; 0xe2 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     13a:	0e 15       	cp	r16, r14
     13c:	1f 05       	cpc	r17, r15
     13e:	c9 f7       	brne	.-14     	; 0x132 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     140:	cf 5a       	subi	r28, 0xAF	; 175
     142:	df 4f       	sbci	r29, 0xFF	; 255
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     15c:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     15e:	40 91 06 01 	lds	r20, 0x0106
     162:	50 91 07 01 	lds	r21, 0x0107
     166:	48 17       	cp	r20, r24
     168:	59 07       	cpc	r21, r25
     16a:	54 f0       	brlt	.+20     	; 0x180 <linearRegression+0x24>
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     174:	41 91       	ld	r20, Z+
     176:	51 91       	ld	r21, Z+
     178:	46 17       	cp	r20, r22
     17a:	57 07       	cpc	r21, r23
     17c:	5c f4       	brge	.+22     	; 0x194 <linearRegression+0x38>
     17e:	02 c0       	rjmp	.+4      	; 0x184 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     184:	f9 01       	movw	r30, r18
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 5f       	subi	r30, 0xFC	; 252
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	20 31       	cpi	r18, 0x10	; 16
     19a:	31 05       	cpc	r19, r1
     19c:	59 f7       	brne	.-42     	; 0x174 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1a6:	84 1b       	sub	r24, r20
     1a8:	95 0b       	sbc	r25, r21
     1aa:	64 1b       	sub	r22, r20
     1ac:	75 0b       	sbc	r23, r21
     1ae:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1b2:	c9 01       	movw	r24, r18
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	82 0f       	add	r24, r18
     1be:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1c0:	86 0f       	add	r24, r22
     1c2:	97 1f       	adc	r25, r23
     1c4:	08 95       	ret

000001c6 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	82 6c       	ori	r24, 0xC2	; 194
     1ca:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	87 6c       	ori	r24, 0xC7	; 199
     1d0:	86 b9       	out	0x06, r24	; 6
     1d2:	08 95       	ret

000001d4 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1da:	36 99       	sbic	0x06, 6	; 6
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <ADC_read+0x6>
	return linearRegression(ADC);
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	95 b1       	in	r25, 0x05	; 5
     1e2:	bc cf       	rjmp	.-136    	; 0x15c <linearRegression>
     1e4:	08 95       	ret

000001e6 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1e6:	de 9a       	sbi	0x1b, 6	; 27
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	1f d7       	rcall	.+3646   	; 0x102a <wait_ms>
     1ec:	de 98       	cbi	0x1b, 6	; 27
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 7f       	andi	r24, 0xF0	; 240
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	08 95       	ret

000001f6 <lcd_command>:
     1f6:	cf 93       	push	r28
     1f8:	c8 2f       	mov	r28, r24
     1fa:	dc 98       	cbi	0x1b, 4	; 27
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	9c 2f       	mov	r25, r28
     200:	92 95       	swap	r25
     202:	9f 70       	andi	r25, 0x0F	; 15
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	ed df       	rcall	.-38     	; 0x1e6 <lcd_toggle_clear>
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	cf 70       	andi	r28, 0x0F	; 15
     210:	c8 2b       	or	r28, r24
     212:	cb bb       	out	0x1b, r28	; 27
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	e7 df       	rcall	.-50     	; 0x1e6 <lcd_toggle_clear>
     218:	dc 9a       	sbi	0x1b, 4	; 27
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <lcd_clear>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	ea df       	rcall	.-44     	; 0x1f6 <lcd_command>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	01 c7       	rjmp	.+3586   	; 0x102a <wait_ms>
     228:	08 95       	ret

0000022a <lcd_home_line1>:
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	e4 cf       	rjmp	.-56     	; 0x1f6 <lcd_command>
     22e:	08 95       	ret

00000230 <lcd_init>:
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	8a bb       	out	0x1a, r24	; 26
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	8b bb       	out	0x1b, r24	; 27
     238:	de 9a       	sbi	0x1b, 6	; 27
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	f5 d6       	rcall	.+3562   	; 0x102a <wait_ms>
     240:	de 98       	cbi	0x1b, 6	; 27
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	f1 d6       	rcall	.+3554   	; 0x102a <wait_ms>
     248:	de 9a       	sbi	0x1b, 6	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ed d6       	rcall	.+3546   	; 0x102a <wait_ms>
     250:	de 98       	cbi	0x1b, 6	; 27
     252:	de 9a       	sbi	0x1b, 6	; 27
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	e8 d6       	rcall	.+3536   	; 0x102a <wait_ms>
     25a:	de 98       	cbi	0x1b, 6	; 27
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	8b bb       	out	0x1b, r24	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	c1 df       	rcall	.-126    	; 0x1e6 <lcd_toggle_clear>
     264:	8b b3       	in	r24, 0x1b	; 27
     266:	8b bb       	out	0x1b, r24	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	bd df       	rcall	.-134    	; 0x1e6 <lcd_toggle_clear>
     26c:	8b b3       	in	r24, 0x1b	; 27
     26e:	8e 60       	ori	r24, 0x0E	; 14
     270:	8b bb       	out	0x1b, r24	; 27
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	b8 df       	rcall	.-144    	; 0x1e6 <lcd_toggle_clear>
     276:	8b b3       	in	r24, 0x1b	; 27
     278:	8b bb       	out	0x1b, r24	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	b4 df       	rcall	.-152    	; 0x1e6 <lcd_toggle_clear>
     27e:	8b b3       	in	r24, 0x1b	; 27
     280:	86 60       	ori	r24, 0x06	; 6
     282:	8b bb       	out	0x1b, r24	; 27
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	af df       	rcall	.-162    	; 0x1e6 <lcd_toggle_clear>
     288:	8b b3       	in	r24, 0x1b	; 27
     28a:	8b bb       	out	0x1b, r24	; 27
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	ab df       	rcall	.-170    	; 0x1e6 <lcd_toggle_clear>
     290:	d8 9a       	sbi	0x1b, 0	; 27
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	a8 df       	rcall	.-176    	; 0x1e6 <lcd_toggle_clear>
     296:	dc 9a       	sbi	0x1b, 4	; 27
     298:	c8 cf       	rjmp	.-112    	; 0x22a <lcd_home_line1>
     29a:	08 95       	ret

0000029c <lcd_home_line2>:
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	ab cf       	rjmp	.-170    	; 0x1f6 <lcd_command>
     2a0:	08 95       	ret

000002a2 <lcd_home_line3>:
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	a8 cf       	rjmp	.-176    	; 0x1f6 <lcd_command>
     2a6:	08 95       	ret

000002a8 <lcd_home_line4>:
     2a8:	84 ed       	ldi	r24, 0xD4	; 212
     2aa:	a5 cf       	rjmp	.-182    	; 0x1f6 <lcd_command>
     2ac:	08 95       	ret

000002ae <lcd_putc>:
     2ae:	cf 93       	push	r28
     2b0:	c8 2f       	mov	r28, r24
     2b2:	8b b3       	in	r24, 0x1b	; 27
     2b4:	9c 2f       	mov	r25, r28
     2b6:	92 95       	swap	r25
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	89 2b       	or	r24, r25
     2bc:	8b bb       	out	0x1b, r24	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	92 df       	rcall	.-220    	; 0x1e6 <lcd_toggle_clear>
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	cf 70       	andi	r28, 0x0F	; 15
     2c6:	c8 2b       	or	r28, r24
     2c8:	cb bb       	out	0x1b, r28	; 27
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	8c df       	rcall	.-232    	; 0x1e6 <lcd_toggle_clear>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	c1 55       	subi	r28, 0x51	; 81
     2e8:	d1 09       	sbc	r29, r1
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	fe 01       	movw	r30, r28
     2f6:	e4 5a       	subi	r30, 0xA4	; 164
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	41 91       	ld	r20, Z+
     2fc:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2fe:	9f 01       	movw	r18, r30
     300:	61 e5       	ldi	r22, 0x51	; 81
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     30c:	be 01       	movw	r22, r28
     30e:	6f 5f       	subi	r22, 0xFF	; 255
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8e e1       	ldi	r24, 0x1E	; 30
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 c8 0b 	call	0x1790	; 0x1790 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f4       	brne	.+2      	; 0x320 <lprintf+0x4e>
     31e:	43 c0       	rjmp	.+134    	; 0x3a6 <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     320:	be 01       	movw	r22, r28
     322:	6f 5f       	subi	r22, 0xFF	; 255
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	8e e1       	ldi	r24, 0x1E	; 30
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <strcpy>
	lcd_clear();
     32e:	77 df       	rcall	.-274    	; 0x21e <lcd_clear>
     330:	9e 01       	movw	r18, r28
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     33c:	0f 2e       	mov	r0, r31
     33e:	f4 e1       	ldi	r31, 0x14	; 20
     340:	ef 2e       	mov	r14, r31
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     346:	27 c0       	rjmp	.+78     	; 0x396 <lprintf+0xc4>
		if (*str == '\n') {
     348:	8a 30       	cpi	r24, 0x0A	; 10
     34a:	51 f4       	brne	.+20     	; 0x360 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     34c:	c8 01       	movw	r24, r16
     34e:	b7 01       	movw	r22, r14
     350:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodhi4>
     354:	f7 01       	movw	r30, r14
     356:	e8 1b       	sub	r30, r24
     358:	f9 0b       	sbc	r31, r25
     35a:	0e 0f       	add	r16, r30
     35c:	1f 1f       	adc	r17, r31
     35e:	03 c0       	rjmp	.+6      	; 0x366 <lprintf+0x94>
		} else {
			lcd_putc(*str);
     360:	a6 df       	rcall	.-180    	; 0x2ae <lcd_putc>
			charnum++;
     362:	0f 5f       	subi	r16, 0xFF	; 255
     364:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodhi4>
     36e:	89 2b       	or	r24, r25
     370:	91 f4       	brne	.+36     	; 0x396 <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <__divmodhi4>
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	71 05       	cpc	r23, r1
     37e:	41 f0       	breq	.+16     	; 0x390 <lprintf+0xbe>
     380:	63 30       	cpi	r22, 0x03	; 3
     382:	71 05       	cpc	r23, r1
     384:	39 f0       	breq	.+14     	; 0x394 <lprintf+0xc2>
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	71 05       	cpc	r23, r1
     38a:	29 f4       	brne	.+10     	; 0x396 <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     38c:	87 df       	rcall	.-242    	; 0x29c <lcd_home_line2>
				break;
     38e:	03 c0       	rjmp	.+6      	; 0x396 <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     390:	88 df       	rcall	.-240    	; 0x2a2 <lcd_home_line3>
				break;
     392:	01 c0       	rjmp	.+2      	; 0x396 <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     394:	89 df       	rcall	.-238    	; 0x2a8 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     396:	f6 01       	movw	r30, r12
     398:	81 91       	ld	r24, Z+
     39a:	6f 01       	movw	r12, r30
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <lprintf+0xd4>
     3a0:	00 35       	cpi	r16, 0x50	; 80
     3a2:	11 05       	cpc	r17, r1
     3a4:	8c f2       	brlt	.-94     	; 0x348 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3a6:	cf 5a       	subi	r28, 0xAF	; 175
     3a8:	df 4f       	sbci	r29, 0xFF	; 255
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	08 95       	ret

000003c6 <init>:
void calibrateServo(){
	move_servo(0);
	wait_ms(750);
	move_servo(90);
	wait_ms(750);
	move_servo(180);
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	32 df       	rcall	.-412    	; 0x230 <lcd_init>
     3cc:	7e de       	rcall	.-772    	; 0xca <serial_init>
     3ce:	78 94       	sei
     3d0:	fa de       	rcall	.-524    	; 0x1c6 <ADC_init>
     3d2:	ea d5       	rcall	.+3028   	; 0xfa8 <timer1_init>
     3d4:	6d d5       	rcall	.+2778   	; 0xeb0 <timer3_init>
     3d6:	01 d4       	rcall	.+2050   	; 0xbda <oi_alloc>
     3d8:	ec 01       	movw	r28, r24
     3da:	3e d5       	rcall	.+2684   	; 0xe58 <oi_init>
     3dc:	8e e4       	ldi	r24, 0x4E	; 78
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	84 de       	rcall	.-760    	; 0xea <serial_puts>
     3e2:	ce 01       	movw	r24, r28
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <determineBoundryType>:
     3ea:	9c 01       	movw	r18, r24
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	31 09       	sbc	r19, r1
     3f0:	23 36       	cpi	r18, 0x63	; 99
     3f2:	31 05       	cpc	r19, r1
     3f4:	70 f0       	brcs	.+28     	; 0x412 <determineBoundryType+0x28>
     3f6:	85 36       	cpi	r24, 0x65	; 101
     3f8:	91 05       	cpc	r25, r1
     3fa:	74 f0       	brlt	.+28     	; 0x418 <determineBoundryType+0x2e>
     3fc:	66 0f       	add	r22, r22
     3fe:	77 1f       	adc	r23, r23
     400:	31 e0       	ldi	r19, 0x01	; 1
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	86 17       	cp	r24, r22
     406:	97 07       	cpc	r25, r23
     408:	0c f4       	brge	.+2      	; 0x40c <determineBoundryType+0x22>
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	83 2f       	mov	r24, r19
     40e:	92 2f       	mov	r25, r18
     410:	08 95       	ret
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret

0000041e <winProcedure>:
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	a6 97       	sbiw	r28, 0x26	; 38
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	7c 01       	movw	r14, r24
     43c:	08 e0       	ldi	r16, 0x08	; 8
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	97 01       	movw	r18, r14
     442:	42 e3       	ldi	r20, 0x32	; 50
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	64 ef       	ldi	r22, 0xF4	; 244
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	84 ef       	ldi	r24, 0xF4	; 244
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	7b d3       	rcall	.+1782   	; 0xb46 <move>
     450:	97 01       	movw	r18, r14
     452:	42 e3       	ldi	r20, 0x32	; 50
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	6c e0       	ldi	r22, 0x0C	; 12
     458:	7e ef       	ldi	r23, 0xFE	; 254
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	9e ef       	ldi	r25, 0xFE	; 254
     45e:	73 d3       	rcall	.+1766   	; 0xb46 <move>
     460:	01 50       	subi	r16, 0x01	; 1
     462:	11 09       	sbc	r17, r1
     464:	01 15       	cp	r16, r1
     466:	11 05       	cpc	r17, r1
     468:	59 f7       	brne	.-42     	; 0x440 <winProcedure+0x22>
     46a:	83 e1       	ldi	r24, 0x13	; 19
     46c:	e8 e2       	ldi	r30, 0x28	; 40
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	de 01       	movw	r26, r28
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	01 90       	ld	r0, Z+
     476:	0d 92       	st	X+, r0
     478:	8a 95       	dec	r24
     47a:	e1 f7       	brne	.-8      	; 0x474 <winProcedure+0x56>
     47c:	83 e1       	ldi	r24, 0x13	; 19
     47e:	eb e3       	ldi	r30, 0x3B	; 59
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	de 01       	movw	r26, r28
     484:	54 96       	adiw	r26, 0x14	; 20
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <winProcedure+0x68>
     48e:	9e 01       	movw	r18, r28
     490:	2c 5e       	subi	r18, 0xEC	; 236
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	ae 01       	movw	r20, r28
     496:	4f 5f       	subi	r20, 0xFF	; 255
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	63 e1       	ldi	r22, 0x13	; 19
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	de d3       	rcall	.+1980   	; 0xc60 <oi_load_song>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0c d4       	rcall	.+2072   	; 0xcc2 <oi_play_song>
     4aa:	b7 01       	movw	r22, r14
     4ac:	88 ee       	ldi	r24, 0xE8	; 232
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	e1 d2       	rcall	.+1474   	; 0xa74 <turn>
     4b2:	a6 96       	adiw	r28, 0x26	; 38
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <setBaseLightSensors>:
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4da:	90 93 76 02 	sts	0x0276, r25
     4de:	80 93 75 02 	sts	0x0275, r24
     4e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4e6:	90 93 74 02 	sts	0x0274, r25
     4ea:	80 93 73 02 	sts	0x0273, r24
     4ee:	88 a1       	ldd	r24, Y+32	; 0x20
     4f0:	99 a1       	ldd	r25, Y+33	; 0x21
     4f2:	90 93 72 02 	sts	0x0272, r25
     4f6:	80 93 71 02 	sts	0x0271, r24
     4fa:	8a a1       	ldd	r24, Y+34	; 0x22
     4fc:	9b a1       	ldd	r25, Y+35	; 0x23
     4fe:	90 93 70 02 	sts	0x0270, r25
     502:	80 93 6f 02 	sts	0x026F, r24
     506:	0b e5       	ldi	r16, 0x5B	; 91
     508:	11 e0       	ldi	r17, 0x01	; 1
     50a:	2d c0       	rjmp	.+90     	; 0x566 <setBaseLightSensors+0x9a>
     50c:	ce 01       	movw	r24, r28
     50e:	e9 d3       	rcall	.+2002   	; 0xce2 <oi_update>
     510:	8c 8d       	ldd	r24, Y+28	; 0x1c
     512:	9d 8d       	ldd	r25, Y+29	; 0x1d
     514:	80 93 75 02 	sts	0x0275, r24
     518:	90 93 76 02 	sts	0x0276, r25
     51c:	2e 8d       	ldd	r18, Y+30	; 0x1e
     51e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     520:	20 93 73 02 	sts	0x0273, r18
     524:	30 93 74 02 	sts	0x0274, r19
     528:	48 a1       	ldd	r20, Y+32	; 0x20
     52a:	59 a1       	ldd	r21, Y+33	; 0x21
     52c:	40 93 71 02 	sts	0x0271, r20
     530:	50 93 72 02 	sts	0x0272, r21
     534:	6a a1       	ldd	r22, Y+34	; 0x22
     536:	7b a1       	ldd	r23, Y+35	; 0x23
     538:	60 93 6f 02 	sts	0x026F, r22
     53c:	70 93 70 02 	sts	0x0270, r23
     540:	7f 93       	push	r23
     542:	6f 93       	push	r22
     544:	5f 93       	push	r21
     546:	4f 93       	push	r20
     548:	3f 93       	push	r19
     54a:	2f 93       	push	r18
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	be de       	rcall	.-644    	; 0x2d2 <lprintf>
     556:	8d b7       	in	r24, 0x3d	; 61
     558:	9e b7       	in	r25, 0x3e	; 62
     55a:	0a 96       	adiw	r24, 0x0a	; 10
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	9e bf       	out	0x3e, r25	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	8d bf       	out	0x3d, r24	; 61
     566:	80 91 75 02 	lds	r24, 0x0275
     56a:	90 91 76 02 	lds	r25, 0x0276
     56e:	89 2b       	or	r24, r25
     570:	69 f2       	breq	.-102    	; 0x50c <setBaseLightSensors+0x40>
     572:	80 91 73 02 	lds	r24, 0x0273
     576:	90 91 74 02 	lds	r25, 0x0274
     57a:	89 2b       	or	r24, r25
     57c:	39 f2       	breq	.-114    	; 0x50c <setBaseLightSensors+0x40>
     57e:	80 91 71 02 	lds	r24, 0x0271
     582:	90 91 72 02 	lds	r25, 0x0272
     586:	89 2b       	or	r24, r25
     588:	09 f4       	brne	.+2      	; 0x58c <setBaseLightSensors+0xc0>
     58a:	c0 cf       	rjmp	.-128    	; 0x50c <setBaseLightSensors+0x40>
     58c:	80 91 6f 02 	lds	r24, 0x026F
     590:	90 91 70 02 	lds	r25, 0x0270
     594:	89 2b       	or	r24, r25
     596:	09 f4       	brne	.+2      	; 0x59a <setBaseLightSensors+0xce>
     598:	b9 cf       	rjmp	.-142    	; 0x50c <setBaseLightSensors+0x40>
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <print>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	d8 2f       	mov	r29, r24
     5aa:	c9 2f       	mov	r28, r25
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	90 de       	rcall	.-736    	; 0x2d2 <lprintf>
     5b2:	8d 2f       	mov	r24, r29
     5b4:	9c 2f       	mov	r25, r28
     5b6:	99 dd       	rcall	.-1230   	; 0xea <serial_puts>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <rapidForwardScan>:
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <rapidForwardScan+0x22>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <rapidForwardScan+0x24>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	0f 2e       	mov	r0, r31
     5ec:	41 2c       	mov	r4, r1
     5ee:	51 2c       	mov	r5, r1
     5f0:	f8 ec       	ldi	r31, 0xC8	; 200
     5f2:	6f 2e       	mov	r6, r31
     5f4:	f2 e4       	ldi	r31, 0x42	; 66
     5f6:	7f 2e       	mov	r7, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	53 01       	movw	r10, r6
     5fc:	42 01       	movw	r8, r4
     5fe:	0f 2e       	mov	r0, r31
     600:	c1 2c       	mov	r12, r1
     602:	d1 2c       	mov	r13, r1
     604:	f0 e2       	ldi	r31, 0x20	; 32
     606:	ef 2e       	mov	r14, r31
     608:	f2 e4       	ldi	r31, 0x42	; 66
     60a:	ff 2e       	mov	r15, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	c7 01       	movw	r24, r14
     610:	b6 01       	movw	r22, r12
     612:	0e d6       	rcall	.+3100   	; 0x1230 <__fixunssfsi>
     614:	cb 01       	movw	r24, r22
     616:	62 d4       	rcall	.+2244   	; 0xedc <move_servo>
     618:	e1 d4       	rcall	.+2498   	; 0xfdc <ping_read>
     61a:	69 83       	std	Y+1, r22	; 0x01
     61c:	7a 83       	std	Y+2, r23	; 0x02
     61e:	8b 83       	std	Y+3, r24	; 0x03
     620:	9c 83       	std	Y+4, r25	; 0x04
     622:	23 ec       	ldi	r18, 0xC3	; 195
     624:	35 ef       	ldi	r19, 0xF5	; 245
     626:	48 e2       	ldi	r20, 0x28	; 40
     628:	5f e3       	ldi	r21, 0x3F	; 63
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	de d6       	rcall	.+3516   	; 0x13ec <__mulsf3>
     630:	4b 01       	movw	r8, r22
     632:	5c 01       	movw	r10, r24
     634:	23 ec       	ldi	r18, 0xC3	; 195
     636:	35 ef       	ldi	r19, 0xF5	; 245
     638:	48 ea       	ldi	r20, 0xA8	; 168
     63a:	5e e3       	ldi	r21, 0x3E	; 62
     63c:	69 81       	ldd	r22, Y+1	; 0x01
     63e:	7a 81       	ldd	r23, Y+2	; 0x02
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	d3 d6       	rcall	.+3494   	; 0x13ec <__mulsf3>
     646:	a5 01       	movw	r20, r10
     648:	94 01       	movw	r18, r8
     64a:	1d d5       	rcall	.+2618   	; 0x1086 <__addsf3>
     64c:	4b 01       	movw	r8, r22
     64e:	5c 01       	movw	r10, r24
     650:	c1 dd       	rcall	.-1150   	; 0x1d4 <ADC_read>
     652:	84 dd       	rcall	.-1272   	; 0x15c <linearRegression>
     654:	8c 01       	movw	r16, r24
     656:	23 ec       	ldi	r18, 0xC3	; 195
     658:	35 ef       	ldi	r19, 0xF5	; 245
     65a:	48 e2       	ldi	r20, 0x28	; 40
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	c3 01       	movw	r24, r6
     660:	b2 01       	movw	r22, r4
     662:	c4 d6       	rcall	.+3464   	; 0x13ec <__mulsf3>
     664:	2b 01       	movw	r4, r22
     666:	3c 01       	movw	r6, r24
     668:	b8 01       	movw	r22, r16
     66a:	88 27       	eor	r24, r24
     66c:	77 fd       	sbrc	r23, 7
     66e:	80 95       	com	r24
     670:	98 2f       	mov	r25, r24
     672:	0c d6       	rcall	.+3096   	; 0x128c <__floatsisf>
     674:	23 ec       	ldi	r18, 0xC3	; 195
     676:	35 ef       	ldi	r19, 0xF5	; 245
     678:	48 ea       	ldi	r20, 0xA8	; 168
     67a:	5e e3       	ldi	r21, 0x3E	; 62
     67c:	b7 d6       	rcall	.+3438   	; 0x13ec <__mulsf3>
     67e:	a3 01       	movw	r20, r6
     680:	92 01       	movw	r18, r4
     682:	01 d5       	rcall	.+2562   	; 0x1086 <__addsf3>
     684:	2b 01       	movw	r4, r22
     686:	3c 01       	movw	r6, r24
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	48 ec       	ldi	r20, 0xC8	; 200
     68e:	51 e4       	ldi	r21, 0x41	; 65
     690:	c5 01       	movw	r24, r10
     692:	b4 01       	movw	r22, r8
     694:	5c d5       	rcall	.+2744   	; 0x114e <__cmpsf2>
     696:	88 23       	and	r24, r24
     698:	4c f0       	brlt	.+18     	; 0x6ac <rapidForwardScan+0xea>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	48 ec       	ldi	r20, 0xC8	; 200
     6a0:	51 e4       	ldi	r21, 0x41	; 65
     6a2:	c3 01       	movw	r24, r6
     6a4:	b2 01       	movw	r22, r4
     6a6:	53 d5       	rcall	.+2726   	; 0x114e <__cmpsf2>
     6a8:	88 23       	and	r24, r24
     6aa:	44 f4       	brge	.+16     	; 0x6bc <rapidForwardScan+0xfa>
     6ac:	87 e6       	ldi	r24, 0x67	; 103
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	79 df       	rcall	.-270    	; 0x5a4 <print>
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
     6b6:	b7 d5       	rcall	.+2926   	; 0x1226 <__fixsfsi>
     6b8:	cb 01       	movw	r24, r22
     6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <rapidForwardScan+0x120>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	de d4       	rcall	.+2492   	; 0x1086 <__addsf3>
     6ca:	6b 01       	movw	r12, r22
     6cc:	7c 01       	movw	r14, r24
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	4c e0       	ldi	r20, 0x0C	; 12
     6d4:	53 e4       	ldi	r21, 0x43	; 67
     6d6:	3b d5       	rcall	.+2678   	; 0x114e <__cmpsf2>
     6d8:	18 16       	cp	r1, r24
     6da:	0c f0       	brlt	.+2      	; 0x6de <rapidForwardScan+0x11c>
     6dc:	98 cf       	rjmp	.-208    	; 0x60e <rapidForwardScan+0x4c>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	08 95       	ret

0000070c <detectColoredBoundry>:
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ec 01       	movw	r28, r24
     71e:	60 91 75 02 	lds	r22, 0x0275
     722:	70 91 76 02 	lds	r23, 0x0276
     726:	8c 8d       	ldd	r24, Y+28	; 0x1c
     728:	9d 8d       	ldd	r25, Y+29	; 0x1d
     72a:	5f de       	rcall	.-834    	; 0x3ea <determineBoundryType>
     72c:	8c 01       	movw	r16, r24
     72e:	60 91 73 02 	lds	r22, 0x0273
     732:	70 91 74 02 	lds	r23, 0x0274
     736:	8e 8d       	ldd	r24, Y+30	; 0x1e
     738:	9f 8d       	ldd	r25, Y+31	; 0x1f
     73a:	57 de       	rcall	.-850    	; 0x3ea <determineBoundryType>
     73c:	6c 01       	movw	r12, r24
     73e:	60 91 71 02 	lds	r22, 0x0271
     742:	70 91 72 02 	lds	r23, 0x0272
     746:	88 a1       	ldd	r24, Y+32	; 0x20
     748:	99 a1       	ldd	r25, Y+33	; 0x21
     74a:	4f de       	rcall	.-866    	; 0x3ea <determineBoundryType>
     74c:	7c 01       	movw	r14, r24
     74e:	60 91 6f 02 	lds	r22, 0x026F
     752:	70 91 70 02 	lds	r23, 0x0270
     756:	8a a1       	ldd	r24, Y+34	; 0x22
     758:	9b a1       	ldd	r25, Y+35	; 0x23
     75a:	47 de       	rcall	.-882    	; 0x3ea <determineBoundryType>
     75c:	01 30       	cpi	r16, 0x01	; 1
     75e:	11 05       	cpc	r17, r1
     760:	81 f1       	breq	.+96     	; 0x7c2 <detectColoredBoundry+0xb6>
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	e2 16       	cp	r14, r18
     766:	f1 04       	cpc	r15, r1
     768:	09 f4       	brne	.+2      	; 0x76c <detectColoredBoundry+0x60>
     76a:	3d c0       	rjmp	.+122    	; 0x7e6 <detectColoredBoundry+0xda>
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	c2 16       	cp	r12, r18
     770:	d1 04       	cpc	r13, r1
     772:	09 f4       	brne	.+2      	; 0x776 <detectColoredBoundry+0x6a>
     774:	41 c0       	rjmp	.+130    	; 0x7f8 <detectColoredBoundry+0xec>
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	91 05       	cpc	r25, r1
     77a:	59 f4       	brne	.+22     	; 0x792 <detectColoredBoundry+0x86>
     77c:	46 c0       	rjmp	.+140    	; 0x80a <detectColoredBoundry+0xfe>
     77e:	8a e7       	ldi	r24, 0x7A	; 122
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	10 df       	rcall	.-480    	; 0x5a4 <print>
     784:	be 01       	movw	r22, r28
     786:	84 e6       	ldi	r24, 0x64	; 100
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	74 d1       	rcall	.+744    	; 0xa74 <turn>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	4d c0       	rjmp	.+154    	; 0x82c <detectColoredBoundry+0x120>
     792:	02 30       	cpi	r16, 0x02	; 2
     794:	11 05       	cpc	r17, r1
     796:	51 f0       	breq	.+20     	; 0x7ac <detectColoredBoundry+0xa0>
     798:	22 e0       	ldi	r18, 0x02	; 2
     79a:	e2 16       	cp	r14, r18
     79c:	f1 04       	cpc	r15, r1
     79e:	31 f0       	breq	.+12     	; 0x7ac <detectColoredBoundry+0xa0>
     7a0:	22 e0       	ldi	r18, 0x02	; 2
     7a2:	c2 16       	cp	r12, r18
     7a4:	d1 04       	cpc	r13, r1
     7a6:	11 f0       	breq	.+4      	; 0x7ac <detectColoredBoundry+0xa0>
     7a8:	02 97       	sbiw	r24, 0x02	; 2
     7aa:	41 f4       	brne	.+16     	; 0x7bc <detectColoredBoundry+0xb0>
     7ac:	84 e9       	ldi	r24, 0x94	; 148
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	f9 de       	rcall	.-526    	; 0x5a4 <print>
     7b2:	ce 01       	movw	r24, r28
     7b4:	34 de       	rcall	.-920    	; 0x41e <winProcedure>
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	38 c0       	rjmp	.+112    	; 0x82c <detectColoredBoundry+0x120>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	35 c0       	rjmp	.+106    	; 0x82c <detectColoredBoundry+0x120>
     7c2:	9e 01       	movw	r18, r28
     7c4:	42 e3       	ldi	r20, 0x32	; 50
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	6c e9       	ldi	r22, 0x9C	; 156
     7ca:	7f ef       	ldi	r23, 0xFF	; 255
     7cc:	8c e9       	ldi	r24, 0x9C	; 156
     7ce:	9f ef       	ldi	r25, 0xFF	; 255
     7d0:	ba d1       	rcall	.+884    	; 0xb46 <move>
     7d2:	85 ea       	ldi	r24, 0xA5	; 165
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	e6 de       	rcall	.-564    	; 0x5a4 <print>
     7d8:	be 01       	movw	r22, r28
     7da:	8e ec       	ldi	r24, 0xCE	; 206
     7dc:	9f ef       	ldi	r25, 0xFF	; 255
     7de:	4a d1       	rcall	.+660    	; 0xa74 <turn>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	23 c0       	rjmp	.+70     	; 0x82c <detectColoredBoundry+0x120>
     7e6:	9e 01       	movw	r18, r28
     7e8:	42 e3       	ldi	r20, 0x32	; 50
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	6c e9       	ldi	r22, 0x9C	; 156
     7ee:	7f ef       	ldi	r23, 0xFF	; 255
     7f0:	8c e9       	ldi	r24, 0x9C	; 156
     7f2:	9f ef       	ldi	r25, 0xFF	; 255
     7f4:	a8 d1       	rcall	.+848    	; 0xb46 <move>
     7f6:	c3 cf       	rjmp	.-122    	; 0x77e <detectColoredBoundry+0x72>
     7f8:	9e 01       	movw	r18, r28
     7fa:	42 e3       	ldi	r20, 0x32	; 50
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	6c e9       	ldi	r22, 0x9C	; 156
     800:	7f ef       	ldi	r23, 0xFF	; 255
     802:	8c e9       	ldi	r24, 0x9C	; 156
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	9f d1       	rcall	.+830    	; 0xb46 <move>
     808:	ba cf       	rjmp	.-140    	; 0x77e <detectColoredBoundry+0x72>
     80a:	9e 01       	movw	r18, r28
     80c:	42 e3       	ldi	r20, 0x32	; 50
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	6c e9       	ldi	r22, 0x9C	; 156
     812:	7f ef       	ldi	r23, 0xFF	; 255
     814:	8c e9       	ldi	r24, 0x9C	; 156
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	96 d1       	rcall	.+812    	; 0xb46 <move>
     81a:	8c eb       	ldi	r24, 0xBC	; 188
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	c2 de       	rcall	.-636    	; 0x5a4 <print>
     820:	be 01       	movw	r22, r28
     822:	82 e3       	ldi	r24, 0x32	; 50
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	26 d1       	rcall	.+588    	; 0xa74 <turn>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	08 95       	ret

0000083e <detectCrater>:
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
     84c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     84e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     850:	58 a1       	ldd	r21, Y+32	; 0x20
     852:	49 a1       	ldd	r20, Y+33	; 0x21
     854:	2a a1       	ldd	r18, Y+34	; 0x22
     856:	3b a1       	ldd	r19, Y+35	; 0x23
     858:	8c 8d       	ldd	r24, Y+28	; 0x1c
     85a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     85c:	89 2b       	or	r24, r25
     85e:	21 f1       	breq	.+72     	; 0x8a8 <detectCrater+0x6a>
     860:	e7 2e       	mov	r14, r23
     862:	f6 2e       	mov	r15, r22
     864:	05 2f       	mov	r16, r21
     866:	14 2f       	mov	r17, r20
     868:	23 2b       	or	r18, r19
     86a:	81 f1       	breq	.+96     	; 0x8cc <detectCrater+0x8e>
     86c:	01 2b       	or	r16, r17
     86e:	09 f4       	brne	.+2      	; 0x872 <detectCrater+0x34>
     870:	41 c0       	rjmp	.+130    	; 0x8f4 <detectCrater+0xb6>
     872:	ef 28       	or	r14, r15
     874:	b1 f1       	breq	.+108    	; 0x8e2 <detectCrater+0xa4>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	45 c0       	rjmp	.+138    	; 0x906 <detectCrater+0xc8>
     87c:	01 2b       	or	r16, r17
     87e:	51 f4       	brne	.+20     	; 0x894 <detectCrater+0x56>
     880:	84 ed       	ldi	r24, 0xD4	; 212
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	8f de       	rcall	.-738    	; 0x5a4 <print>
     886:	be 01       	movw	r22, r28
     888:	8a e5       	ldi	r24, 0x5A	; 90
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	f3 d0       	rcall	.+486    	; 0xa74 <turn>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	39 c0       	rjmp	.+114    	; 0x906 <detectCrater+0xc8>
     894:	89 ee       	ldi	r24, 0xE9	; 233
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	85 de       	rcall	.-758    	; 0x5a4 <print>
     89a:	be 01       	movw	r22, r28
     89c:	82 e3       	ldi	r24, 0x32	; 50
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	e9 d0       	rcall	.+466    	; 0xa74 <turn>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	2f c0       	rjmp	.+94     	; 0x906 <detectCrater+0xc8>
     8a8:	9e 01       	movw	r18, r28
     8aa:	42 e3       	ldi	r20, 0x32	; 50
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	6c e9       	ldi	r22, 0x9C	; 156
     8b0:	7f ef       	ldi	r23, 0xFF	; 255
     8b2:	8c e9       	ldi	r24, 0x9C	; 156
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	47 d1       	rcall	.+654    	; 0xb46 <move>
     8b8:	8e ef       	ldi	r24, 0xFE	; 254
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	73 de       	rcall	.-794    	; 0x5a4 <print>
     8be:	be 01       	movw	r22, r28
     8c0:	8e ec       	ldi	r24, 0xCE	; 206
     8c2:	9f ef       	ldi	r25, 0xFF	; 255
     8c4:	d7 d0       	rcall	.+430    	; 0xa74 <turn>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	1d c0       	rjmp	.+58     	; 0x906 <detectCrater+0xc8>
     8cc:	9e 01       	movw	r18, r28
     8ce:	42 e3       	ldi	r20, 0x32	; 50
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	6c e9       	ldi	r22, 0x9C	; 156
     8d4:	7f ef       	ldi	r23, 0xFF	; 255
     8d6:	8c e9       	ldi	r24, 0x9C	; 156
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
     8da:	35 d1       	rcall	.+618    	; 0xb46 <move>
     8dc:	ef 28       	or	r14, r15
     8de:	71 f6       	brne	.-100    	; 0x87c <detectCrater+0x3e>
     8e0:	cf cf       	rjmp	.-98     	; 0x880 <detectCrater+0x42>
     8e2:	9e 01       	movw	r18, r28
     8e4:	42 e3       	ldi	r20, 0x32	; 50
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	6c e9       	ldi	r22, 0x9C	; 156
     8ea:	7f ef       	ldi	r23, 0xFF	; 255
     8ec:	8c e9       	ldi	r24, 0x9C	; 156
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	2a d1       	rcall	.+596    	; 0xb46 <move>
     8f2:	c6 cf       	rjmp	.-116    	; 0x880 <detectCrater+0x42>
     8f4:	9e 01       	movw	r18, r28
     8f6:	42 e3       	ldi	r20, 0x32	; 50
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	6c e9       	ldi	r22, 0x9C	; 156
     8fc:	7f ef       	ldi	r23, 0xFF	; 255
     8fe:	8c e9       	ldi	r24, 0x9C	; 156
     900:	9f ef       	ldi	r25, 0xFF	; 255
     902:	21 d1       	rcall	.+578    	; 0xb46 <move>
     904:	bd cf       	rjmp	.-134    	; 0x880 <detectCrater+0x42>
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	08 95       	ret

00000914 <moveCautiously>:
     914:	6f 92       	push	r6
     916:	7f 92       	push	r7
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	4c 01       	movw	r8, r24
     932:	5b 01       	movw	r10, r22
     934:	18 16       	cp	r1, r24
     936:	19 06       	cpc	r1, r25
     938:	0c f0       	brlt	.+2      	; 0x93c <moveCautiously+0x28>
     93a:	6d c0       	rjmp	.+218    	; 0xa16 <moveCautiously+0x102>
     93c:	ee 24       	eor	r14, r14
     93e:	ea 94       	dec	r14
     940:	fe 2c       	mov	r15, r14
     942:	0f ef       	ldi	r16, 0xFF	; 255
     944:	1f ef       	ldi	r17, 0xFF	; 255
     946:	cf ef       	ldi	r28, 0xFF	; 255
     948:	df ef       	ldi	r29, 0xFF	; 255
     94a:	c1 2c       	mov	r12, r1
     94c:	d1 2c       	mov	r13, r1
     94e:	61 2c       	mov	r6, r1
     950:	71 2c       	mov	r7, r1
     952:	c5 36       	cpi	r28, 0x65	; 101
     954:	d1 05       	cpc	r29, r1
     956:	24 f4       	brge	.+8      	; 0x960 <moveCautiously+0x4c>
     958:	cf 3f       	cpi	r28, 0xFF	; 255
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	d2 07       	cpc	r29, r18
     95e:	41 f5       	brne	.+80     	; 0x9b0 <moveCautiously+0x9c>
     960:	30 de       	rcall	.-928    	; 0x5c2 <rapidForwardScan>
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	19 f1       	breq	.+70     	; 0x9ac <moveCautiously+0x98>
     966:	8a 35       	cpi	r24, 0x5A	; 90
     968:	91 05       	cpc	r25, r1
     96a:	1c f4       	brge	.+6      	; 0x972 <moveCautiously+0x5e>
     96c:	e1 e0       	ldi	r30, 0x01	; 1
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	02 c0       	rjmp	.+4      	; 0x976 <moveCautiously+0x62>
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	ff ef       	ldi	r31, 0xFF	; 255
     976:	4a e5       	ldi	r20, 0x5A	; 90
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	48 1b       	sub	r20, r24
     97c:	59 0b       	sbc	r21, r25
     97e:	9a 01       	movw	r18, r20
     980:	22 f4       	brpl	.+8      	; 0x98a <moveCautiously+0x76>
     982:	22 27       	eor	r18, r18
     984:	33 27       	eor	r19, r19
     986:	24 1b       	sub	r18, r20
     988:	35 0b       	sbc	r19, r21
     98a:	8c e3       	ldi	r24, 0x3C	; 60
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	82 1b       	sub	r24, r18
     990:	93 0b       	sbc	r25, r19
     992:	b5 01       	movw	r22, r10
     994:	9c 01       	movw	r18, r24
     996:	e2 9f       	mul	r30, r18
     998:	c0 01       	movw	r24, r0
     99a:	e3 9f       	mul	r30, r19
     99c:	90 0d       	add	r25, r0
     99e:	f2 9f       	mul	r31, r18
     9a0:	90 0d       	add	r25, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	67 d0       	rcall	.+206    	; 0xa74 <turn>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	40 c0       	rjmp	.+128    	; 0xa2c <moveCautiously+0x118>
     9ac:	c6 2d       	mov	r28, r6
     9ae:	d7 2d       	mov	r29, r7
     9b0:	0b 30       	cpi	r16, 0x0B	; 11
     9b2:	11 05       	cpc	r17, r1
     9b4:	24 f4       	brge	.+8      	; 0x9be <moveCautiously+0xaa>
     9b6:	0f 3f       	cpi	r16, 0xFF	; 255
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	12 07       	cpc	r17, r18
     9bc:	31 f4       	brne	.+12     	; 0x9ca <moveCautiously+0xb6>
     9be:	c5 01       	movw	r24, r10
     9c0:	a5 de       	rcall	.-694    	; 0x70c <detectColoredBoundry>
     9c2:	02 97       	sbiw	r24, 0x02	; 2
     9c4:	59 f1       	breq	.+86     	; 0xa1c <moveCautiously+0x108>
     9c6:	06 2d       	mov	r16, r6
     9c8:	17 2d       	mov	r17, r7
     9ca:	36 e0       	ldi	r19, 0x06	; 6
     9cc:	e3 16       	cp	r14, r19
     9ce:	f1 04       	cpc	r15, r1
     9d0:	24 f4       	brge	.+8      	; 0x9da <moveCautiously+0xc6>
     9d2:	8f ef       	ldi	r24, 0xFF	; 255
     9d4:	e8 16       	cp	r14, r24
     9d6:	f8 06       	cpc	r15, r24
     9d8:	31 f4       	brne	.+12     	; 0x9e6 <moveCautiously+0xd2>
     9da:	c5 01       	movw	r24, r10
     9dc:	30 df       	rcall	.-416    	; 0x83e <detectCrater>
     9de:	89 2b       	or	r24, r25
     9e0:	01 f5       	brne	.+64     	; 0xa22 <moveCautiously+0x10e>
     9e2:	e6 2c       	mov	r14, r6
     9e4:	f7 2c       	mov	r15, r7
     9e6:	95 01       	movw	r18, r10
     9e8:	45 e0       	ldi	r20, 0x05	; 5
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	6d e7       	ldi	r22, 0x7D	; 125
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	8d e7       	ldi	r24, 0x7D	; 125
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a8 d0       	rcall	.+336    	; 0xb46 <move>
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	b9 f4       	brne	.+46     	; 0xa28 <moveCautiously+0x114>
     9fa:	25 e0       	ldi	r18, 0x05	; 5
     9fc:	c2 0e       	add	r12, r18
     9fe:	d1 1c       	adc	r13, r1
     a00:	25 96       	adiw	r28, 0x05	; 5
     a02:	0b 5f       	subi	r16, 0xFB	; 251
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	35 e0       	ldi	r19, 0x05	; 5
     a08:	e3 0e       	add	r14, r19
     a0a:	f1 1c       	adc	r15, r1
     a0c:	c8 14       	cp	r12, r8
     a0e:	d9 04       	cpc	r13, r9
     a10:	0c f4       	brge	.+2      	; 0xa14 <moveCautiously+0x100>
     a12:	9f cf       	rjmp	.-194    	; 0x952 <moveCautiously+0x3e>
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <moveCautiously+0x118>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 c0       	rjmp	.+16     	; 0xa2c <moveCautiously+0x118>
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <moveCautiously+0x118>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <moveCautiously+0x118>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	af 90       	pop	r10
     a40:	9f 90       	pop	r9
     a42:	8f 90       	pop	r8
     a44:	7f 90       	pop	r7
     a46:	6f 90       	pop	r6
     a48:	08 95       	ret

00000a4a <main>:
}

int main(void)
{
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
	oi_t * sensor_data = init();
     a4e:	bb dc       	rcall	.-1674   	; 0x3c6 <init>
     a50:	ec 01       	movw	r28, r24
	
	setBaseLightSensors(sensor_data);
     a52:	3c dd       	rcall	.-1416   	; 0x4cc <setBaseLightSensors>
	
	//calibrateServo();
	
	while (1) {
		if ( moveCautiously(400, sensor_data) ) {
     a54:	be 01       	movw	r22, r28
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	5c df       	rcall	.-328    	; 0x914 <moveCautiously>
     a5c:	89 2b       	or	r24, r25
     a5e:	19 f4       	brne	.+6      	; 0xa66 <main+0x1c>
		}
		
		//Color sensor calibration
		//detectColoredBoundry(sensor_data);
		
		oi_update(sensor_data);
     a60:	ce 01       	movw	r24, r28
     a62:	3f d1       	rcall	.+638    	; 0xce2 <oi_update>
	} 
     a64:	f7 cf       	rjmp	.-18     	; 0xa54 <main+0xa>
	
	oi_free(sensor_data);
     a66:	ce 01       	movw	r24, r28
     a68:	be d0       	rcall	.+380    	; 0xbe6 <oi_free>

	return 0;
}
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <turn>:
	
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	int magnitude = turnDegrees > 0 ? 1 : -1;
     a84:	18 16       	cp	r1, r24
     a86:	19 06       	cpc	r1, r25
     a88:	1c f4       	brge	.+6      	; 0xa90 <turn+0x1c>
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <turn+0x20>
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	3f ef       	ldi	r19, 0xFF	; 255
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
     a94:	4c e9       	ldi	r20, 0x9C	; 156
     a96:	42 03       	mulsu	r20, r18
     a98:	b0 01       	movw	r22, r0
     a9a:	43 9f       	mul	r20, r19
     a9c:	70 0d       	add	r23, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	84 e6       	ldi	r24, 0x64	; 100
     aa2:	48 2f       	mov	r20, r24
     aa4:	42 9f       	mul	r20, r18
     aa6:	c0 01       	movw	r24, r0
     aa8:	43 9f       	mul	r20, r19
     aaa:	90 0d       	add	r25, r0
     aac:	11 24       	eor	r1, r1
     aae:	c1 d0       	rcall	.+386    	; 0xc32 <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     ab0:	7e 01       	movw	r14, r28
     ab2:	dd 23       	and	r29, r29
     ab4:	24 f4       	brge	.+8      	; 0xabe <turn+0x4a>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	ec 1a       	sub	r14, r28
     abc:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     abe:	1e 14       	cp	r1, r14
     ac0:	1f 04       	cpc	r1, r15
     ac2:	a4 f4       	brge	.+40     	; 0xaec <turn+0x78>
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     ac8:	88 e2       	ldi	r24, 0x28	; 40
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	ae d2       	rcall	.+1372   	; 0x102a <wait_ms>
		oi_update(sensor_data);
     ace:	c8 01       	movw	r24, r16
     ad0:	08 d1       	rcall	.+528    	; 0xce2 <oi_update>
		currentDegrees += abs(sensor_data->angle);
     ad2:	f8 01       	movw	r30, r16
     ad4:	26 85       	ldd	r18, Z+14	; 0x0e
     ad6:	37 85       	ldd	r19, Z+15	; 0x0f
     ad8:	33 23       	and	r19, r19
     ada:	1c f4       	brge	.+6      	; 0xae2 <turn+0x6e>
     adc:	31 95       	neg	r19
     ade:	21 95       	neg	r18
     ae0:	31 09       	sbc	r19, r1
     ae2:	c2 0f       	add	r28, r18
     ae4:	d3 1f       	adc	r29, r19
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     ae6:	ce 15       	cp	r28, r14
     ae8:	df 05       	cpc	r29, r15
     aea:	74 f3       	brlt	.-36     	; 0xac8 <turn+0x54>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	9e d0       	rcall	.+316    	; 0xc32 <oi_set_wheels>
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     b0a:	88 81       	ld	r24, Y
     b0c:	98 2f       	mov	r25, r24
     b0e:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     b10:	81 fd       	sbrc	r24, 1
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <detectCollision+0x14>
     b14:	99 23       	and	r25, r25
     b16:	91 f0       	breq	.+36     	; 0xb3c <detectCollision+0x38>
		print("Collision!");
     b18:	82 e1       	ldi	r24, 0x12	; 18
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	43 dd       	rcall	.-1402   	; 0x5a4 <print>
		move(-100, -100, 50, sensor_data);
     b1e:	9e 01       	movw	r18, r28
     b20:	42 e3       	ldi	r20, 0x32	; 50
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	6c e9       	ldi	r22, 0x9C	; 156
     b26:	7f ef       	ldi	r23, 0xFF	; 255
     b28:	8c e9       	ldi	r24, 0x9C	; 156
     b2a:	9f ef       	ldi	r25, 0xFF	; 255
     b2c:	0c d0       	rcall	.+24     	; 0xb46 <move>
		turn(60, sensor_data);
     b2e:	be 01       	movw	r22, r28
     b30:	8c e3       	ldi	r24, 0x3C	; 60
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9f df       	rcall	.-194    	; 0xa74 <turn>
		return 1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <detectCollision+0x3c>
	} else {
		return 0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <move>:
#include "lcd.h"
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	7c 01       	movw	r14, r24
     b5c:	5b 01       	movw	r10, r22
     b5e:	ea 01       	movw	r28, r20
     b60:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
     b62:	08 97       	sbiw	r24, 0x08	; 8
     b64:	66 d0       	rcall	.+204    	; 0xc32 <oi_set_wheels>
	
	distance = abs(distance);
     b66:	6e 01       	movw	r12, r28
     b68:	dd 23       	and	r29, r29
     b6a:	24 f4       	brge	.+8      	; 0xb74 <move+0x2e>
     b6c:	cc 24       	eor	r12, r12
     b6e:	dd 24       	eor	r13, r13
     b70:	cc 1a       	sub	r12, r28
     b72:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     b74:	1c 14       	cp	r1, r12
     b76:	1d 04       	cpc	r1, r13
     b78:	dc f4       	brge	.+54     	; 0xbb0 <move+0x6a>
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     b7e:	c8 01       	movw	r24, r16
     b80:	b0 d0       	rcall	.+352    	; 0xce2 <oi_update>

		if ( right > 0 && left > 0 ) {
     b82:	1e 14       	cp	r1, r14
     b84:	1f 04       	cpc	r1, r15
     b86:	3c f4       	brge	.+14     	; 0xb96 <move+0x50>
     b88:	1a 14       	cp	r1, r10
     b8a:	1b 04       	cpc	r1, r11
     b8c:	24 f4       	brge	.+8      	; 0xb96 <move+0x50>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     b8e:	c8 01       	movw	r24, r16
     b90:	b9 df       	rcall	.-142    	; 0xb04 <detectCollision>
     b92:	89 2b       	or	r24, r25
     b94:	a9 f4       	brne	.+42     	; 0xbc0 <move+0x7a>
				return 1;
			}
		}

		sum += abs(sensor_data->distance);
     b96:	f8 01       	movw	r30, r16
     b98:	44 85       	ldd	r20, Z+12	; 0x0c
     b9a:	55 85       	ldd	r21, Z+13	; 0x0d
     b9c:	55 23       	and	r21, r21
     b9e:	1c f4       	brge	.+6      	; 0xba6 <move+0x60>
     ba0:	51 95       	neg	r21
     ba2:	41 95       	neg	r20
     ba4:	51 09       	sbc	r21, r1
     ba6:	c4 0f       	add	r28, r20
     ba8:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     baa:	cc 15       	cp	r28, r12
     bac:	dd 05       	cpc	r29, r13
     bae:	3c f3       	brlt	.-50     	; 0xb7e <move+0x38>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	3c d0       	rcall	.+120    	; 0xc32 <oi_set_wheels>
	
	return 0;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <move+0x7e>
		oi_update(sensor_data);

		if ( right > 0 && left > 0 ) {
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
				return 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	oi_set_wheels(0,0);
	
	return 0;
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	08 95       	ret

00000bda <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     bda:	64 e3       	ldi	r22, 0x34	; 52
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	8e c4       	rjmp	.+2332   	; 0x1500 <calloc>
     be4:	08 95       	ret

00000be6 <oi_free>:
     be6:	3e c5       	rjmp	.+2684   	; 0x1664 <free>
     be8:	08 95       	ret

00000bea <oi_byte_tx>:
     bea:	eb e9       	ldi	r30, 0x9B	; 155
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	90 81       	ld	r25, Z
     bf0:	95 ff       	sbrs	r25, 5
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <oi_byte_tx+0x4>
     bf4:	80 93 9c 00 	sts	0x009C, r24
     bf8:	08 95       	ret

00000bfa <oi_set_leds>:
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	08 2f       	mov	r16, r24
     c04:	16 2f       	mov	r17, r22
     c06:	d4 2f       	mov	r29, r20
     c08:	c2 2f       	mov	r28, r18
     c0a:	8b e8       	ldi	r24, 0x8B	; 139
     c0c:	ee df       	rcall	.-36     	; 0xbea <oi_byte_tx>
     c0e:	11 23       	and	r17, r17
     c10:	29 f0       	breq	.+10     	; 0xc1c <oi_set_leds+0x22>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	01 11       	cpse	r16, r1
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <oi_set_leds+0x24>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <oi_set_leds+0x24>
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	e5 df       	rcall	.-54     	; 0xbea <oi_byte_tx>
     c20:	8d 2f       	mov	r24, r29
     c22:	e3 df       	rcall	.-58     	; 0xbea <oi_byte_tx>
     c24:	8c 2f       	mov	r24, r28
     c26:	e1 df       	rcall	.-62     	; 0xbea <oi_byte_tx>
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <oi_set_wheels>:
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	18 2f       	mov	r17, r24
     c3c:	09 2f       	mov	r16, r25
     c3e:	c6 2f       	mov	r28, r22
     c40:	d7 2f       	mov	r29, r23
     c42:	81 e9       	ldi	r24, 0x91	; 145
     c44:	d2 df       	rcall	.-92     	; 0xbea <oi_byte_tx>
     c46:	80 2f       	mov	r24, r16
     c48:	d0 df       	rcall	.-96     	; 0xbea <oi_byte_tx>
     c4a:	81 2f       	mov	r24, r17
     c4c:	ce df       	rcall	.-100    	; 0xbea <oi_byte_tx>
     c4e:	8d 2f       	mov	r24, r29
     c50:	cc df       	rcall	.-104    	; 0xbea <oi_byte_tx>
     c52:	8c 2f       	mov	r24, r28
     c54:	ca df       	rcall	.-108    	; 0xbea <oi_byte_tx>
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	08 95       	ret

00000c60 <oi_load_song>:
     c60:	af 92       	push	r10
     c62:	bf 92       	push	r11
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	c8 2f       	mov	r28, r24
     c76:	7b 01       	movw	r14, r22
     c78:	6a 01       	movw	r12, r20
     c7a:	a2 2e       	mov	r10, r18
     c7c:	b3 2e       	mov	r11, r19
     c7e:	8c e8       	ldi	r24, 0x8C	; 140
     c80:	b4 df       	rcall	.-152    	; 0xbea <oi_byte_tx>
     c82:	8c 2f       	mov	r24, r28
     c84:	b2 df       	rcall	.-156    	; 0xbea <oi_byte_tx>
     c86:	8e 2d       	mov	r24, r14
     c88:	b0 df       	rcall	.-160    	; 0xbea <oi_byte_tx>
     c8a:	1e 14       	cp	r1, r14
     c8c:	1f 04       	cpc	r1, r15
     c8e:	74 f4       	brge	.+28     	; 0xcac <oi_load_song+0x4c>
     c90:	e6 01       	movw	r28, r12
     c92:	0a 2d       	mov	r16, r10
     c94:	1b 2d       	mov	r17, r11
     c96:	ec 0c       	add	r14, r12
     c98:	fd 1c       	adc	r15, r13
     c9a:	89 91       	ld	r24, Y+
     c9c:	a6 df       	rcall	.-180    	; 0xbea <oi_byte_tx>
     c9e:	f8 01       	movw	r30, r16
     ca0:	81 91       	ld	r24, Z+
     ca2:	8f 01       	movw	r16, r30
     ca4:	a2 df       	rcall	.-188    	; 0xbea <oi_byte_tx>
     ca6:	ce 15       	cp	r28, r14
     ca8:	df 05       	cpc	r29, r15
     caa:	b9 f7       	brne	.-18     	; 0xc9a <oi_load_song+0x3a>
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	08 95       	ret

00000cc2 <oi_play_song>:
     cc2:	cf 93       	push	r28
     cc4:	c8 2f       	mov	r28, r24
     cc6:	8d e8       	ldi	r24, 0x8D	; 141
     cc8:	90 df       	rcall	.-224    	; 0xbea <oi_byte_tx>
     cca:	8c 2f       	mov	r24, r28
     ccc:	8e df       	rcall	.-228    	; 0xbea <oi_byte_tx>
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     cd2:	eb e9       	ldi	r30, 0x9B	; 155
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	ec f7       	brge	.-6      	; 0xcd6 <oi_byte_rx+0x4>

	return UDR1;
     cdc:	80 91 9c 00 	lds	r24, 0x009C
     ce0:	08 95       	ret

00000ce2 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     cf0:	80 91 9b 00 	lds	r24, 0x009B
     cf4:	88 23       	and	r24, r24
     cf6:	44 f4       	brge	.+16     	; 0xd08 <oi_update+0x26>
		i = UDR1;
     cf8:	ac e9       	ldi	r26, 0x9C	; 156
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     cfc:	eb e9       	ldi	r30, 0x9B	; 155
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     d00:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     d02:	80 81       	ld	r24, Z
     d04:	88 23       	and	r24, r24
     d06:	e4 f3       	brlt	.-8      	; 0xd00 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     d08:	8e e8       	ldi	r24, 0x8E	; 142
     d0a:	6f df       	rcall	.-290    	; 0xbea <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     d0c:	86 e0       	ldi	r24, 0x06	; 6
     d0e:	6d df       	rcall	.-294    	; 0xbea <oi_byte_tx>
     d10:	e7 01       	movw	r28, r14
     d12:	87 01       	movw	r16, r14
     d14:	0c 5c       	subi	r16, 0xCC	; 204
     d16:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     d18:	dc df       	rcall	.-72     	; 0xcd2 <oi_byte_rx>
     d1a:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     d1c:	c0 17       	cp	r28, r16
     d1e:	d1 07       	cpc	r29, r17
     d20:	d9 f7       	brne	.-10     	; 0xd18 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     d22:	f7 01       	movw	r30, r14
     d24:	84 85       	ldd	r24, Z+12	; 0x0c
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	25 85       	ldd	r18, Z+13	; 0x0d
     d2e:	82 0f       	add	r24, r18
     d30:	91 1d       	adc	r25, r1
     d32:	95 87       	std	Z+13, r25	; 0x0d
     d34:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     d36:	86 85       	ldd	r24, Z+14	; 0x0e
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 2f       	mov	r25, r24
     d3c:	88 27       	eor	r24, r24
     d3e:	27 85       	ldd	r18, Z+15	; 0x0f
     d40:	82 0f       	add	r24, r18
     d42:	91 1d       	adc	r25, r1
     d44:	97 87       	std	Z+15, r25	; 0x0f
     d46:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     d48:	81 89       	ldd	r24, Z+17	; 0x11
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	98 2f       	mov	r25, r24
     d4e:	88 27       	eor	r24, r24
     d50:	22 89       	ldd	r18, Z+18	; 0x12
     d52:	82 0f       	add	r24, r18
     d54:	91 1d       	adc	r25, r1
     d56:	92 8b       	std	Z+18, r25	; 0x12
     d58:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     d5a:	83 89       	ldd	r24, Z+19	; 0x13
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	98 2f       	mov	r25, r24
     d60:	88 27       	eor	r24, r24
     d62:	24 89       	ldd	r18, Z+20	; 0x14
     d64:	82 0f       	add	r24, r18
     d66:	91 1d       	adc	r25, r1
     d68:	94 8b       	std	Z+20, r25	; 0x14
     d6a:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     d6c:	86 89       	ldd	r24, Z+22	; 0x16
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	98 2f       	mov	r25, r24
     d72:	88 27       	eor	r24, r24
     d74:	27 89       	ldd	r18, Z+23	; 0x17
     d76:	82 0f       	add	r24, r18
     d78:	91 1d       	adc	r25, r1
     d7a:	97 8b       	std	Z+23, r25	; 0x17
     d7c:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     d7e:	80 8d       	ldd	r24, Z+24	; 0x18
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	98 2f       	mov	r25, r24
     d84:	88 27       	eor	r24, r24
     d86:	21 8d       	ldd	r18, Z+25	; 0x19
     d88:	82 0f       	add	r24, r18
     d8a:	91 1d       	adc	r25, r1
     d8c:	91 8f       	std	Z+25, r25	; 0x19
     d8e:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     d90:	82 8d       	ldd	r24, Z+26	; 0x1a
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	23 8d       	ldd	r18, Z+27	; 0x1b
     d9a:	82 0f       	add	r24, r18
     d9c:	91 1d       	adc	r25, r1
     d9e:	93 8f       	std	Z+27, r25	; 0x1b
     da0:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     da2:	84 8d       	ldd	r24, Z+28	; 0x1c
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	98 2f       	mov	r25, r24
     da8:	88 27       	eor	r24, r24
     daa:	25 8d       	ldd	r18, Z+29	; 0x1d
     dac:	82 0f       	add	r24, r18
     dae:	91 1d       	adc	r25, r1
     db0:	95 8f       	std	Z+29, r25	; 0x1d
     db2:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     db4:	86 8d       	ldd	r24, Z+30	; 0x1e
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	98 2f       	mov	r25, r24
     dba:	88 27       	eor	r24, r24
     dbc:	27 8d       	ldd	r18, Z+31	; 0x1f
     dbe:	82 0f       	add	r24, r18
     dc0:	91 1d       	adc	r25, r1
     dc2:	97 8f       	std	Z+31, r25	; 0x1f
     dc4:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     dc6:	80 a1       	ldd	r24, Z+32	; 0x20
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	98 2f       	mov	r25, r24
     dcc:	88 27       	eor	r24, r24
     dce:	21 a1       	ldd	r18, Z+33	; 0x21
     dd0:	82 0f       	add	r24, r18
     dd2:	91 1d       	adc	r25, r1
     dd4:	91 a3       	std	Z+33, r25	; 0x21
     dd6:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     dd8:	82 a1       	ldd	r24, Z+34	; 0x22
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	98 2f       	mov	r25, r24
     dde:	88 27       	eor	r24, r24
     de0:	23 a1       	ldd	r18, Z+35	; 0x23
     de2:	82 0f       	add	r24, r18
     de4:	91 1d       	adc	r25, r1
     de6:	93 a3       	std	Z+35, r25	; 0x23
     de8:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     dea:	82 a5       	ldd	r24, Z+42	; 0x2a
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	21 a5       	ldd	r18, Z+41	; 0x29
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	32 2f       	mov	r19, r18
     df4:	22 27       	eor	r18, r18
     df6:	28 0f       	add	r18, r24
     df8:	39 1f       	adc	r19, r25
     dfa:	36 a3       	std	Z+38, r19	; 0x26
     dfc:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     dfe:	20 a9       	ldd	r18, Z+48	; 0x30
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	32 2f       	mov	r19, r18
     e04:	22 27       	eor	r18, r18
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	95 a7       	std	Z+45, r25	; 0x2d
     e0c:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     e0e:	82 a9       	ldd	r24, Z+50	; 0x32
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	98 2f       	mov	r25, r24
     e14:	88 27       	eor	r24, r24
     e16:	23 a9       	ldd	r18, Z+51	; 0x33
     e18:	82 0f       	add	r24, r18
     e1a:	91 1d       	adc	r25, r1
     e1c:	97 a7       	std	Z+47, r25	; 0x2f
     e1e:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     e20:	84 a9       	ldd	r24, Z+52	; 0x34
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	98 2f       	mov	r25, r24
     e26:	88 27       	eor	r24, r24
     e28:	25 a9       	ldd	r18, Z+53	; 0x35
     e2a:	82 0f       	add	r24, r18
     e2c:	91 1d       	adc	r25, r1
     e2e:	91 ab       	std	Z+49, r25	; 0x31
     e30:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     e32:	86 a9       	ldd	r24, Z+54	; 0x36
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	98 2f       	mov	r25, r24
     e38:	88 27       	eor	r24, r24
     e3a:	27 a9       	ldd	r18, Z+55	; 0x37
     e3c:	82 0f       	add	r24, r18
     e3e:	91 1d       	adc	r25, r1
     e40:	93 ab       	std	Z+51, r25	; 0x33
     e42:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     e44:	83 e2       	ldi	r24, 0x23	; 35
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	f0 d0       	rcall	.+480    	; 0x102a <wait_ms>
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	08 95       	ret

00000e58 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     e62:	09 e9       	ldi	r16, 0x99	; 153
     e64:	10 e0       	ldi	r17, 0x00	; 0
     e66:	80 e1       	ldi	r24, 0x10	; 16
     e68:	f8 01       	movw	r30, r16
     e6a:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     e6c:	88 e1       	ldi	r24, 0x18	; 24
     e6e:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     e72:	86 e0       	ldi	r24, 0x06	; 6
     e74:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     e78:	80 e8       	ldi	r24, 0x80	; 128
     e7a:	b7 de       	rcall	.-658    	; 0xbea <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     e7c:	81 e8       	ldi	r24, 0x81	; 129
     e7e:	b5 de       	rcall	.-662    	; 0xbea <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     e80:	88 e0       	ldi	r24, 0x08	; 8
     e82:	b3 de       	rcall	.-666    	; 0xbea <oi_byte_tx>
	wait_ms(100);
     e84:	84 e6       	ldi	r24, 0x64	; 100
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	d0 d0       	rcall	.+416    	; 0x102a <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     e8a:	81 e2       	ldi	r24, 0x21	; 33
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     e90:	84 e8       	ldi	r24, 0x84	; 132
     e92:	ab de       	rcall	.-682    	; 0xbea <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	47 e0       	ldi	r20, 0x07	; 7
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	ae de       	rcall	.-676    	; 0xbfa <oi_set_leds>
	
	oi_update(self);
     e9e:	ce 01       	movw	r24, r28
     ea0:	20 df       	rcall	.-448    	; 0xce2 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     ea2:	ce 01       	movw	r24, r28
     ea4:	1e df       	rcall	.-452    	; 0xce2 <oi_update>
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <timer3_init>:
#define DEGREE_MULTIPLIER 19.2
#define DEGREE_OFFSET 800

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     eb0:	83 e2       	ldi	r24, 0x23	; 35
     eb2:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     eb6:	8a e1       	ldi	r24, 0x1A	; 26
     eb8:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     ebc:	88 ef       	ldi	r24, 0xF8	; 248
     ebe:	97 ea       	ldi	r25, 0xA7	; 167
     ec0:	90 93 87 00 	sts	0x0087, r25
     ec4:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     ec8:	80 91 26 01 	lds	r24, 0x0126
     ecc:	90 91 27 01 	lds	r25, 0x0127
     ed0:	90 93 85 00 	sts	0x0085, r25
     ed4:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     ed8:	14 9a       	sbi	0x02, 4	; 2
     eda:	08 95       	ret

00000edc <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     edc:	bc 01       	movw	r22, r24
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	d2 d1       	rcall	.+932    	; 0x1288 <__floatunsisf>
     ee4:	2a e9       	ldi	r18, 0x9A	; 154
     ee6:	39 e9       	ldi	r19, 0x99	; 153
     ee8:	49 e9       	ldi	r20, 0x99	; 153
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	7f d2       	rcall	.+1278   	; 0x13ec <__mulsf3>
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	48 e4       	ldi	r20, 0x48	; 72
     ef4:	54 e4       	ldi	r21, 0x44	; 68
     ef6:	c7 d0       	rcall	.+398    	; 0x1086 <__addsf3>
     ef8:	9b d1       	rcall	.+822    	; 0x1230 <__fixunssfsi>
     efa:	70 93 27 01 	sts	0x0127, r23
     efe:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
     f02:	70 93 85 00 	sts	0x0085, r23
     f06:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     f0a:	8e e1       	ldi	r24, 0x1E	; 30
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	8d c0       	rjmp	.+282    	; 0x102a <wait_ms>
     f10:	08 95       	ret

00000f12 <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     f20:	80 91 7b 02 	lds	r24, 0x027B
     f24:	81 11       	cpse	r24, r1
     f26:	0d c0       	rjmp	.+26     	; 0xf42 <__vector_11+0x30>
		rising_time = ICR1;
     f28:	86 b5       	in	r24, 0x26	; 38
     f2a:	97 b5       	in	r25, 0x27	; 39
     f2c:	90 93 7a 02 	sts	0x027A, r25
     f30:	80 93 79 02 	sts	0x0279, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     f34:	8e b5       	in	r24, 0x2e	; 46
     f36:	8f 7b       	andi	r24, 0xBF	; 191
     f38:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 7b 02 	sts	0x027B, r24
     f40:	0d c0       	rjmp	.+26     	; 0xf5c <__vector_11+0x4a>
		} else if ( state == FALLING) {
     f42:	80 91 7b 02 	lds	r24, 0x027B
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	49 f4       	brne	.+18     	; 0xf5c <__vector_11+0x4a>
		falling_time = ICR1;
     f4a:	86 b5       	in	r24, 0x26	; 38
     f4c:	97 b5       	in	r25, 0x27	; 39
     f4e:	90 93 78 02 	sts	0x0278, r25
     f52:	80 93 77 02 	sts	0x0277, r24
		state = DONE;
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	80 93 7b 02 	sts	0x027B, r24
	}
}
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     f6a:	60 91 77 02 	lds	r22, 0x0277
     f6e:	70 91 78 02 	lds	r23, 0x0278
     f72:	80 91 79 02 	lds	r24, 0x0279
     f76:	90 91 7a 02 	lds	r25, 0x027A
     f7a:	68 1b       	sub	r22, r24
     f7c:	79 0b       	sbc	r23, r25
     f7e:	76 95       	lsr	r23
     f80:	67 95       	ror	r22
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	80 d1       	rcall	.+768    	; 0x1288 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	34 e2       	ldi	r19, 0x24	; 36
     f8c:	44 e7       	ldi	r20, 0x74	; 116
     f8e:	56 e4       	ldi	r21, 0x46	; 70
     f90:	e2 d0       	rcall	.+452    	; 0x1156 <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a ea       	ldi	r20, 0xAA	; 170
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	28 d2       	rcall	.+1104   	; 0x13ec <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	48 ec       	ldi	r20, 0xC8	; 200
     fa2:	52 e4       	ldi	r21, 0x42	; 66
     fa4:	23 c2       	rjmp	.+1094   	; 0x13ec <__mulsf3>
	return timeDifference;
}
     fa6:	08 95       	ret

00000fa8 <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     fa8:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     faa:	ea e7       	ldi	r30, 0x7A	; 122
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     fb2:	86 b7       	in	r24, 0x36	; 54
     fb4:	80 62       	ori	r24, 0x20	; 32
     fb6:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     fb8:	87 b7       	in	r24, 0x37	; 55
     fba:	80 62       	ori	r24, 0x20	; 32
     fbc:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     fbe:	85 ec       	ldi	r24, 0xC5	; 197
     fc0:	8e bd       	out	0x2e, r24	; 46
     fc2:	08 95       	ret

00000fc4 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     fc4:	87 b7       	in	r24, 0x37	; 55
     fc6:	8b 7d       	andi	r24, 0xDB	; 219
     fc8:	87 bf       	out	0x37, r24	; 55
     fca:	08 95       	ret

00000fcc <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     fcc:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     fce:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	2a d0       	rcall	.+84     	; 0x102a <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     fd6:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     fd8:	8c 98       	cbi	0x11, 4	; 17
     fda:	08 95       	ret

00000fdc <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     fdc:	10 92 7b 02 	sts	0x027B, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     fe0:	f1 df       	rcall	.-30     	; 0xfc4 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     fe2:	f4 df       	rcall	.-24     	; 0xfcc <send_pulse>
	
	//Enable interrupt
	timer1_init();
     fe4:	e1 df       	rcall	.-62     	; 0xfa8 <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     fe6:	80 91 7b 02 	lds	r24, 0x027B
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     fee:	bd cf       	rjmp	.-134    	; 0xf6a <time_to_dist>
     ff0:	08 95       	ret

00000ff2 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     ff2:	10 92 7d 02 	sts	0x027D, r1
     ff6:	10 92 7c 02 	sts	0x027C, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     ffa:	81 11       	cpse	r24, r1
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     ffe:	8b e0       	ldi	r24, 0x0B	; 11
    1000:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    1002:	87 b7       	in	r24, 0x37	; 55
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	87 bf       	out	0x37, r24	; 55
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	29 f4       	brne	.+10     	; 0x1018 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    100e:	89 e0       	ldi	r24, 0x09	; 9
    1010:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    1012:	87 b7       	in	r24, 0x37	; 55
    1014:	80 68       	ori	r24, 0x80	; 128
    1016:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    1018:	78 94       	sei
    101a:	08 95       	ret

0000101c <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    101c:	87 b7       	in	r24, 0x37	; 55
    101e:	8f 77       	andi	r24, 0x7F	; 127
    1020:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    1022:	85 b5       	in	r24, 0x25	; 37
    1024:	8f 77       	andi	r24, 0x7F	; 127
    1026:	85 bd       	out	0x25, r24	; 37
    1028:	08 95       	ret

0000102a <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    1030:	8a ef       	ldi	r24, 0xFA	; 250
    1032:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    1034:	10 92 7d 02 	sts	0x027D, r1
    1038:	10 92 7c 02 	sts	0x027C, r1
	timer2_start(0);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	d9 df       	rcall	.-78     	; 0xff2 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    1040:	20 91 7c 02 	lds	r18, 0x027C
    1044:	30 91 7d 02 	lds	r19, 0x027D
    1048:	2c 17       	cp	r18, r28
    104a:	3d 07       	cpc	r19, r29
    104c:	c8 f3       	brcs	.-14     	; 0x1040 <wait_ms+0x16>

	timer2_stop();
    104e:	e6 df       	rcall	.-52     	; 0x101c <timer2_stop>
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
	timer2_tick++;
    1064:	80 91 7c 02 	lds	r24, 0x027C
    1068:	90 91 7d 02 	lds	r25, 0x027D
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	90 93 7d 02 	sts	0x027D, r25
    1072:	80 93 7c 02 	sts	0x027C, r24
}
    1076:	9f 91       	pop	r25
    1078:	8f 91       	pop	r24
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__subsf3>:
    1084:	50 58       	subi	r21, 0x80	; 128

00001086 <__addsf3>:
    1086:	bb 27       	eor	r27, r27
    1088:	aa 27       	eor	r26, r26
    108a:	0e d0       	rcall	.+28     	; 0x10a8 <__addsf3x>
    108c:	75 c1       	rjmp	.+746    	; 0x1378 <__fp_round>
    108e:	66 d1       	rcall	.+716    	; 0x135c <__fp_pscA>
    1090:	30 f0       	brcs	.+12     	; 0x109e <__addsf3+0x18>
    1092:	6b d1       	rcall	.+726    	; 0x136a <__fp_pscB>
    1094:	20 f0       	brcs	.+8      	; 0x109e <__addsf3+0x18>
    1096:	31 f4       	brne	.+12     	; 0x10a4 <__addsf3+0x1e>
    1098:	9f 3f       	cpi	r25, 0xFF	; 255
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__addsf3+0x1a>
    109c:	1e f4       	brtc	.+6      	; 0x10a4 <__addsf3+0x1e>
    109e:	5b c1       	rjmp	.+694    	; 0x1356 <__fp_nan>
    10a0:	0e f4       	brtc	.+2      	; 0x10a4 <__addsf3+0x1e>
    10a2:	e0 95       	com	r30
    10a4:	e7 fb       	bst	r30, 7
    10a6:	51 c1       	rjmp	.+674    	; 0x134a <__fp_inf>

000010a8 <__addsf3x>:
    10a8:	e9 2f       	mov	r30, r25
    10aa:	77 d1       	rcall	.+750    	; 0x139a <__fp_split3>
    10ac:	80 f3       	brcs	.-32     	; 0x108e <__addsf3+0x8>
    10ae:	ba 17       	cp	r27, r26
    10b0:	62 07       	cpc	r22, r18
    10b2:	73 07       	cpc	r23, r19
    10b4:	84 07       	cpc	r24, r20
    10b6:	95 07       	cpc	r25, r21
    10b8:	18 f0       	brcs	.+6      	; 0x10c0 <__addsf3x+0x18>
    10ba:	71 f4       	brne	.+28     	; 0x10d8 <__addsf3x+0x30>
    10bc:	9e f5       	brtc	.+102    	; 0x1124 <__stack+0x25>
    10be:	8f c1       	rjmp	.+798    	; 0x13de <__fp_zero>
    10c0:	0e f4       	brtc	.+2      	; 0x10c4 <__addsf3x+0x1c>
    10c2:	e0 95       	com	r30
    10c4:	0b 2e       	mov	r0, r27
    10c6:	ba 2f       	mov	r27, r26
    10c8:	a0 2d       	mov	r26, r0
    10ca:	0b 01       	movw	r0, r22
    10cc:	b9 01       	movw	r22, r18
    10ce:	90 01       	movw	r18, r0
    10d0:	0c 01       	movw	r0, r24
    10d2:	ca 01       	movw	r24, r20
    10d4:	a0 01       	movw	r20, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	ff 27       	eor	r31, r31
    10da:	59 1b       	sub	r21, r25
    10dc:	99 f0       	breq	.+38     	; 0x1104 <__stack+0x5>
    10de:	59 3f       	cpi	r21, 0xF9	; 249
    10e0:	50 f4       	brcc	.+20     	; 0x10f6 <__addsf3x+0x4e>
    10e2:	50 3e       	cpi	r21, 0xE0	; 224
    10e4:	68 f1       	brcs	.+90     	; 0x1140 <__stack+0x41>
    10e6:	1a 16       	cp	r1, r26
    10e8:	f0 40       	sbci	r31, 0x00	; 0
    10ea:	a2 2f       	mov	r26, r18
    10ec:	23 2f       	mov	r18, r19
    10ee:	34 2f       	mov	r19, r20
    10f0:	44 27       	eor	r20, r20
    10f2:	58 5f       	subi	r21, 0xF8	; 248
    10f4:	f3 cf       	rjmp	.-26     	; 0x10dc <__addsf3x+0x34>
    10f6:	46 95       	lsr	r20
    10f8:	37 95       	ror	r19
    10fa:	27 95       	ror	r18
    10fc:	a7 95       	ror	r26
    10fe:	f0 40       	sbci	r31, 0x00	; 0
    1100:	53 95       	inc	r21
    1102:	c9 f7       	brne	.-14     	; 0x10f6 <__addsf3x+0x4e>
    1104:	7e f4       	brtc	.+30     	; 0x1124 <__stack+0x25>
    1106:	1f 16       	cp	r1, r31
    1108:	ba 0b       	sbc	r27, r26
    110a:	62 0b       	sbc	r22, r18
    110c:	73 0b       	sbc	r23, r19
    110e:	84 0b       	sbc	r24, r20
    1110:	ba f0       	brmi	.+46     	; 0x1140 <__stack+0x41>
    1112:	91 50       	subi	r25, 0x01	; 1
    1114:	a1 f0       	breq	.+40     	; 0x113e <__stack+0x3f>
    1116:	ff 0f       	add	r31, r31
    1118:	bb 1f       	adc	r27, r27
    111a:	66 1f       	adc	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	c2 f7       	brpl	.-16     	; 0x1112 <__stack+0x13>
    1122:	0e c0       	rjmp	.+28     	; 0x1140 <__stack+0x41>
    1124:	ba 0f       	add	r27, r26
    1126:	62 1f       	adc	r22, r18
    1128:	73 1f       	adc	r23, r19
    112a:	84 1f       	adc	r24, r20
    112c:	48 f4       	brcc	.+18     	; 0x1140 <__stack+0x41>
    112e:	87 95       	ror	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b7 95       	ror	r27
    1136:	f7 95       	ror	r31
    1138:	9e 3f       	cpi	r25, 0xFE	; 254
    113a:	08 f0       	brcs	.+2      	; 0x113e <__stack+0x3f>
    113c:	b3 cf       	rjmp	.-154    	; 0x10a4 <__addsf3+0x1e>
    113e:	93 95       	inc	r25
    1140:	88 0f       	add	r24, r24
    1142:	08 f0       	brcs	.+2      	; 0x1146 <__stack+0x47>
    1144:	99 27       	eor	r25, r25
    1146:	ee 0f       	add	r30, r30
    1148:	97 95       	ror	r25
    114a:	87 95       	ror	r24
    114c:	08 95       	ret

0000114e <__cmpsf2>:
    114e:	d9 d0       	rcall	.+434    	; 0x1302 <__fp_cmp>
    1150:	08 f4       	brcc	.+2      	; 0x1154 <__cmpsf2+0x6>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	08 95       	ret

00001156 <__divsf3>:
    1156:	0c d0       	rcall	.+24     	; 0x1170 <__divsf3x>
    1158:	0f c1       	rjmp	.+542    	; 0x1378 <__fp_round>
    115a:	07 d1       	rcall	.+526    	; 0x136a <__fp_pscB>
    115c:	40 f0       	brcs	.+16     	; 0x116e <__divsf3+0x18>
    115e:	fe d0       	rcall	.+508    	; 0x135c <__fp_pscA>
    1160:	30 f0       	brcs	.+12     	; 0x116e <__divsf3+0x18>
    1162:	21 f4       	brne	.+8      	; 0x116c <__divsf3+0x16>
    1164:	5f 3f       	cpi	r21, 0xFF	; 255
    1166:	19 f0       	breq	.+6      	; 0x116e <__divsf3+0x18>
    1168:	f0 c0       	rjmp	.+480    	; 0x134a <__fp_inf>
    116a:	51 11       	cpse	r21, r1
    116c:	39 c1       	rjmp	.+626    	; 0x13e0 <__fp_szero>
    116e:	f3 c0       	rjmp	.+486    	; 0x1356 <__fp_nan>

00001170 <__divsf3x>:
    1170:	14 d1       	rcall	.+552    	; 0x139a <__fp_split3>
    1172:	98 f3       	brcs	.-26     	; 0x115a <__divsf3+0x4>

00001174 <__divsf3_pse>:
    1174:	99 23       	and	r25, r25
    1176:	c9 f3       	breq	.-14     	; 0x116a <__divsf3+0x14>
    1178:	55 23       	and	r21, r21
    117a:	b1 f3       	breq	.-20     	; 0x1168 <__divsf3+0x12>
    117c:	95 1b       	sub	r25, r21
    117e:	55 0b       	sbc	r21, r21
    1180:	bb 27       	eor	r27, r27
    1182:	aa 27       	eor	r26, r26
    1184:	62 17       	cp	r22, r18
    1186:	73 07       	cpc	r23, r19
    1188:	84 07       	cpc	r24, r20
    118a:	38 f0       	brcs	.+14     	; 0x119a <__divsf3_pse+0x26>
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	44 1f       	adc	r20, r20
    1196:	aa 1f       	adc	r26, r26
    1198:	a9 f3       	breq	.-22     	; 0x1184 <__divsf3_pse+0x10>
    119a:	33 d0       	rcall	.+102    	; 0x1202 <__divsf3_pse+0x8e>
    119c:	0e 2e       	mov	r0, r30
    119e:	3a f0       	brmi	.+14     	; 0x11ae <__divsf3_pse+0x3a>
    11a0:	e0 e8       	ldi	r30, 0x80	; 128
    11a2:	30 d0       	rcall	.+96     	; 0x1204 <__divsf3_pse+0x90>
    11a4:	91 50       	subi	r25, 0x01	; 1
    11a6:	50 40       	sbci	r21, 0x00	; 0
    11a8:	e6 95       	lsr	r30
    11aa:	00 1c       	adc	r0, r0
    11ac:	ca f7       	brpl	.-14     	; 0x11a0 <__divsf3_pse+0x2c>
    11ae:	29 d0       	rcall	.+82     	; 0x1202 <__divsf3_pse+0x8e>
    11b0:	fe 2f       	mov	r31, r30
    11b2:	27 d0       	rcall	.+78     	; 0x1202 <__divsf3_pse+0x8e>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	bb 1f       	adc	r27, r27
    11bc:	26 17       	cp	r18, r22
    11be:	37 07       	cpc	r19, r23
    11c0:	48 07       	cpc	r20, r24
    11c2:	ab 07       	cpc	r26, r27
    11c4:	b0 e8       	ldi	r27, 0x80	; 128
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__divsf3_pse+0x56>
    11c8:	bb 0b       	sbc	r27, r27
    11ca:	80 2d       	mov	r24, r0
    11cc:	bf 01       	movw	r22, r30
    11ce:	ff 27       	eor	r31, r31
    11d0:	93 58       	subi	r25, 0x83	; 131
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	2a f0       	brmi	.+10     	; 0x11e0 <__divsf3_pse+0x6c>
    11d6:	9e 3f       	cpi	r25, 0xFE	; 254
    11d8:	51 05       	cpc	r21, r1
    11da:	68 f0       	brcs	.+26     	; 0x11f6 <__divsf3_pse+0x82>
    11dc:	b6 c0       	rjmp	.+364    	; 0x134a <__fp_inf>
    11de:	00 c1       	rjmp	.+512    	; 0x13e0 <__fp_szero>
    11e0:	5f 3f       	cpi	r21, 0xFF	; 255
    11e2:	ec f3       	brlt	.-6      	; 0x11de <__divsf3_pse+0x6a>
    11e4:	98 3e       	cpi	r25, 0xE8	; 232
    11e6:	dc f3       	brlt	.-10     	; 0x11de <__divsf3_pse+0x6a>
    11e8:	86 95       	lsr	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	b7 95       	ror	r27
    11f0:	f7 95       	ror	r31
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__divsf3_pse+0x74>
    11f6:	88 0f       	add	r24, r24
    11f8:	91 1d       	adc	r25, r1
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	97 f9       	bld	r25, 7
    1200:	08 95       	ret
    1202:	e1 e0       	ldi	r30, 0x01	; 1
    1204:	66 0f       	add	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	88 1f       	adc	r24, r24
    120a:	bb 1f       	adc	r27, r27
    120c:	62 17       	cp	r22, r18
    120e:	73 07       	cpc	r23, r19
    1210:	84 07       	cpc	r24, r20
    1212:	ba 07       	cpc	r27, r26
    1214:	20 f0       	brcs	.+8      	; 0x121e <__divsf3_pse+0xaa>
    1216:	62 1b       	sub	r22, r18
    1218:	73 0b       	sbc	r23, r19
    121a:	84 0b       	sbc	r24, r20
    121c:	ba 0b       	sbc	r27, r26
    121e:	ee 1f       	adc	r30, r30
    1220:	88 f7       	brcc	.-30     	; 0x1204 <__divsf3_pse+0x90>
    1222:	e0 95       	com	r30
    1224:	08 95       	ret

00001226 <__fixsfsi>:
    1226:	04 d0       	rcall	.+8      	; 0x1230 <__fixunssfsi>
    1228:	68 94       	set
    122a:	b1 11       	cpse	r27, r1
    122c:	d9 c0       	rjmp	.+434    	; 0x13e0 <__fp_szero>
    122e:	08 95       	ret

00001230 <__fixunssfsi>:
    1230:	bc d0       	rcall	.+376    	; 0x13aa <__fp_splitA>
    1232:	88 f0       	brcs	.+34     	; 0x1256 <__fixunssfsi+0x26>
    1234:	9f 57       	subi	r25, 0x7F	; 127
    1236:	90 f0       	brcs	.+36     	; 0x125c <__fixunssfsi+0x2c>
    1238:	b9 2f       	mov	r27, r25
    123a:	99 27       	eor	r25, r25
    123c:	b7 51       	subi	r27, 0x17	; 23
    123e:	a0 f0       	brcs	.+40     	; 0x1268 <__fixunssfsi+0x38>
    1240:	d1 f0       	breq	.+52     	; 0x1276 <__fixunssfsi+0x46>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	1a f0       	brmi	.+6      	; 0x1252 <__fixunssfsi+0x22>
    124c:	ba 95       	dec	r27
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__fixunssfsi+0x12>
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <__fixunssfsi+0x46>
    1252:	b1 30       	cpi	r27, 0x01	; 1
    1254:	81 f0       	breq	.+32     	; 0x1276 <__fixunssfsi+0x46>
    1256:	c3 d0       	rcall	.+390    	; 0x13de <__fp_zero>
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	08 95       	ret
    125c:	c0 c0       	rjmp	.+384    	; 0x13de <__fp_zero>
    125e:	67 2f       	mov	r22, r23
    1260:	78 2f       	mov	r23, r24
    1262:	88 27       	eor	r24, r24
    1264:	b8 5f       	subi	r27, 0xF8	; 248
    1266:	39 f0       	breq	.+14     	; 0x1276 <__fixunssfsi+0x46>
    1268:	b9 3f       	cpi	r27, 0xF9	; 249
    126a:	cc f3       	brlt	.-14     	; 0x125e <__fixunssfsi+0x2e>
    126c:	86 95       	lsr	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b3 95       	inc	r27
    1274:	d9 f7       	brne	.-10     	; 0x126c <__fixunssfsi+0x3c>
    1276:	3e f4       	brtc	.+14     	; 0x1286 <__fixunssfsi+0x56>
    1278:	90 95       	com	r25
    127a:	80 95       	com	r24
    127c:	70 95       	com	r23
    127e:	61 95       	neg	r22
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__floatunsisf>:
    1288:	e8 94       	clt
    128a:	09 c0       	rjmp	.+18     	; 0x129e <__floatsisf+0x12>

0000128c <__floatsisf>:
    128c:	97 fb       	bst	r25, 7
    128e:	3e f4       	brtc	.+14     	; 0x129e <__floatsisf+0x12>
    1290:	90 95       	com	r25
    1292:	80 95       	com	r24
    1294:	70 95       	com	r23
    1296:	61 95       	neg	r22
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	8f 4f       	sbci	r24, 0xFF	; 255
    129c:	9f 4f       	sbci	r25, 0xFF	; 255
    129e:	99 23       	and	r25, r25
    12a0:	a9 f0       	breq	.+42     	; 0x12cc <__floatsisf+0x40>
    12a2:	f9 2f       	mov	r31, r25
    12a4:	96 e9       	ldi	r25, 0x96	; 150
    12a6:	bb 27       	eor	r27, r27
    12a8:	93 95       	inc	r25
    12aa:	f6 95       	lsr	r31
    12ac:	87 95       	ror	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	f1 11       	cpse	r31, r1
    12b6:	f8 cf       	rjmp	.-16     	; 0x12a8 <__floatsisf+0x1c>
    12b8:	fa f4       	brpl	.+62     	; 0x12f8 <__floatsisf+0x6c>
    12ba:	bb 0f       	add	r27, r27
    12bc:	11 f4       	brne	.+4      	; 0x12c2 <__floatsisf+0x36>
    12be:	60 ff       	sbrs	r22, 0
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__floatsisf+0x6c>
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	16 c0       	rjmp	.+44     	; 0x12f8 <__floatsisf+0x6c>
    12cc:	88 23       	and	r24, r24
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <__floatsisf+0x48>
    12d0:	96 e9       	ldi	r25, 0x96	; 150
    12d2:	11 c0       	rjmp	.+34     	; 0x12f6 <__floatsisf+0x6a>
    12d4:	77 23       	and	r23, r23
    12d6:	21 f0       	breq	.+8      	; 0x12e0 <__floatsisf+0x54>
    12d8:	9e e8       	ldi	r25, 0x8E	; 142
    12da:	87 2f       	mov	r24, r23
    12dc:	76 2f       	mov	r23, r22
    12de:	05 c0       	rjmp	.+10     	; 0x12ea <__floatsisf+0x5e>
    12e0:	66 23       	and	r22, r22
    12e2:	71 f0       	breq	.+28     	; 0x1300 <__floatsisf+0x74>
    12e4:	96 e8       	ldi	r25, 0x86	; 134
    12e6:	86 2f       	mov	r24, r22
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	2a f0       	brmi	.+10     	; 0x12f8 <__floatsisf+0x6c>
    12ee:	9a 95       	dec	r25
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	da f7       	brpl	.-10     	; 0x12ee <__floatsisf+0x62>
    12f8:	88 0f       	add	r24, r24
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__fp_cmp>:
    1302:	99 0f       	add	r25, r25
    1304:	00 08       	sbc	r0, r0
    1306:	55 0f       	add	r21, r21
    1308:	aa 0b       	sbc	r26, r26
    130a:	e0 e8       	ldi	r30, 0x80	; 128
    130c:	fe ef       	ldi	r31, 0xFE	; 254
    130e:	16 16       	cp	r1, r22
    1310:	17 06       	cpc	r1, r23
    1312:	e8 07       	cpc	r30, r24
    1314:	f9 07       	cpc	r31, r25
    1316:	c0 f0       	brcs	.+48     	; 0x1348 <__fp_cmp+0x46>
    1318:	12 16       	cp	r1, r18
    131a:	13 06       	cpc	r1, r19
    131c:	e4 07       	cpc	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	98 f0       	brcs	.+38     	; 0x1348 <__fp_cmp+0x46>
    1322:	62 1b       	sub	r22, r18
    1324:	73 0b       	sbc	r23, r19
    1326:	84 0b       	sbc	r24, r20
    1328:	95 0b       	sbc	r25, r21
    132a:	39 f4       	brne	.+14     	; 0x133a <__fp_cmp+0x38>
    132c:	0a 26       	eor	r0, r26
    132e:	61 f0       	breq	.+24     	; 0x1348 <__fp_cmp+0x46>
    1330:	23 2b       	or	r18, r19
    1332:	24 2b       	or	r18, r20
    1334:	25 2b       	or	r18, r21
    1336:	21 f4       	brne	.+8      	; 0x1340 <__fp_cmp+0x3e>
    1338:	08 95       	ret
    133a:	0a 26       	eor	r0, r26
    133c:	09 f4       	brne	.+2      	; 0x1340 <__fp_cmp+0x3e>
    133e:	a1 40       	sbci	r26, 0x01	; 1
    1340:	a6 95       	lsr	r26
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	81 1d       	adc	r24, r1
    1346:	81 1d       	adc	r24, r1
    1348:	08 95       	ret

0000134a <__fp_inf>:
    134a:	97 f9       	bld	r25, 7
    134c:	9f 67       	ori	r25, 0x7F	; 127
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	08 95       	ret

00001356 <__fp_nan>:
    1356:	9f ef       	ldi	r25, 0xFF	; 255
    1358:	80 ec       	ldi	r24, 0xC0	; 192
    135a:	08 95       	ret

0000135c <__fp_pscA>:
    135c:	00 24       	eor	r0, r0
    135e:	0a 94       	dec	r0
    1360:	16 16       	cp	r1, r22
    1362:	17 06       	cpc	r1, r23
    1364:	18 06       	cpc	r1, r24
    1366:	09 06       	cpc	r0, r25
    1368:	08 95       	ret

0000136a <__fp_pscB>:
    136a:	00 24       	eor	r0, r0
    136c:	0a 94       	dec	r0
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	14 06       	cpc	r1, r20
    1374:	05 06       	cpc	r0, r21
    1376:	08 95       	ret

00001378 <__fp_round>:
    1378:	09 2e       	mov	r0, r25
    137a:	03 94       	inc	r0
    137c:	00 0c       	add	r0, r0
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_round+0xc>
    1380:	88 23       	and	r24, r24
    1382:	52 f0       	brmi	.+20     	; 0x1398 <__fp_round+0x20>
    1384:	bb 0f       	add	r27, r27
    1386:	40 f4       	brcc	.+16     	; 0x1398 <__fp_round+0x20>
    1388:	bf 2b       	or	r27, r31
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0x18>
    138c:	60 ff       	sbrs	r22, 0
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__fp_round+0x20>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	08 95       	ret

0000139a <__fp_split3>:
    139a:	57 fd       	sbrc	r21, 7
    139c:	90 58       	subi	r25, 0x80	; 128
    139e:	44 0f       	add	r20, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	59 f0       	breq	.+22     	; 0x13ba <__fp_splitA+0x10>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <__fp_splitA+0x1a>
    13a8:	47 95       	ror	r20

000013aa <__fp_splitA>:
    13aa:	88 0f       	add	r24, r24
    13ac:	97 fb       	bst	r25, 7
    13ae:	99 1f       	adc	r25, r25
    13b0:	61 f0       	breq	.+24     	; 0x13ca <__fp_splitA+0x20>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <__fp_splitA+0x2a>
    13b6:	87 95       	ror	r24
    13b8:	08 95       	ret
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	55 1f       	adc	r21, r21
    13c2:	f2 cf       	rjmp	.-28     	; 0x13a8 <__fp_split3+0xe>
    13c4:	46 95       	lsr	r20
    13c6:	f1 df       	rcall	.-30     	; 0x13aa <__fp_splitA>
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <__fp_splitA+0x30>
    13ca:	16 16       	cp	r1, r22
    13cc:	17 06       	cpc	r1, r23
    13ce:	18 06       	cpc	r1, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	f1 cf       	rjmp	.-30     	; 0x13b6 <__fp_splitA+0xc>
    13d4:	86 95       	lsr	r24
    13d6:	71 05       	cpc	r23, r1
    13d8:	61 05       	cpc	r22, r1
    13da:	08 94       	sec
    13dc:	08 95       	ret

000013de <__fp_zero>:
    13de:	e8 94       	clt

000013e0 <__fp_szero>:
    13e0:	bb 27       	eor	r27, r27
    13e2:	66 27       	eor	r22, r22
    13e4:	77 27       	eor	r23, r23
    13e6:	cb 01       	movw	r24, r22
    13e8:	97 f9       	bld	r25, 7
    13ea:	08 95       	ret

000013ec <__mulsf3>:
    13ec:	0b d0       	rcall	.+22     	; 0x1404 <__mulsf3x>
    13ee:	c4 cf       	rjmp	.-120    	; 0x1378 <__fp_round>
    13f0:	b5 df       	rcall	.-150    	; 0x135c <__fp_pscA>
    13f2:	28 f0       	brcs	.+10     	; 0x13fe <__mulsf3+0x12>
    13f4:	ba df       	rcall	.-140    	; 0x136a <__fp_pscB>
    13f6:	18 f0       	brcs	.+6      	; 0x13fe <__mulsf3+0x12>
    13f8:	95 23       	and	r25, r21
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__mulsf3+0x12>
    13fc:	a6 cf       	rjmp	.-180    	; 0x134a <__fp_inf>
    13fe:	ab cf       	rjmp	.-170    	; 0x1356 <__fp_nan>
    1400:	11 24       	eor	r1, r1
    1402:	ee cf       	rjmp	.-36     	; 0x13e0 <__fp_szero>

00001404 <__mulsf3x>:
    1404:	ca df       	rcall	.-108    	; 0x139a <__fp_split3>
    1406:	a0 f3       	brcs	.-24     	; 0x13f0 <__mulsf3+0x4>

00001408 <__mulsf3_pse>:
    1408:	95 9f       	mul	r25, r21
    140a:	d1 f3       	breq	.-12     	; 0x1400 <__mulsf3+0x14>
    140c:	95 0f       	add	r25, r21
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	55 1f       	adc	r21, r21
    1412:	62 9f       	mul	r22, r18
    1414:	f0 01       	movw	r30, r0
    1416:	72 9f       	mul	r23, r18
    1418:	bb 27       	eor	r27, r27
    141a:	f0 0d       	add	r31, r0
    141c:	b1 1d       	adc	r27, r1
    141e:	63 9f       	mul	r22, r19
    1420:	aa 27       	eor	r26, r26
    1422:	f0 0d       	add	r31, r0
    1424:	b1 1d       	adc	r27, r1
    1426:	aa 1f       	adc	r26, r26
    1428:	64 9f       	mul	r22, r20
    142a:	66 27       	eor	r22, r22
    142c:	b0 0d       	add	r27, r0
    142e:	a1 1d       	adc	r26, r1
    1430:	66 1f       	adc	r22, r22
    1432:	82 9f       	mul	r24, r18
    1434:	22 27       	eor	r18, r18
    1436:	b0 0d       	add	r27, r0
    1438:	a1 1d       	adc	r26, r1
    143a:	62 1f       	adc	r22, r18
    143c:	73 9f       	mul	r23, r19
    143e:	b0 0d       	add	r27, r0
    1440:	a1 1d       	adc	r26, r1
    1442:	62 1f       	adc	r22, r18
    1444:	83 9f       	mul	r24, r19
    1446:	a0 0d       	add	r26, r0
    1448:	61 1d       	adc	r22, r1
    144a:	22 1f       	adc	r18, r18
    144c:	74 9f       	mul	r23, r20
    144e:	33 27       	eor	r19, r19
    1450:	a0 0d       	add	r26, r0
    1452:	61 1d       	adc	r22, r1
    1454:	23 1f       	adc	r18, r19
    1456:	84 9f       	mul	r24, r20
    1458:	60 0d       	add	r22, r0
    145a:	21 1d       	adc	r18, r1
    145c:	82 2f       	mov	r24, r18
    145e:	76 2f       	mov	r23, r22
    1460:	6a 2f       	mov	r22, r26
    1462:	11 24       	eor	r1, r1
    1464:	9f 57       	subi	r25, 0x7F	; 127
    1466:	50 40       	sbci	r21, 0x00	; 0
    1468:	8a f0       	brmi	.+34     	; 0x148c <__mulsf3_pse+0x84>
    146a:	e1 f0       	breq	.+56     	; 0x14a4 <__mulsf3_pse+0x9c>
    146c:	88 23       	and	r24, r24
    146e:	4a f0       	brmi	.+18     	; 0x1482 <__mulsf3_pse+0x7a>
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	bb 1f       	adc	r27, r27
    1476:	66 1f       	adc	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	88 1f       	adc	r24, r24
    147c:	91 50       	subi	r25, 0x01	; 1
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	a9 f7       	brne	.-22     	; 0x146c <__mulsf3_pse+0x64>
    1482:	9e 3f       	cpi	r25, 0xFE	; 254
    1484:	51 05       	cpc	r21, r1
    1486:	70 f0       	brcs	.+28     	; 0x14a4 <__mulsf3_pse+0x9c>
    1488:	60 cf       	rjmp	.-320    	; 0x134a <__fp_inf>
    148a:	aa cf       	rjmp	.-172    	; 0x13e0 <__fp_szero>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	ec f3       	brlt	.-6      	; 0x148a <__mulsf3_pse+0x82>
    1490:	98 3e       	cpi	r25, 0xE8	; 232
    1492:	dc f3       	brlt	.-10     	; 0x148a <__mulsf3_pse+0x82>
    1494:	86 95       	lsr	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b7 95       	ror	r27
    149c:	f7 95       	ror	r31
    149e:	e7 95       	ror	r30
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	c1 f7       	brne	.-16     	; 0x1494 <__mulsf3_pse+0x8c>
    14a4:	fe 2b       	or	r31, r30
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret

000014b2 <__divmodhi4>:
    14b2:	97 fb       	bst	r25, 7
    14b4:	07 2e       	mov	r0, r23
    14b6:	16 f4       	brtc	.+4      	; 0x14bc <__divmodhi4+0xa>
    14b8:	00 94       	com	r0
    14ba:	06 d0       	rcall	.+12     	; 0x14c8 <__divmodhi4_neg1>
    14bc:	77 fd       	sbrc	r23, 7
    14be:	08 d0       	rcall	.+16     	; 0x14d0 <__divmodhi4_neg2>
    14c0:	0b d0       	rcall	.+22     	; 0x14d8 <__udivmodhi4>
    14c2:	07 fc       	sbrc	r0, 7
    14c4:	05 d0       	rcall	.+10     	; 0x14d0 <__divmodhi4_neg2>
    14c6:	3e f4       	brtc	.+14     	; 0x14d6 <__divmodhi4_exit>

000014c8 <__divmodhi4_neg1>:
    14c8:	90 95       	com	r25
    14ca:	81 95       	neg	r24
    14cc:	9f 4f       	sbci	r25, 0xFF	; 255
    14ce:	08 95       	ret

000014d0 <__divmodhi4_neg2>:
    14d0:	70 95       	com	r23
    14d2:	61 95       	neg	r22
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255

000014d6 <__divmodhi4_exit>:
    14d6:	08 95       	ret

000014d8 <__udivmodhi4>:
    14d8:	aa 1b       	sub	r26, r26
    14da:	bb 1b       	sub	r27, r27
    14dc:	51 e1       	ldi	r21, 0x11	; 17
    14de:	07 c0       	rjmp	.+14     	; 0x14ee <__udivmodhi4_ep>

000014e0 <__udivmodhi4_loop>:
    14e0:	aa 1f       	adc	r26, r26
    14e2:	bb 1f       	adc	r27, r27
    14e4:	a6 17       	cp	r26, r22
    14e6:	b7 07       	cpc	r27, r23
    14e8:	10 f0       	brcs	.+4      	; 0x14ee <__udivmodhi4_ep>
    14ea:	a6 1b       	sub	r26, r22
    14ec:	b7 0b       	sbc	r27, r23

000014ee <__udivmodhi4_ep>:
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	5a 95       	dec	r21
    14f4:	a9 f7       	brne	.-22     	; 0x14e0 <__udivmodhi4_loop>
    14f6:	80 95       	com	r24
    14f8:	90 95       	com	r25
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	08 95       	ret

00001500 <calloc>:
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	86 9f       	mul	r24, r22
    150a:	80 01       	movw	r16, r0
    150c:	87 9f       	mul	r24, r23
    150e:	10 0d       	add	r17, r0
    1510:	96 9f       	mul	r25, r22
    1512:	10 0d       	add	r17, r0
    1514:	11 24       	eor	r1, r1
    1516:	c8 01       	movw	r24, r16
    1518:	0d d0       	rcall	.+26     	; 0x1534 <malloc>
    151a:	ec 01       	movw	r28, r24
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	21 f0       	breq	.+8      	; 0x1528 <calloc+0x28>
    1520:	a8 01       	movw	r20, r16
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	2d d1       	rcall	.+602    	; 0x1782 <memset>
    1528:	ce 01       	movw	r24, r28
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <malloc>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	91 05       	cpc	r25, r1
    153c:	10 f4       	brcc	.+4      	; 0x1542 <malloc+0xe>
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	e0 91 80 02 	lds	r30, 0x0280
    1546:	f0 91 81 02 	lds	r31, 0x0281
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	a0 e0       	ldi	r26, 0x00	; 0
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	30 97       	sbiw	r30, 0x00	; 0
    1554:	39 f1       	breq	.+78     	; 0x15a4 <malloc+0x70>
    1556:	40 81       	ld	r20, Z
    1558:	51 81       	ldd	r21, Z+1	; 0x01
    155a:	48 17       	cp	r20, r24
    155c:	59 07       	cpc	r21, r25
    155e:	b8 f0       	brcs	.+46     	; 0x158e <malloc+0x5a>
    1560:	48 17       	cp	r20, r24
    1562:	59 07       	cpc	r21, r25
    1564:	71 f4       	brne	.+28     	; 0x1582 <malloc+0x4e>
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	10 97       	sbiw	r26, 0x00	; 0
    156c:	29 f0       	breq	.+10     	; 0x1578 <malloc+0x44>
    156e:	13 96       	adiw	r26, 0x03	; 3
    1570:	9c 93       	st	X, r25
    1572:	8e 93       	st	-X, r24
    1574:	12 97       	sbiw	r26, 0x02	; 2
    1576:	2c c0       	rjmp	.+88     	; 0x15d0 <malloc+0x9c>
    1578:	90 93 81 02 	sts	0x0281, r25
    157c:	80 93 80 02 	sts	0x0280, r24
    1580:	27 c0       	rjmp	.+78     	; 0x15d0 <malloc+0x9c>
    1582:	21 15       	cp	r18, r1
    1584:	31 05       	cpc	r19, r1
    1586:	31 f0       	breq	.+12     	; 0x1594 <malloc+0x60>
    1588:	42 17       	cp	r20, r18
    158a:	53 07       	cpc	r21, r19
    158c:	18 f0       	brcs	.+6      	; 0x1594 <malloc+0x60>
    158e:	a9 01       	movw	r20, r18
    1590:	db 01       	movw	r26, r22
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <malloc+0x62>
    1594:	ef 01       	movw	r28, r30
    1596:	9a 01       	movw	r18, r20
    1598:	bd 01       	movw	r22, r26
    159a:	df 01       	movw	r26, r30
    159c:	02 80       	ldd	r0, Z+2	; 0x02
    159e:	f3 81       	ldd	r31, Z+3	; 0x03
    15a0:	e0 2d       	mov	r30, r0
    15a2:	d7 cf       	rjmp	.-82     	; 0x1552 <malloc+0x1e>
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	f9 f0       	breq	.+62     	; 0x15e8 <malloc+0xb4>
    15aa:	28 1b       	sub	r18, r24
    15ac:	39 0b       	sbc	r19, r25
    15ae:	24 30       	cpi	r18, 0x04	; 4
    15b0:	31 05       	cpc	r19, r1
    15b2:	80 f4       	brcc	.+32     	; 0x15d4 <malloc+0xa0>
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	9b 81       	ldd	r25, Y+3	; 0x03
    15b8:	61 15       	cp	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	21 f0       	breq	.+8      	; 0x15c6 <malloc+0x92>
    15be:	fb 01       	movw	r30, r22
    15c0:	93 83       	std	Z+3, r25	; 0x03
    15c2:	82 83       	std	Z+2, r24	; 0x02
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <malloc+0x9a>
    15c6:	90 93 81 02 	sts	0x0281, r25
    15ca:	80 93 80 02 	sts	0x0280, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	32 96       	adiw	r30, 0x02	; 2
    15d2:	44 c0       	rjmp	.+136    	; 0x165c <malloc+0x128>
    15d4:	fe 01       	movw	r30, r28
    15d6:	e2 0f       	add	r30, r18
    15d8:	f3 1f       	adc	r31, r19
    15da:	81 93       	st	Z+, r24
    15dc:	91 93       	st	Z+, r25
    15de:	22 50       	subi	r18, 0x02	; 2
    15e0:	31 09       	sbc	r19, r1
    15e2:	39 83       	std	Y+1, r19	; 0x01
    15e4:	28 83       	st	Y, r18
    15e6:	3a c0       	rjmp	.+116    	; 0x165c <malloc+0x128>
    15e8:	20 91 7e 02 	lds	r18, 0x027E
    15ec:	30 91 7f 02 	lds	r19, 0x027F
    15f0:	23 2b       	or	r18, r19
    15f2:	41 f4       	brne	.+16     	; 0x1604 <malloc+0xd0>
    15f4:	20 91 02 01 	lds	r18, 0x0102
    15f8:	30 91 03 01 	lds	r19, 0x0103
    15fc:	30 93 7f 02 	sts	0x027F, r19
    1600:	20 93 7e 02 	sts	0x027E, r18
    1604:	20 91 00 01 	lds	r18, 0x0100
    1608:	30 91 01 01 	lds	r19, 0x0101
    160c:	21 15       	cp	r18, r1
    160e:	31 05       	cpc	r19, r1
    1610:	41 f4       	brne	.+16     	; 0x1622 <malloc+0xee>
    1612:	2d b7       	in	r18, 0x3d	; 61
    1614:	3e b7       	in	r19, 0x3e	; 62
    1616:	40 91 04 01 	lds	r20, 0x0104
    161a:	50 91 05 01 	lds	r21, 0x0105
    161e:	24 1b       	sub	r18, r20
    1620:	35 0b       	sbc	r19, r21
    1622:	e0 91 7e 02 	lds	r30, 0x027E
    1626:	f0 91 7f 02 	lds	r31, 0x027F
    162a:	e2 17       	cp	r30, r18
    162c:	f3 07       	cpc	r31, r19
    162e:	a0 f4       	brcc	.+40     	; 0x1658 <malloc+0x124>
    1630:	2e 1b       	sub	r18, r30
    1632:	3f 0b       	sbc	r19, r31
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	78 f0       	brcs	.+30     	; 0x1658 <malloc+0x124>
    163a:	ac 01       	movw	r20, r24
    163c:	4e 5f       	subi	r20, 0xFE	; 254
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	24 17       	cp	r18, r20
    1642:	35 07       	cpc	r19, r21
    1644:	48 f0       	brcs	.+18     	; 0x1658 <malloc+0x124>
    1646:	4e 0f       	add	r20, r30
    1648:	5f 1f       	adc	r21, r31
    164a:	50 93 7f 02 	sts	0x027F, r21
    164e:	40 93 7e 02 	sts	0x027E, r20
    1652:	81 93       	st	Z+, r24
    1654:	91 93       	st	Z+, r25
    1656:	02 c0       	rjmp	.+4      	; 0x165c <malloc+0x128>
    1658:	e0 e0       	ldi	r30, 0x00	; 0
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	cf 01       	movw	r24, r30
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <free>:
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	09 f4       	brne	.+2      	; 0x166e <free+0xa>
    166c:	87 c0       	rjmp	.+270    	; 0x177c <free+0x118>
    166e:	fc 01       	movw	r30, r24
    1670:	32 97       	sbiw	r30, 0x02	; 2
    1672:	13 82       	std	Z+3, r1	; 0x03
    1674:	12 82       	std	Z+2, r1	; 0x02
    1676:	c0 91 80 02 	lds	r28, 0x0280
    167a:	d0 91 81 02 	lds	r29, 0x0281
    167e:	20 97       	sbiw	r28, 0x00	; 0
    1680:	81 f4       	brne	.+32     	; 0x16a2 <free+0x3e>
    1682:	20 81       	ld	r18, Z
    1684:	31 81       	ldd	r19, Z+1	; 0x01
    1686:	28 0f       	add	r18, r24
    1688:	39 1f       	adc	r19, r25
    168a:	80 91 7e 02 	lds	r24, 0x027E
    168e:	90 91 7f 02 	lds	r25, 0x027F
    1692:	82 17       	cp	r24, r18
    1694:	93 07       	cpc	r25, r19
    1696:	79 f5       	brne	.+94     	; 0x16f6 <free+0x92>
    1698:	f0 93 7f 02 	sts	0x027F, r31
    169c:	e0 93 7e 02 	sts	0x027E, r30
    16a0:	6d c0       	rjmp	.+218    	; 0x177c <free+0x118>
    16a2:	de 01       	movw	r26, r28
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	ae 17       	cp	r26, r30
    16aa:	bf 07       	cpc	r27, r31
    16ac:	50 f4       	brcc	.+20     	; 0x16c2 <free+0x5e>
    16ae:	12 96       	adiw	r26, 0x02	; 2
    16b0:	4d 91       	ld	r20, X+
    16b2:	5c 91       	ld	r21, X
    16b4:	13 97       	sbiw	r26, 0x03	; 3
    16b6:	9d 01       	movw	r18, r26
    16b8:	41 15       	cp	r20, r1
    16ba:	51 05       	cpc	r21, r1
    16bc:	09 f1       	breq	.+66     	; 0x1700 <free+0x9c>
    16be:	da 01       	movw	r26, r20
    16c0:	f3 cf       	rjmp	.-26     	; 0x16a8 <free+0x44>
    16c2:	b3 83       	std	Z+3, r27	; 0x03
    16c4:	a2 83       	std	Z+2, r26	; 0x02
    16c6:	40 81       	ld	r20, Z
    16c8:	51 81       	ldd	r21, Z+1	; 0x01
    16ca:	84 0f       	add	r24, r20
    16cc:	95 1f       	adc	r25, r21
    16ce:	8a 17       	cp	r24, r26
    16d0:	9b 07       	cpc	r25, r27
    16d2:	71 f4       	brne	.+28     	; 0x16f0 <free+0x8c>
    16d4:	8d 91       	ld	r24, X+
    16d6:	9c 91       	ld	r25, X
    16d8:	11 97       	sbiw	r26, 0x01	; 1
    16da:	84 0f       	add	r24, r20
    16dc:	95 1f       	adc	r25, r21
    16de:	02 96       	adiw	r24, 0x02	; 2
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	8d 91       	ld	r24, X+
    16e8:	9c 91       	ld	r25, X
    16ea:	13 97       	sbiw	r26, 0x03	; 3
    16ec:	93 83       	std	Z+3, r25	; 0x03
    16ee:	82 83       	std	Z+2, r24	; 0x02
    16f0:	21 15       	cp	r18, r1
    16f2:	31 05       	cpc	r19, r1
    16f4:	29 f4       	brne	.+10     	; 0x1700 <free+0x9c>
    16f6:	f0 93 81 02 	sts	0x0281, r31
    16fa:	e0 93 80 02 	sts	0x0280, r30
    16fe:	3e c0       	rjmp	.+124    	; 0x177c <free+0x118>
    1700:	d9 01       	movw	r26, r18
    1702:	13 96       	adiw	r26, 0x03	; 3
    1704:	fc 93       	st	X, r31
    1706:	ee 93       	st	-X, r30
    1708:	12 97       	sbiw	r26, 0x02	; 2
    170a:	4d 91       	ld	r20, X+
    170c:	5d 91       	ld	r21, X+
    170e:	a4 0f       	add	r26, r20
    1710:	b5 1f       	adc	r27, r21
    1712:	ea 17       	cp	r30, r26
    1714:	fb 07       	cpc	r31, r27
    1716:	79 f4       	brne	.+30     	; 0x1736 <free+0xd2>
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	84 0f       	add	r24, r20
    171e:	95 1f       	adc	r25, r21
    1720:	02 96       	adiw	r24, 0x02	; 2
    1722:	d9 01       	movw	r26, r18
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	13 96       	adiw	r26, 0x03	; 3
    1730:	9c 93       	st	X, r25
    1732:	8e 93       	st	-X, r24
    1734:	12 97       	sbiw	r26, 0x02	; 2
    1736:	e0 e0       	ldi	r30, 0x00	; 0
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	19 f0       	breq	.+6      	; 0x1748 <free+0xe4>
    1742:	fe 01       	movw	r30, r28
    1744:	ec 01       	movw	r28, r24
    1746:	f9 cf       	rjmp	.-14     	; 0x173a <free+0xd6>
    1748:	ce 01       	movw	r24, r28
    174a:	02 96       	adiw	r24, 0x02	; 2
    174c:	28 81       	ld	r18, Y
    174e:	39 81       	ldd	r19, Y+1	; 0x01
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	20 91 7e 02 	lds	r18, 0x027E
    1758:	30 91 7f 02 	lds	r19, 0x027F
    175c:	28 17       	cp	r18, r24
    175e:	39 07       	cpc	r19, r25
    1760:	69 f4       	brne	.+26     	; 0x177c <free+0x118>
    1762:	30 97       	sbiw	r30, 0x00	; 0
    1764:	29 f4       	brne	.+10     	; 0x1770 <free+0x10c>
    1766:	10 92 81 02 	sts	0x0281, r1
    176a:	10 92 80 02 	sts	0x0280, r1
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <free+0x110>
    1770:	13 82       	std	Z+3, r1	; 0x03
    1772:	12 82       	std	Z+2, r1	; 0x02
    1774:	d0 93 7f 02 	sts	0x027F, r29
    1778:	c0 93 7e 02 	sts	0x027E, r28
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	08 95       	ret

00001782 <memset>:
    1782:	dc 01       	movw	r26, r24
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <memset+0x6>
    1786:	6d 93       	st	X+, r22
    1788:	41 50       	subi	r20, 0x01	; 1
    178a:	50 40       	sbci	r21, 0x00	; 0
    178c:	e0 f7       	brcc	.-8      	; 0x1786 <memset+0x4>
    178e:	08 95       	ret

00001790 <strcmp>:
    1790:	fb 01       	movw	r30, r22
    1792:	dc 01       	movw	r26, r24
    1794:	8d 91       	ld	r24, X+
    1796:	01 90       	ld	r0, Z+
    1798:	80 19       	sub	r24, r0
    179a:	01 10       	cpse	r0, r1
    179c:	d9 f3       	breq	.-10     	; 0x1794 <strcmp+0x4>
    179e:	99 0b       	sbc	r25, r25
    17a0:	08 95       	ret

000017a2 <strcpy>:
    17a2:	fb 01       	movw	r30, r22
    17a4:	dc 01       	movw	r26, r24
    17a6:	01 90       	ld	r0, Z+
    17a8:	0d 92       	st	X+, r0
    17aa:	00 20       	and	r0, r0
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <strcpy+0x4>
    17ae:	08 95       	ret

000017b0 <vsnprintf>:
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	2e 97       	sbiw	r28, 0x0e	; 14
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	8c 01       	movw	r16, r24
    17ca:	ca 01       	movw	r24, r20
    17cc:	46 e0       	ldi	r20, 0x06	; 6
    17ce:	4c 83       	std	Y+4, r20	; 0x04
    17d0:	1a 83       	std	Y+2, r17	; 0x02
    17d2:	09 83       	std	Y+1, r16	; 0x01
    17d4:	77 ff       	sbrs	r23, 7
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vsnprintf+0x2c>
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	70 e8       	ldi	r23, 0x80	; 128
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	71 09       	sbc	r23, r1
    17e0:	7e 83       	std	Y+6, r23	; 0x06
    17e2:	6d 83       	std	Y+5, r22	; 0x05
    17e4:	a9 01       	movw	r20, r18
    17e6:	bc 01       	movw	r22, r24
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	19 d0       	rcall	.+50     	; 0x1820 <vfprintf>
    17ee:	4d 81       	ldd	r20, Y+5	; 0x05
    17f0:	5e 81       	ldd	r21, Y+6	; 0x06
    17f2:	57 fd       	sbrc	r21, 7
    17f4:	0a c0       	rjmp	.+20     	; 0x180a <vsnprintf+0x5a>
    17f6:	2f 81       	ldd	r18, Y+7	; 0x07
    17f8:	38 85       	ldd	r19, Y+8	; 0x08
    17fa:	42 17       	cp	r20, r18
    17fc:	53 07       	cpc	r21, r19
    17fe:	0c f4       	brge	.+2      	; 0x1802 <vsnprintf+0x52>
    1800:	9a 01       	movw	r18, r20
    1802:	f8 01       	movw	r30, r16
    1804:	e2 0f       	add	r30, r18
    1806:	f3 1f       	adc	r31, r19
    1808:	10 82       	st	Z, r1
    180a:	2e 96       	adiw	r28, 0x0e	; 14
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <vfprintf>:
    1820:	2f 92       	push	r2
    1822:	3f 92       	push	r3
    1824:	4f 92       	push	r4
    1826:	5f 92       	push	r5
    1828:	6f 92       	push	r6
    182a:	7f 92       	push	r7
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2c 97       	sbiw	r28, 0x0c	; 12
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	7c 01       	movw	r14, r24
    1856:	6b 01       	movw	r12, r22
    1858:	8a 01       	movw	r16, r20
    185a:	fc 01       	movw	r30, r24
    185c:	17 82       	std	Z+7, r1	; 0x07
    185e:	16 82       	std	Z+6, r1	; 0x06
    1860:	83 81       	ldd	r24, Z+3	; 0x03
    1862:	81 ff       	sbrs	r24, 1
    1864:	b0 c1       	rjmp	.+864    	; 0x1bc6 <vfprintf+0x3a6>
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	4c 01       	movw	r8, r24
    186c:	f7 01       	movw	r30, r14
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	f6 01       	movw	r30, r12
    1872:	93 fd       	sbrc	r25, 3
    1874:	85 91       	lpm	r24, Z+
    1876:	93 ff       	sbrs	r25, 3
    1878:	81 91       	ld	r24, Z+
    187a:	6f 01       	movw	r12, r30
    187c:	88 23       	and	r24, r24
    187e:	09 f4       	brne	.+2      	; 0x1882 <vfprintf+0x62>
    1880:	9e c1       	rjmp	.+828    	; 0x1bbe <vfprintf+0x39e>
    1882:	85 32       	cpi	r24, 0x25	; 37
    1884:	39 f4       	brne	.+14     	; 0x1894 <vfprintf+0x74>
    1886:	93 fd       	sbrc	r25, 3
    1888:	85 91       	lpm	r24, Z+
    188a:	93 ff       	sbrs	r25, 3
    188c:	81 91       	ld	r24, Z+
    188e:	6f 01       	movw	r12, r30
    1890:	85 32       	cpi	r24, 0x25	; 37
    1892:	21 f4       	brne	.+8      	; 0x189c <vfprintf+0x7c>
    1894:	b7 01       	movw	r22, r14
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	c7 d1       	rcall	.+910    	; 0x1c28 <fputc>
    189a:	e8 cf       	rjmp	.-48     	; 0x186c <vfprintf+0x4c>
    189c:	51 2c       	mov	r5, r1
    189e:	31 2c       	mov	r3, r1
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	20 32       	cpi	r18, 0x20	; 32
    18a4:	a0 f4       	brcc	.+40     	; 0x18ce <vfprintf+0xae>
    18a6:	8b 32       	cpi	r24, 0x2B	; 43
    18a8:	69 f0       	breq	.+26     	; 0x18c4 <vfprintf+0xa4>
    18aa:	30 f4       	brcc	.+12     	; 0x18b8 <vfprintf+0x98>
    18ac:	80 32       	cpi	r24, 0x20	; 32
    18ae:	59 f0       	breq	.+22     	; 0x18c6 <vfprintf+0xa6>
    18b0:	83 32       	cpi	r24, 0x23	; 35
    18b2:	69 f4       	brne	.+26     	; 0x18ce <vfprintf+0xae>
    18b4:	20 61       	ori	r18, 0x10	; 16
    18b6:	2c c0       	rjmp	.+88     	; 0x1910 <vfprintf+0xf0>
    18b8:	8d 32       	cpi	r24, 0x2D	; 45
    18ba:	39 f0       	breq	.+14     	; 0x18ca <vfprintf+0xaa>
    18bc:	80 33       	cpi	r24, 0x30	; 48
    18be:	39 f4       	brne	.+14     	; 0x18ce <vfprintf+0xae>
    18c0:	21 60       	ori	r18, 0x01	; 1
    18c2:	26 c0       	rjmp	.+76     	; 0x1910 <vfprintf+0xf0>
    18c4:	22 60       	ori	r18, 0x02	; 2
    18c6:	24 60       	ori	r18, 0x04	; 4
    18c8:	23 c0       	rjmp	.+70     	; 0x1910 <vfprintf+0xf0>
    18ca:	28 60       	ori	r18, 0x08	; 8
    18cc:	21 c0       	rjmp	.+66     	; 0x1910 <vfprintf+0xf0>
    18ce:	27 fd       	sbrc	r18, 7
    18d0:	27 c0       	rjmp	.+78     	; 0x1920 <vfprintf+0x100>
    18d2:	30 ed       	ldi	r19, 0xD0	; 208
    18d4:	38 0f       	add	r19, r24
    18d6:	3a 30       	cpi	r19, 0x0A	; 10
    18d8:	78 f4       	brcc	.+30     	; 0x18f8 <vfprintf+0xd8>
    18da:	26 ff       	sbrs	r18, 6
    18dc:	06 c0       	rjmp	.+12     	; 0x18ea <vfprintf+0xca>
    18de:	fa e0       	ldi	r31, 0x0A	; 10
    18e0:	5f 9e       	mul	r5, r31
    18e2:	30 0d       	add	r19, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	53 2e       	mov	r5, r19
    18e8:	13 c0       	rjmp	.+38     	; 0x1910 <vfprintf+0xf0>
    18ea:	8a e0       	ldi	r24, 0x0A	; 10
    18ec:	38 9e       	mul	r3, r24
    18ee:	30 0d       	add	r19, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	33 2e       	mov	r3, r19
    18f4:	20 62       	ori	r18, 0x20	; 32
    18f6:	0c c0       	rjmp	.+24     	; 0x1910 <vfprintf+0xf0>
    18f8:	8e 32       	cpi	r24, 0x2E	; 46
    18fa:	21 f4       	brne	.+8      	; 0x1904 <vfprintf+0xe4>
    18fc:	26 fd       	sbrc	r18, 6
    18fe:	5f c1       	rjmp	.+702    	; 0x1bbe <vfprintf+0x39e>
    1900:	20 64       	ori	r18, 0x40	; 64
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <vfprintf+0xf0>
    1904:	8c 36       	cpi	r24, 0x6C	; 108
    1906:	11 f4       	brne	.+4      	; 0x190c <vfprintf+0xec>
    1908:	20 68       	ori	r18, 0x80	; 128
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0xf0>
    190c:	88 36       	cpi	r24, 0x68	; 104
    190e:	41 f4       	brne	.+16     	; 0x1920 <vfprintf+0x100>
    1910:	f6 01       	movw	r30, r12
    1912:	93 fd       	sbrc	r25, 3
    1914:	85 91       	lpm	r24, Z+
    1916:	93 ff       	sbrs	r25, 3
    1918:	81 91       	ld	r24, Z+
    191a:	6f 01       	movw	r12, r30
    191c:	81 11       	cpse	r24, r1
    191e:	c1 cf       	rjmp	.-126    	; 0x18a2 <vfprintf+0x82>
    1920:	98 2f       	mov	r25, r24
    1922:	9f 7d       	andi	r25, 0xDF	; 223
    1924:	95 54       	subi	r25, 0x45	; 69
    1926:	93 30       	cpi	r25, 0x03	; 3
    1928:	28 f4       	brcc	.+10     	; 0x1934 <vfprintf+0x114>
    192a:	0c 5f       	subi	r16, 0xFC	; 252
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	ff e3       	ldi	r31, 0x3F	; 63
    1930:	f9 83       	std	Y+1, r31	; 0x01
    1932:	0d c0       	rjmp	.+26     	; 0x194e <vfprintf+0x12e>
    1934:	83 36       	cpi	r24, 0x63	; 99
    1936:	31 f0       	breq	.+12     	; 0x1944 <vfprintf+0x124>
    1938:	83 37       	cpi	r24, 0x73	; 115
    193a:	71 f0       	breq	.+28     	; 0x1958 <vfprintf+0x138>
    193c:	83 35       	cpi	r24, 0x53	; 83
    193e:	09 f0       	breq	.+2      	; 0x1942 <vfprintf+0x122>
    1940:	57 c0       	rjmp	.+174    	; 0x19f0 <vfprintf+0x1d0>
    1942:	21 c0       	rjmp	.+66     	; 0x1986 <vfprintf+0x166>
    1944:	f8 01       	movw	r30, r16
    1946:	80 81       	ld	r24, Z
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	0e 5f       	subi	r16, 0xFE	; 254
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	44 24       	eor	r4, r4
    1950:	43 94       	inc	r4
    1952:	51 2c       	mov	r5, r1
    1954:	54 01       	movw	r10, r8
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <vfprintf+0x160>
    1958:	38 01       	movw	r6, r16
    195a:	f2 e0       	ldi	r31, 0x02	; 2
    195c:	6f 0e       	add	r6, r31
    195e:	71 1c       	adc	r7, r1
    1960:	f8 01       	movw	r30, r16
    1962:	a0 80       	ld	r10, Z
    1964:	b1 80       	ldd	r11, Z+1	; 0x01
    1966:	26 ff       	sbrs	r18, 6
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <vfprintf+0x150>
    196a:	65 2d       	mov	r22, r5
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x154>
    1970:	6f ef       	ldi	r22, 0xFF	; 255
    1972:	7f ef       	ldi	r23, 0xFF	; 255
    1974:	c5 01       	movw	r24, r10
    1976:	2c 87       	std	Y+12, r18	; 0x0c
    1978:	4c d1       	rcall	.+664    	; 0x1c12 <strnlen>
    197a:	2c 01       	movw	r4, r24
    197c:	83 01       	movw	r16, r6
    197e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1980:	2f 77       	andi	r18, 0x7F	; 127
    1982:	22 2e       	mov	r2, r18
    1984:	16 c0       	rjmp	.+44     	; 0x19b2 <vfprintf+0x192>
    1986:	38 01       	movw	r6, r16
    1988:	f2 e0       	ldi	r31, 0x02	; 2
    198a:	6f 0e       	add	r6, r31
    198c:	71 1c       	adc	r7, r1
    198e:	f8 01       	movw	r30, r16
    1990:	a0 80       	ld	r10, Z
    1992:	b1 80       	ldd	r11, Z+1	; 0x01
    1994:	26 ff       	sbrs	r18, 6
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfprintf+0x17e>
    1998:	65 2d       	mov	r22, r5
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x182>
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	7f ef       	ldi	r23, 0xFF	; 255
    19a2:	c5 01       	movw	r24, r10
    19a4:	2c 87       	std	Y+12, r18	; 0x0c
    19a6:	2a d1       	rcall	.+596    	; 0x1bfc <strnlen_P>
    19a8:	2c 01       	movw	r4, r24
    19aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ac:	20 68       	ori	r18, 0x80	; 128
    19ae:	22 2e       	mov	r2, r18
    19b0:	83 01       	movw	r16, r6
    19b2:	23 fc       	sbrc	r2, 3
    19b4:	19 c0       	rjmp	.+50     	; 0x19e8 <vfprintf+0x1c8>
    19b6:	83 2d       	mov	r24, r3
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	48 16       	cp	r4, r24
    19bc:	59 06       	cpc	r5, r25
    19be:	a0 f4       	brcc	.+40     	; 0x19e8 <vfprintf+0x1c8>
    19c0:	b7 01       	movw	r22, r14
    19c2:	80 e2       	ldi	r24, 0x20	; 32
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	30 d1       	rcall	.+608    	; 0x1c28 <fputc>
    19c8:	3a 94       	dec	r3
    19ca:	f5 cf       	rjmp	.-22     	; 0x19b6 <vfprintf+0x196>
    19cc:	f5 01       	movw	r30, r10
    19ce:	27 fc       	sbrc	r2, 7
    19d0:	85 91       	lpm	r24, Z+
    19d2:	27 fe       	sbrs	r2, 7
    19d4:	81 91       	ld	r24, Z+
    19d6:	5f 01       	movw	r10, r30
    19d8:	b7 01       	movw	r22, r14
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	25 d1       	rcall	.+586    	; 0x1c28 <fputc>
    19de:	31 10       	cpse	r3, r1
    19e0:	3a 94       	dec	r3
    19e2:	f1 e0       	ldi	r31, 0x01	; 1
    19e4:	4f 1a       	sub	r4, r31
    19e6:	51 08       	sbc	r5, r1
    19e8:	41 14       	cp	r4, r1
    19ea:	51 04       	cpc	r5, r1
    19ec:	79 f7       	brne	.-34     	; 0x19cc <vfprintf+0x1ac>
    19ee:	de c0       	rjmp	.+444    	; 0x1bac <vfprintf+0x38c>
    19f0:	84 36       	cpi	r24, 0x64	; 100
    19f2:	11 f0       	breq	.+4      	; 0x19f8 <vfprintf+0x1d8>
    19f4:	89 36       	cpi	r24, 0x69	; 105
    19f6:	31 f5       	brne	.+76     	; 0x1a44 <vfprintf+0x224>
    19f8:	f8 01       	movw	r30, r16
    19fa:	27 ff       	sbrs	r18, 7
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <vfprintf+0x1ec>
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0c 5f       	subi	r16, 0xFC	; 252
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	08 c0       	rjmp	.+16     	; 0x1a1c <vfprintf+0x1fc>
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	88 27       	eor	r24, r24
    1a12:	77 fd       	sbrc	r23, 7
    1a14:	80 95       	com	r24
    1a16:	98 2f       	mov	r25, r24
    1a18:	0e 5f       	subi	r16, 0xFE	; 254
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	2f 76       	andi	r18, 0x6F	; 111
    1a1e:	b2 2e       	mov	r11, r18
    1a20:	97 ff       	sbrs	r25, 7
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <vfprintf+0x216>
    1a24:	90 95       	com	r25
    1a26:	80 95       	com	r24
    1a28:	70 95       	com	r23
    1a2a:	61 95       	neg	r22
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	20 68       	ori	r18, 0x80	; 128
    1a34:	b2 2e       	mov	r11, r18
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	a4 01       	movw	r20, r8
    1a3c:	27 d1       	rcall	.+590    	; 0x1c8c <__ultoa_invert>
    1a3e:	a8 2e       	mov	r10, r24
    1a40:	a8 18       	sub	r10, r8
    1a42:	43 c0       	rjmp	.+134    	; 0x1aca <vfprintf+0x2aa>
    1a44:	85 37       	cpi	r24, 0x75	; 117
    1a46:	29 f4       	brne	.+10     	; 0x1a52 <vfprintf+0x232>
    1a48:	2f 7e       	andi	r18, 0xEF	; 239
    1a4a:	b2 2e       	mov	r11, r18
    1a4c:	2a e0       	ldi	r18, 0x0A	; 10
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	25 c0       	rjmp	.+74     	; 0x1a9c <vfprintf+0x27c>
    1a52:	f2 2f       	mov	r31, r18
    1a54:	f9 7f       	andi	r31, 0xF9	; 249
    1a56:	bf 2e       	mov	r11, r31
    1a58:	8f 36       	cpi	r24, 0x6F	; 111
    1a5a:	c1 f0       	breq	.+48     	; 0x1a8c <vfprintf+0x26c>
    1a5c:	18 f4       	brcc	.+6      	; 0x1a64 <vfprintf+0x244>
    1a5e:	88 35       	cpi	r24, 0x58	; 88
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <vfprintf+0x260>
    1a62:	ad c0       	rjmp	.+346    	; 0x1bbe <vfprintf+0x39e>
    1a64:	80 37       	cpi	r24, 0x70	; 112
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <vfprintf+0x24e>
    1a68:	88 37       	cpi	r24, 0x78	; 120
    1a6a:	21 f0       	breq	.+8      	; 0x1a74 <vfprintf+0x254>
    1a6c:	a8 c0       	rjmp	.+336    	; 0x1bbe <vfprintf+0x39e>
    1a6e:	2f 2f       	mov	r18, r31
    1a70:	20 61       	ori	r18, 0x10	; 16
    1a72:	b2 2e       	mov	r11, r18
    1a74:	b4 fe       	sbrs	r11, 4
    1a76:	0d c0       	rjmp	.+26     	; 0x1a92 <vfprintf+0x272>
    1a78:	8b 2d       	mov	r24, r11
    1a7a:	84 60       	ori	r24, 0x04	; 4
    1a7c:	b8 2e       	mov	r11, r24
    1a7e:	09 c0       	rjmp	.+18     	; 0x1a92 <vfprintf+0x272>
    1a80:	24 ff       	sbrs	r18, 4
    1a82:	0a c0       	rjmp	.+20     	; 0x1a98 <vfprintf+0x278>
    1a84:	9f 2f       	mov	r25, r31
    1a86:	96 60       	ori	r25, 0x06	; 6
    1a88:	b9 2e       	mov	r11, r25
    1a8a:	06 c0       	rjmp	.+12     	; 0x1a98 <vfprintf+0x278>
    1a8c:	28 e0       	ldi	r18, 0x08	; 8
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	05 c0       	rjmp	.+10     	; 0x1a9c <vfprintf+0x27c>
    1a92:	20 e1       	ldi	r18, 0x10	; 16
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0x27c>
    1a98:	20 e1       	ldi	r18, 0x10	; 16
    1a9a:	32 e0       	ldi	r19, 0x02	; 2
    1a9c:	f8 01       	movw	r30, r16
    1a9e:	b7 fe       	sbrs	r11, 7
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <vfprintf+0x290>
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	0c 5f       	subi	r16, 0xFC	; 252
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <vfprintf+0x29c>
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	0e 5f       	subi	r16, 0xFE	; 254
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	a4 01       	movw	r20, r8
    1abe:	e6 d0       	rcall	.+460    	; 0x1c8c <__ultoa_invert>
    1ac0:	a8 2e       	mov	r10, r24
    1ac2:	a8 18       	sub	r10, r8
    1ac4:	fb 2d       	mov	r31, r11
    1ac6:	ff 77       	andi	r31, 0x7F	; 127
    1ac8:	bf 2e       	mov	r11, r31
    1aca:	b6 fe       	sbrs	r11, 6
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <vfprintf+0x2c4>
    1ace:	2b 2d       	mov	r18, r11
    1ad0:	2e 7f       	andi	r18, 0xFE	; 254
    1ad2:	a5 14       	cp	r10, r5
    1ad4:	50 f4       	brcc	.+20     	; 0x1aea <vfprintf+0x2ca>
    1ad6:	b4 fe       	sbrs	r11, 4
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <vfprintf+0x2ce>
    1ada:	b2 fc       	sbrc	r11, 2
    1adc:	08 c0       	rjmp	.+16     	; 0x1aee <vfprintf+0x2ce>
    1ade:	2b 2d       	mov	r18, r11
    1ae0:	2e 7e       	andi	r18, 0xEE	; 238
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <vfprintf+0x2ce>
    1ae4:	7a 2c       	mov	r7, r10
    1ae6:	2b 2d       	mov	r18, r11
    1ae8:	03 c0       	rjmp	.+6      	; 0x1af0 <vfprintf+0x2d0>
    1aea:	7a 2c       	mov	r7, r10
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <vfprintf+0x2d0>
    1aee:	75 2c       	mov	r7, r5
    1af0:	24 ff       	sbrs	r18, 4
    1af2:	0d c0       	rjmp	.+26     	; 0x1b0e <vfprintf+0x2ee>
    1af4:	fe 01       	movw	r30, r28
    1af6:	ea 0d       	add	r30, r10
    1af8:	f1 1d       	adc	r31, r1
    1afa:	80 81       	ld	r24, Z
    1afc:	80 33       	cpi	r24, 0x30	; 48
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <vfprintf+0x2e4>
    1b00:	29 7e       	andi	r18, 0xE9	; 233
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <vfprintf+0x2f6>
    1b04:	22 ff       	sbrs	r18, 2
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <vfprintf+0x2f4>
    1b08:	73 94       	inc	r7
    1b0a:	73 94       	inc	r7
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <vfprintf+0x2f6>
    1b0e:	82 2f       	mov	r24, r18
    1b10:	86 78       	andi	r24, 0x86	; 134
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <vfprintf+0x2f6>
    1b14:	73 94       	inc	r7
    1b16:	23 fd       	sbrc	r18, 3
    1b18:	12 c0       	rjmp	.+36     	; 0x1b3e <vfprintf+0x31e>
    1b1a:	20 ff       	sbrs	r18, 0
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0x30a>
    1b1e:	5a 2c       	mov	r5, r10
    1b20:	73 14       	cp	r7, r3
    1b22:	18 f4       	brcc	.+6      	; 0x1b2a <vfprintf+0x30a>
    1b24:	53 0c       	add	r5, r3
    1b26:	57 18       	sub	r5, r7
    1b28:	73 2c       	mov	r7, r3
    1b2a:	73 14       	cp	r7, r3
    1b2c:	60 f4       	brcc	.+24     	; 0x1b46 <vfprintf+0x326>
    1b2e:	b7 01       	movw	r22, r14
    1b30:	80 e2       	ldi	r24, 0x20	; 32
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2c 87       	std	Y+12, r18	; 0x0c
    1b36:	78 d0       	rcall	.+240    	; 0x1c28 <fputc>
    1b38:	73 94       	inc	r7
    1b3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b3c:	f6 cf       	rjmp	.-20     	; 0x1b2a <vfprintf+0x30a>
    1b3e:	73 14       	cp	r7, r3
    1b40:	10 f4       	brcc	.+4      	; 0x1b46 <vfprintf+0x326>
    1b42:	37 18       	sub	r3, r7
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <vfprintf+0x328>
    1b46:	31 2c       	mov	r3, r1
    1b48:	24 ff       	sbrs	r18, 4
    1b4a:	11 c0       	rjmp	.+34     	; 0x1b6e <vfprintf+0x34e>
    1b4c:	b7 01       	movw	r22, r14
    1b4e:	80 e3       	ldi	r24, 0x30	; 48
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	2c 87       	std	Y+12, r18	; 0x0c
    1b54:	69 d0       	rcall	.+210    	; 0x1c28 <fputc>
    1b56:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b58:	22 ff       	sbrs	r18, 2
    1b5a:	16 c0       	rjmp	.+44     	; 0x1b88 <vfprintf+0x368>
    1b5c:	21 ff       	sbrs	r18, 1
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <vfprintf+0x346>
    1b60:	88 e5       	ldi	r24, 0x58	; 88
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <vfprintf+0x34a>
    1b66:	88 e7       	ldi	r24, 0x78	; 120
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	0c c0       	rjmp	.+24     	; 0x1b86 <vfprintf+0x366>
    1b6e:	82 2f       	mov	r24, r18
    1b70:	86 78       	andi	r24, 0x86	; 134
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <vfprintf+0x368>
    1b74:	21 fd       	sbrc	r18, 1
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <vfprintf+0x35c>
    1b78:	80 e2       	ldi	r24, 0x20	; 32
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <vfprintf+0x35e>
    1b7c:	8b e2       	ldi	r24, 0x2B	; 43
    1b7e:	27 fd       	sbrc	r18, 7
    1b80:	8d e2       	ldi	r24, 0x2D	; 45
    1b82:	b7 01       	movw	r22, r14
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	50 d0       	rcall	.+160    	; 0x1c28 <fputc>
    1b88:	a5 14       	cp	r10, r5
    1b8a:	30 f4       	brcc	.+12     	; 0x1b98 <vfprintf+0x378>
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	80 e3       	ldi	r24, 0x30	; 48
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	4a d0       	rcall	.+148    	; 0x1c28 <fputc>
    1b94:	5a 94       	dec	r5
    1b96:	f8 cf       	rjmp	.-16     	; 0x1b88 <vfprintf+0x368>
    1b98:	aa 94       	dec	r10
    1b9a:	f4 01       	movw	r30, r8
    1b9c:	ea 0d       	add	r30, r10
    1b9e:	f1 1d       	adc	r31, r1
    1ba0:	80 81       	ld	r24, Z
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	40 d0       	rcall	.+128    	; 0x1c28 <fputc>
    1ba8:	a1 10       	cpse	r10, r1
    1baa:	f6 cf       	rjmp	.-20     	; 0x1b98 <vfprintf+0x378>
    1bac:	33 20       	and	r3, r3
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <vfprintf+0x392>
    1bb0:	5d ce       	rjmp	.-838    	; 0x186c <vfprintf+0x4c>
    1bb2:	b7 01       	movw	r22, r14
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	37 d0       	rcall	.+110    	; 0x1c28 <fputc>
    1bba:	3a 94       	dec	r3
    1bbc:	f7 cf       	rjmp	.-18     	; 0x1bac <vfprintf+0x38c>
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	86 81       	ldd	r24, Z+6	; 0x06
    1bc2:	97 81       	ldd	r25, Z+7	; 0x07
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x3aa>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	2c 96       	adiw	r28, 0x0c	; 12
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	df 90       	pop	r13
    1be4:	cf 90       	pop	r12
    1be6:	bf 90       	pop	r11
    1be8:	af 90       	pop	r10
    1bea:	9f 90       	pop	r9
    1bec:	8f 90       	pop	r8
    1bee:	7f 90       	pop	r7
    1bf0:	6f 90       	pop	r6
    1bf2:	5f 90       	pop	r5
    1bf4:	4f 90       	pop	r4
    1bf6:	3f 90       	pop	r3
    1bf8:	2f 90       	pop	r2
    1bfa:	08 95       	ret

00001bfc <strnlen_P>:
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	05 90       	lpm	r0, Z+
    1c00:	61 50       	subi	r22, 0x01	; 1
    1c02:	70 40       	sbci	r23, 0x00	; 0
    1c04:	01 10       	cpse	r0, r1
    1c06:	d8 f7       	brcc	.-10     	; 0x1bfe <strnlen_P+0x2>
    1c08:	80 95       	com	r24
    1c0a:	90 95       	com	r25
    1c0c:	8e 0f       	add	r24, r30
    1c0e:	9f 1f       	adc	r25, r31
    1c10:	08 95       	ret

00001c12 <strnlen>:
    1c12:	fc 01       	movw	r30, r24
    1c14:	61 50       	subi	r22, 0x01	; 1
    1c16:	70 40       	sbci	r23, 0x00	; 0
    1c18:	01 90       	ld	r0, Z+
    1c1a:	01 10       	cpse	r0, r1
    1c1c:	d8 f7       	brcc	.-10     	; 0x1c14 <strnlen+0x2>
    1c1e:	80 95       	com	r24
    1c20:	90 95       	com	r25
    1c22:	8e 0f       	add	r24, r30
    1c24:	9f 1f       	adc	r25, r31
    1c26:	08 95       	ret

00001c28 <fputc>:
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	18 2f       	mov	r17, r24
    1c32:	09 2f       	mov	r16, r25
    1c34:	eb 01       	movw	r28, r22
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 fd       	sbrc	r24, 1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <fputc+0x1a>
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f ef       	ldi	r25, 0xFF	; 255
    1c40:	20 c0       	rjmp	.+64     	; 0x1c82 <fputc+0x5a>
    1c42:	82 ff       	sbrs	r24, 2
    1c44:	10 c0       	rjmp	.+32     	; 0x1c66 <fputc+0x3e>
    1c46:	4e 81       	ldd	r20, Y+6	; 0x06
    1c48:	5f 81       	ldd	r21, Y+7	; 0x07
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	42 17       	cp	r20, r18
    1c50:	53 07       	cpc	r21, r19
    1c52:	7c f4       	brge	.+30     	; 0x1c72 <fputc+0x4a>
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	9f 01       	movw	r18, r30
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	39 83       	std	Y+1, r19	; 0x01
    1c60:	28 83       	st	Y, r18
    1c62:	10 83       	st	Z, r17
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <fputc+0x4a>
    1c66:	e8 85       	ldd	r30, Y+8	; 0x08
    1c68:	f9 85       	ldd	r31, Y+9	; 0x09
    1c6a:	81 2f       	mov	r24, r17
    1c6c:	09 95       	icall
    1c6e:	89 2b       	or	r24, r25
    1c70:	29 f7       	brne	.-54     	; 0x1c3c <fputc+0x14>
    1c72:	2e 81       	ldd	r18, Y+6	; 0x06
    1c74:	3f 81       	ldd	r19, Y+7	; 0x07
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	3f 83       	std	Y+7, r19	; 0x07
    1c7c:	2e 83       	std	Y+6, r18	; 0x06
    1c7e:	81 2f       	mov	r24, r17
    1c80:	90 2f       	mov	r25, r16
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <__ultoa_invert>:
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	aa 27       	eor	r26, r26
    1c90:	28 30       	cpi	r18, 0x08	; 8
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <__ultoa_invert+0x5c>
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	81 f1       	breq	.+96     	; 0x1cf8 <__ultoa_invert+0x6c>
    1c98:	e8 94       	clt
    1c9a:	6f 93       	push	r22
    1c9c:	6e 7f       	andi	r22, 0xFE	; 254
    1c9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	af 4f       	sbci	r26, 0xFF	; 255
    1ca8:	b1 e0       	ldi	r27, 0x01	; 1
    1caa:	3e d0       	rcall	.+124    	; 0x1d28 <__ultoa_invert+0x9c>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	3c d0       	rcall	.+120    	; 0x1d28 <__ultoa_invert+0x9c>
    1cb0:	67 0f       	add	r22, r23
    1cb2:	78 1f       	adc	r23, r24
    1cb4:	89 1f       	adc	r24, r25
    1cb6:	9a 1f       	adc	r25, r26
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	8a 1f       	adc	r24, r26
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	6a 0f       	add	r22, r26
    1cc6:	71 1d       	adc	r23, r1
    1cc8:	81 1d       	adc	r24, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	20 d0       	rcall	.+64     	; 0x1d10 <__ultoa_invert+0x84>
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__ultoa_invert+0x48>
    1cd2:	68 94       	set
    1cd4:	3f 91       	pop	r19
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	26 9f       	mul	r18, r22
    1cda:	11 24       	eor	r1, r1
    1cdc:	30 19       	sub	r19, r0
    1cde:	30 5d       	subi	r19, 0xD0	; 208
    1ce0:	31 93       	st	Z+, r19
    1ce2:	de f6       	brtc	.-74     	; 0x1c9a <__ultoa_invert+0xe>
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	08 95       	ret
    1ce8:	46 2f       	mov	r20, r22
    1cea:	47 70       	andi	r20, 0x07	; 7
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	41 93       	st	Z+, r20
    1cf0:	b3 e0       	ldi	r27, 0x03	; 3
    1cf2:	0f d0       	rcall	.+30     	; 0x1d12 <__ultoa_invert+0x86>
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x5c>
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <__ultoa_invert+0x58>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	4f 70       	andi	r20, 0x0F	; 15
    1cfc:	40 5d       	subi	r20, 0xD0	; 208
    1cfe:	4a 33       	cpi	r20, 0x3A	; 58
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__ultoa_invert+0x7c>
    1d02:	49 5d       	subi	r20, 0xD9	; 217
    1d04:	31 fd       	sbrc	r19, 1
    1d06:	40 52       	subi	r20, 0x20	; 32
    1d08:	41 93       	st	Z+, r20
    1d0a:	02 d0       	rcall	.+4      	; 0x1d10 <__ultoa_invert+0x84>
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__ultoa_invert+0x6c>
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <__ultoa_invert+0x58>
    1d10:	b4 e0       	ldi	r27, 0x04	; 4
    1d12:	a6 95       	lsr	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0x86>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 05       	cpc	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	08 95       	ret
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	0a 2e       	mov	r0, r26
    1d2e:	06 94       	lsr	r0
    1d30:	57 95       	ror	r21
    1d32:	47 95       	ror	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__ultoa_invert+0xa2>
    1d3c:	62 0f       	add	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	a0 1d       	adc	r26, r0
    1d46:	08 95       	ret

00001d48 <_exit>:
    1d48:	f8 94       	cli

00001d4a <__stop_program>:
    1d4a:	ff cf       	rjmp	.-2      	; 0x1d4a <__stop_program>

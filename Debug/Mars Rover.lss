
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00001ac0  00001b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800248  00800248  00001c9c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fe6  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc3  00000000  00000000  00004fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018ae  00000000  00000000  00005d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000860  00000000  00000000  00007640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6d  00000000  00000000  00007ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002015  00000000  00000000  00008a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000aa22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d2 c6       	rjmp	.+3492   	; 0xdca <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2c c6       	rjmp	.+3160   	; 0xc86 <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ec       	ldi	r30, 0xC0	; 192
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 34       	cpi	r26, 0x48	; 72
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 e4       	ldi	r26, 0x48	; 72
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3a       	cpi	r26, 0xA4	; 164
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	ce d3       	rcall	.+1948   	; 0x860 <main>
      c4:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      ca:	10 92 90 00 	sts	0x0090, r1
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	89 b9       	out	0x09, r24	; 9
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	8b b9       	out	0x0b, r24	; 11
      d6:	8e e0       	ldi	r24, 0x0E	; 14
      d8:	80 93 95 00 	sts	0x0095, r24
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	08 95       	ret

000000e2 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
      e2:	5d 9b       	sbis	0x0b, 5	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
      e6:	8c b9       	out	0x0c, r24	; 12
      e8:	08 95       	ret

000000ea <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	c1 55       	subi	r28, 0x51	; 81
      fc:	d1 09       	sbc	r29, r1
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     10a:	41 e5       	ldi	r20, 0x51	; 81
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e2       	ldi	r22, 0x20	; 32
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <memset>
	sprintf(buf, "%s", data);
     11a:	b8 01       	movw	r22, r16
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 8b 0a 	call	0x1516	; 0x1516 <strcpy>
     124:	8e 01       	movw	r16, r28
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	7e 01       	movw	r14, r28
     12c:	82 e5       	ldi	r24, 0x52	; 82
     12e:	e8 0e       	add	r14, r24
     130:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     132:	f8 01       	movw	r30, r16
     134:	81 91       	ld	r24, Z+
     136:	8f 01       	movw	r16, r30
     138:	d4 df       	rcall	.-88     	; 0xe2 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     13a:	0e 15       	cp	r16, r14
     13c:	1f 05       	cpc	r17, r15
     13e:	c9 f7       	brne	.-14     	; 0x132 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     140:	cf 5a       	subi	r28, 0xAF	; 175
     142:	df 4f       	sbci	r29, 0xFF	; 255
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     15c:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     15e:	40 91 06 01 	lds	r20, 0x0106
     162:	50 91 07 01 	lds	r21, 0x0107
     166:	48 17       	cp	r20, r24
     168:	59 07       	cpc	r21, r25
     16a:	54 f0       	brlt	.+20     	; 0x180 <linearRegression+0x24>
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     174:	41 91       	ld	r20, Z+
     176:	51 91       	ld	r21, Z+
     178:	46 17       	cp	r20, r22
     17a:	57 07       	cpc	r21, r23
     17c:	5c f4       	brge	.+22     	; 0x194 <linearRegression+0x38>
     17e:	02 c0       	rjmp	.+4      	; 0x184 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     184:	f9 01       	movw	r30, r18
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 5f       	subi	r30, 0xFC	; 252
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	20 31       	cpi	r18, 0x10	; 16
     19a:	31 05       	cpc	r19, r1
     19c:	59 f7       	brne	.-42     	; 0x174 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1a6:	84 1b       	sub	r24, r20
     1a8:	95 0b       	sbc	r25, r21
     1aa:	64 1b       	sub	r22, r20
     1ac:	75 0b       	sbc	r23, r21
     1ae:	0e 94 13 09 	call	0x1226	; 0x1226 <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1b2:	c9 01       	movw	r24, r18
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	82 0f       	add	r24, r18
     1be:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1c0:	86 0f       	add	r24, r22
     1c2:	97 1f       	adc	r25, r23
     1c4:	08 95       	ret

000001c6 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	82 6c       	ori	r24, 0xC2	; 194
     1ca:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	87 6c       	ori	r24, 0xC7	; 199
     1d0:	86 b9       	out	0x06, r24	; 6
     1d2:	08 95       	ret

000001d4 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1da:	36 99       	sbic	0x06, 6	; 6
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <ADC_read+0x6>
	return linearRegression(ADC);
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	95 b1       	in	r25, 0x05	; 5
     1e2:	bc cf       	rjmp	.-136    	; 0x15c <linearRegression>
     1e4:	08 95       	ret

000001e6 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1e6:	de 9a       	sbi	0x1b, 6	; 27
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	d9 d5       	rcall	.+2994   	; 0xd9e <wait_ms>
     1ec:	de 98       	cbi	0x1b, 6	; 27
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 7f       	andi	r24, 0xF0	; 240
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	08 95       	ret

000001f6 <lcd_command>:
     1f6:	cf 93       	push	r28
     1f8:	c8 2f       	mov	r28, r24
     1fa:	dc 98       	cbi	0x1b, 4	; 27
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	9c 2f       	mov	r25, r28
     200:	92 95       	swap	r25
     202:	9f 70       	andi	r25, 0x0F	; 15
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	ed df       	rcall	.-38     	; 0x1e6 <lcd_toggle_clear>
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	cf 70       	andi	r28, 0x0F	; 15
     210:	c8 2b       	or	r28, r24
     212:	cb bb       	out	0x1b, r28	; 27
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	e7 df       	rcall	.-50     	; 0x1e6 <lcd_toggle_clear>
     218:	dc 9a       	sbi	0x1b, 4	; 27
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <lcd_clear>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	ea df       	rcall	.-44     	; 0x1f6 <lcd_command>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	bb c5       	rjmp	.+2934   	; 0xd9e <wait_ms>
     228:	08 95       	ret

0000022a <lcd_home_line1>:
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	e4 cf       	rjmp	.-56     	; 0x1f6 <lcd_command>
     22e:	08 95       	ret

00000230 <lcd_init>:
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	8a bb       	out	0x1a, r24	; 26
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	8b bb       	out	0x1b, r24	; 27
     238:	de 9a       	sbi	0x1b, 6	; 27
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	af d5       	rcall	.+2910   	; 0xd9e <wait_ms>
     240:	de 98       	cbi	0x1b, 6	; 27
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	ab d5       	rcall	.+2902   	; 0xd9e <wait_ms>
     248:	de 9a       	sbi	0x1b, 6	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	a7 d5       	rcall	.+2894   	; 0xd9e <wait_ms>
     250:	de 98       	cbi	0x1b, 6	; 27
     252:	de 9a       	sbi	0x1b, 6	; 27
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	a2 d5       	rcall	.+2884   	; 0xd9e <wait_ms>
     25a:	de 98       	cbi	0x1b, 6	; 27
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	8b bb       	out	0x1b, r24	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	c1 df       	rcall	.-126    	; 0x1e6 <lcd_toggle_clear>
     264:	8b b3       	in	r24, 0x1b	; 27
     266:	8b bb       	out	0x1b, r24	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	bd df       	rcall	.-134    	; 0x1e6 <lcd_toggle_clear>
     26c:	8b b3       	in	r24, 0x1b	; 27
     26e:	8e 60       	ori	r24, 0x0E	; 14
     270:	8b bb       	out	0x1b, r24	; 27
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	b8 df       	rcall	.-144    	; 0x1e6 <lcd_toggle_clear>
     276:	8b b3       	in	r24, 0x1b	; 27
     278:	8b bb       	out	0x1b, r24	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	b4 df       	rcall	.-152    	; 0x1e6 <lcd_toggle_clear>
     27e:	8b b3       	in	r24, 0x1b	; 27
     280:	86 60       	ori	r24, 0x06	; 6
     282:	8b bb       	out	0x1b, r24	; 27
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	af df       	rcall	.-162    	; 0x1e6 <lcd_toggle_clear>
     288:	8b b3       	in	r24, 0x1b	; 27
     28a:	8b bb       	out	0x1b, r24	; 27
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	ab df       	rcall	.-170    	; 0x1e6 <lcd_toggle_clear>
     290:	d8 9a       	sbi	0x1b, 0	; 27
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	a8 df       	rcall	.-176    	; 0x1e6 <lcd_toggle_clear>
     296:	dc 9a       	sbi	0x1b, 4	; 27
     298:	c8 cf       	rjmp	.-112    	; 0x22a <lcd_home_line1>
     29a:	08 95       	ret

0000029c <lcd_home_line2>:
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	ab cf       	rjmp	.-170    	; 0x1f6 <lcd_command>
     2a0:	08 95       	ret

000002a2 <lcd_home_line3>:
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	a8 cf       	rjmp	.-176    	; 0x1f6 <lcd_command>
     2a6:	08 95       	ret

000002a8 <lcd_home_line4>:
     2a8:	84 ed       	ldi	r24, 0xD4	; 212
     2aa:	a5 cf       	rjmp	.-182    	; 0x1f6 <lcd_command>
     2ac:	08 95       	ret

000002ae <lcd_putc>:
     2ae:	cf 93       	push	r28
     2b0:	c8 2f       	mov	r28, r24
     2b2:	8b b3       	in	r24, 0x1b	; 27
     2b4:	9c 2f       	mov	r25, r28
     2b6:	92 95       	swap	r25
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	89 2b       	or	r24, r25
     2bc:	8b bb       	out	0x1b, r24	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	92 df       	rcall	.-220    	; 0x1e6 <lcd_toggle_clear>
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	cf 70       	andi	r28, 0x0F	; 15
     2c6:	c8 2b       	or	r28, r24
     2c8:	cb bb       	out	0x1b, r28	; 27
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	8c df       	rcall	.-232    	; 0x1e6 <lcd_toggle_clear>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	c1 55       	subi	r28, 0x51	; 81
     2e8:	d1 09       	sbc	r29, r1
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	fe 01       	movw	r30, r28
     2f6:	e4 5a       	subi	r30, 0xA4	; 164
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	41 91       	ld	r20, Z+
     2fc:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2fe:	9f 01       	movw	r18, r30
     300:	61 e5       	ldi	r22, 0x51	; 81
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 92 0a 	call	0x1524	; 0x1524 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     30c:	be 01       	movw	r22, r28
     30e:	6f 5f       	subi	r22, 0xFF	; 255
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	88 e4       	ldi	r24, 0x48	; 72
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 82 0a 	call	0x1504	; 0x1504 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f4       	brne	.+2      	; 0x320 <lprintf+0x4e>
     31e:	40 c0       	rjmp	.+128    	; 0x3a0 <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     320:	be 01       	movw	r22, r28
     322:	6f 5f       	subi	r22, 0xFF	; 255
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	88 e4       	ldi	r24, 0x48	; 72
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <strcpy>
	lcd_clear();
     32e:	77 df       	rcall	.-274    	; 0x21e <lcd_clear>
     330:	9e 01       	movw	r18, r28
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     33c:	0f 2e       	mov	r0, r31
     33e:	f4 e1       	ldi	r31, 0x14	; 20
     340:	ef 2e       	mov	r14, r31
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     346:	24 c0       	rjmp	.+72     	; 0x390 <lprintf+0xbe>
		if (*str == '\n') {
     348:	8a 30       	cpi	r24, 0x0A	; 10
     34a:	49 f4       	brne	.+18     	; 0x35e <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     34c:	c8 01       	movw	r24, r16
     34e:	b7 01       	movw	r22, r14
     350:	6a d7       	rcall	.+3796   	; 0x1226 <__divmodhi4>
     352:	f7 01       	movw	r30, r14
     354:	e8 1b       	sub	r30, r24
     356:	f9 0b       	sbc	r31, r25
     358:	0e 0f       	add	r16, r30
     35a:	1f 1f       	adc	r17, r31
     35c:	03 c0       	rjmp	.+6      	; 0x364 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     35e:	a7 df       	rcall	.-178    	; 0x2ae <lcd_putc>
			charnum++;
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     364:	c8 01       	movw	r24, r16
     366:	b7 01       	movw	r22, r14
     368:	5e d7       	rcall	.+3772   	; 0x1226 <__divmodhi4>
     36a:	89 2b       	or	r24, r25
     36c:	89 f4       	brne	.+34     	; 0x390 <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     36e:	c8 01       	movw	r24, r16
     370:	b7 01       	movw	r22, r14
     372:	59 d7       	rcall	.+3762   	; 0x1226 <__divmodhi4>
     374:	62 30       	cpi	r22, 0x02	; 2
     376:	71 05       	cpc	r23, r1
     378:	41 f0       	breq	.+16     	; 0x38a <lprintf+0xb8>
     37a:	63 30       	cpi	r22, 0x03	; 3
     37c:	71 05       	cpc	r23, r1
     37e:	39 f0       	breq	.+14     	; 0x38e <lprintf+0xbc>
     380:	61 30       	cpi	r22, 0x01	; 1
     382:	71 05       	cpc	r23, r1
     384:	29 f4       	brne	.+10     	; 0x390 <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     386:	8a df       	rcall	.-236    	; 0x29c <lcd_home_line2>
				break;
     388:	03 c0       	rjmp	.+6      	; 0x390 <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     38a:	8b df       	rcall	.-234    	; 0x2a2 <lcd_home_line3>
				break;
     38c:	01 c0       	rjmp	.+2      	; 0x390 <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     38e:	8c df       	rcall	.-232    	; 0x2a8 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     390:	f6 01       	movw	r30, r12
     392:	81 91       	ld	r24, Z+
     394:	6f 01       	movw	r12, r30
     396:	88 23       	and	r24, r24
     398:	19 f0       	breq	.+6      	; 0x3a0 <lprintf+0xce>
     39a:	00 35       	cpi	r16, 0x50	; 80
     39c:	11 05       	cpc	r17, r1
     39e:	a4 f2       	brlt	.-88     	; 0x348 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3a0:	cf 5a       	subi	r28, 0xAF	; 175
     3a2:	df 4f       	sbci	r29, 0xFF	; 255
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	08 95       	ret

000003c0 <init>:
			break;
		case TURN:
			turn(quantity, sensor_data);
			break;
		case WIN:
			winProcedure(sensor_data);
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	35 df       	rcall	.-406    	; 0x230 <lcd_init>
     3c6:	81 de       	rcall	.-766    	; 0xca <serial_init>
     3c8:	78 94       	sei
     3ca:	fd de       	rcall	.-518    	; 0x1c6 <ADC_init>
     3cc:	a7 d4       	rcall	.+2382   	; 0xd1c <timer1_init>
     3ce:	2a d4       	rcall	.+2132   	; 0xc24 <timer3_init>
     3d0:	f9 d2       	rcall	.+1522   	; 0x9c4 <oi_alloc>
     3d2:	ec 01       	movw	r28, r24
     3d4:	fb d3       	rcall	.+2038   	; 0xbcc <oi_init>
     3d6:	80 e3       	ldi	r24, 0x30	; 48
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	87 de       	rcall	.-754    	; 0xea <serial_puts>
     3dc:	ce 01       	movw	r24, r28
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <determineBoundryType>:
     3e4:	9c 01       	movw	r18, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	7c f0       	brlt	.+30     	; 0x410 <determineBoundryType+0x2c>
     3f2:	43 e2       	ldi	r20, 0x23	; 35
     3f4:	46 9f       	mul	r20, r22
     3f6:	c0 01       	movw	r24, r0
     3f8:	47 9f       	mul	r20, r23
     3fa:	90 0d       	add	r25, r0
     3fc:	11 24       	eor	r1, r1
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	11 d7       	rcall	.+3618   	; 0x1226 <__divmodhi4>
     404:	26 17       	cp	r18, r22
     406:	37 07       	cpc	r19, r23
     408:	34 f4       	brge	.+12     	; 0x416 <determineBoundryType+0x32>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	08 95       	ret
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	08 95       	ret
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	08 95       	ret

0000041c <print>:
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	d8 2f       	mov	r29, r24
     422:	c9 2f       	mov	r28, r25
     424:	9f 93       	push	r25
     426:	8f 93       	push	r24
     428:	54 df       	rcall	.-344    	; 0x2d2 <lprintf>
     42a:	8d 2f       	mov	r24, r29
     42c:	9c 2f       	mov	r25, r28
     42e:	5d de       	rcall	.-838    	; 0xea <serial_puts>
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <rapidForwardScan>:
     43a:	4f 92       	push	r4
     43c:	5f 92       	push	r5
     43e:	6f 92       	push	r6
     440:	7f 92       	push	r7
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <rapidForwardScan+0x22>
     45c:	00 d0       	rcall	.+0      	; 0x45e <rapidForwardScan+0x24>
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	0f 2e       	mov	r0, r31
     464:	41 2c       	mov	r4, r1
     466:	51 2c       	mov	r5, r1
     468:	f8 ec       	ldi	r31, 0xC8	; 200
     46a:	6f 2e       	mov	r6, r31
     46c:	f2 e4       	ldi	r31, 0x42	; 66
     46e:	7f 2e       	mov	r7, r31
     470:	f0 2d       	mov	r31, r0
     472:	53 01       	movw	r10, r6
     474:	42 01       	movw	r8, r4
     476:	0f 2e       	mov	r0, r31
     478:	c1 2c       	mov	r12, r1
     47a:	d1 2c       	mov	r13, r1
     47c:	f4 e3       	ldi	r31, 0x34	; 52
     47e:	ef 2e       	mov	r14, r31
     480:	f2 e4       	ldi	r31, 0x42	; 66
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	8c d5       	rcall	.+2840   	; 0xfa4 <__fixunssfsi>
     48c:	cb 01       	movw	r24, r22
     48e:	e0 d3       	rcall	.+1984   	; 0xc50 <move_servo>
     490:	5f d4       	rcall	.+2238   	; 0xd50 <ping_read>
     492:	69 83       	std	Y+1, r22	; 0x01
     494:	7a 83       	std	Y+2, r23	; 0x02
     496:	8b 83       	std	Y+3, r24	; 0x03
     498:	9c 83       	std	Y+4, r25	; 0x04
     49a:	23 ec       	ldi	r18, 0xC3	; 195
     49c:	35 ef       	ldi	r19, 0xF5	; 245
     49e:	48 e2       	ldi	r20, 0x28	; 40
     4a0:	5f e3       	ldi	r21, 0x3F	; 63
     4a2:	c5 01       	movw	r24, r10
     4a4:	b4 01       	movw	r22, r8
     4a6:	5c d6       	rcall	.+3256   	; 0x1160 <__mulsf3>
     4a8:	4b 01       	movw	r8, r22
     4aa:	5c 01       	movw	r10, r24
     4ac:	23 ec       	ldi	r18, 0xC3	; 195
     4ae:	35 ef       	ldi	r19, 0xF5	; 245
     4b0:	48 ea       	ldi	r20, 0xA8	; 168
     4b2:	5e e3       	ldi	r21, 0x3E	; 62
     4b4:	69 81       	ldd	r22, Y+1	; 0x01
     4b6:	7a 81       	ldd	r23, Y+2	; 0x02
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	9c 81       	ldd	r25, Y+4	; 0x04
     4bc:	51 d6       	rcall	.+3234   	; 0x1160 <__mulsf3>
     4be:	a5 01       	movw	r20, r10
     4c0:	94 01       	movw	r18, r8
     4c2:	9b d4       	rcall	.+2358   	; 0xdfa <__addsf3>
     4c4:	4b 01       	movw	r8, r22
     4c6:	5c 01       	movw	r10, r24
     4c8:	85 de       	rcall	.-758    	; 0x1d4 <ADC_read>
     4ca:	48 de       	rcall	.-880    	; 0x15c <linearRegression>
     4cc:	8c 01       	movw	r16, r24
     4ce:	23 ec       	ldi	r18, 0xC3	; 195
     4d0:	35 ef       	ldi	r19, 0xF5	; 245
     4d2:	48 e2       	ldi	r20, 0x28	; 40
     4d4:	5f e3       	ldi	r21, 0x3F	; 63
     4d6:	c3 01       	movw	r24, r6
     4d8:	b2 01       	movw	r22, r4
     4da:	42 d6       	rcall	.+3204   	; 0x1160 <__mulsf3>
     4dc:	2b 01       	movw	r4, r22
     4de:	3c 01       	movw	r6, r24
     4e0:	b8 01       	movw	r22, r16
     4e2:	88 27       	eor	r24, r24
     4e4:	77 fd       	sbrc	r23, 7
     4e6:	80 95       	com	r24
     4e8:	98 2f       	mov	r25, r24
     4ea:	8a d5       	rcall	.+2836   	; 0x1000 <__floatsisf>
     4ec:	23 ec       	ldi	r18, 0xC3	; 195
     4ee:	35 ef       	ldi	r19, 0xF5	; 245
     4f0:	48 ea       	ldi	r20, 0xA8	; 168
     4f2:	5e e3       	ldi	r21, 0x3E	; 62
     4f4:	35 d6       	rcall	.+3178   	; 0x1160 <__mulsf3>
     4f6:	a3 01       	movw	r20, r6
     4f8:	92 01       	movw	r18, r4
     4fa:	7f d4       	rcall	.+2302   	; 0xdfa <__addsf3>
     4fc:	2b 01       	movw	r4, r22
     4fe:	3c 01       	movw	r6, r24
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	48 ec       	ldi	r20, 0xC8	; 200
     506:	51 e4       	ldi	r21, 0x41	; 65
     508:	c5 01       	movw	r24, r10
     50a:	b4 01       	movw	r22, r8
     50c:	da d4       	rcall	.+2484   	; 0xec2 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	4c f0       	brlt	.+18     	; 0x524 <rapidForwardScan+0xea>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	48 ec       	ldi	r20, 0xC8	; 200
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	c3 01       	movw	r24, r6
     51c:	b2 01       	movw	r22, r4
     51e:	d1 d4       	rcall	.+2466   	; 0xec2 <__cmpsf2>
     520:	88 23       	and	r24, r24
     522:	44 f4       	brge	.+16     	; 0x534 <rapidForwardScan+0xfa>
     524:	82 e9       	ldi	r24, 0x92	; 146
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	79 df       	rcall	.-270    	; 0x41c <print>
     52a:	c7 01       	movw	r24, r14
     52c:	b6 01       	movw	r22, r12
     52e:	35 d5       	rcall	.+2666   	; 0xf9a <__fixsfsi>
     530:	cb 01       	movw	r24, r22
     532:	13 c0       	rjmp	.+38     	; 0x55a <rapidForwardScan+0x120>
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e4       	ldi	r21, 0x40	; 64
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	5c d4       	rcall	.+2232   	; 0xdfa <__addsf3>
     542:	6b 01       	movw	r12, r22
     544:	7c 01       	movw	r14, r24
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	47 e0       	ldi	r20, 0x07	; 7
     54c:	53 e4       	ldi	r21, 0x43	; 67
     54e:	b9 d4       	rcall	.+2418   	; 0xec2 <__cmpsf2>
     550:	18 16       	cp	r1, r24
     552:	0c f0       	brlt	.+2      	; 0x556 <rapidForwardScan+0x11c>
     554:	98 cf       	rjmp	.-208    	; 0x486 <rapidForwardScan+0x4c>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	af 90       	pop	r10
     576:	9f 90       	pop	r9
     578:	8f 90       	pop	r8
     57a:	7f 90       	pop	r7
     57c:	6f 90       	pop	r6
     57e:	5f 90       	pop	r5
     580:	4f 90       	pop	r4
     582:	08 95       	ret

00000584 <detectColoredBoundry>:
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	60 91 2c 01 	lds	r22, 0x012C
     59a:	70 91 2d 01 	lds	r23, 0x012D
     59e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5a2:	20 df       	rcall	.-448    	; 0x3e4 <determineBoundryType>
     5a4:	8c 01       	movw	r16, r24
     5a6:	60 91 2a 01 	lds	r22, 0x012A
     5aa:	70 91 2b 01 	lds	r23, 0x012B
     5ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5b2:	18 df       	rcall	.-464    	; 0x3e4 <determineBoundryType>
     5b4:	6c 01       	movw	r12, r24
     5b6:	60 91 28 01 	lds	r22, 0x0128
     5ba:	70 91 29 01 	lds	r23, 0x0129
     5be:	88 a1       	ldd	r24, Y+32	; 0x20
     5c0:	99 a1       	ldd	r25, Y+33	; 0x21
     5c2:	10 df       	rcall	.-480    	; 0x3e4 <determineBoundryType>
     5c4:	7c 01       	movw	r14, r24
     5c6:	60 91 26 01 	lds	r22, 0x0126
     5ca:	70 91 27 01 	lds	r23, 0x0127
     5ce:	8a a1       	ldd	r24, Y+34	; 0x22
     5d0:	9b a1       	ldd	r25, Y+35	; 0x23
     5d2:	08 df       	rcall	.-496    	; 0x3e4 <determineBoundryType>
     5d4:	01 30       	cpi	r16, 0x01	; 1
     5d6:	11 05       	cpc	r17, r1
     5d8:	71 f1       	breq	.+92     	; 0x636 <detectColoredBoundry+0xb2>
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	e2 16       	cp	r14, r18
     5de:	f1 04       	cpc	r15, r1
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <detectColoredBoundry+0x60>
     5e2:	3b c0       	rjmp	.+118    	; 0x65a <detectColoredBoundry+0xd6>
     5e4:	21 e0       	ldi	r18, 0x01	; 1
     5e6:	c2 16       	cp	r12, r18
     5e8:	d1 04       	cpc	r13, r1
     5ea:	09 f4       	brne	.+2      	; 0x5ee <detectColoredBoundry+0x6a>
     5ec:	3f c0       	rjmp	.+126    	; 0x66c <detectColoredBoundry+0xe8>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	91 05       	cpc	r25, r1
     5f2:	59 f4       	brne	.+22     	; 0x60a <detectColoredBoundry+0x86>
     5f4:	44 c0       	rjmp	.+136    	; 0x67e <detectColoredBoundry+0xfa>
     5f6:	85 ea       	ldi	r24, 0xA5	; 165
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	10 df       	rcall	.-480    	; 0x41c <print>
     5fc:	be 01       	movw	r22, r28
     5fe:	84 e6       	ldi	r24, 0x64	; 100
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	38 d1       	rcall	.+624    	; 0x874 <turn>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	4b c0       	rjmp	.+150    	; 0x6a0 <detectColoredBoundry+0x11c>
     60a:	02 30       	cpi	r16, 0x02	; 2
     60c:	11 05       	cpc	r17, r1
     60e:	51 f0       	breq	.+20     	; 0x624 <detectColoredBoundry+0xa0>
     610:	22 e0       	ldi	r18, 0x02	; 2
     612:	e2 16       	cp	r14, r18
     614:	f1 04       	cpc	r15, r1
     616:	31 f0       	breq	.+12     	; 0x624 <detectColoredBoundry+0xa0>
     618:	22 e0       	ldi	r18, 0x02	; 2
     61a:	c2 16       	cp	r12, r18
     61c:	d1 04       	cpc	r13, r1
     61e:	11 f0       	breq	.+4      	; 0x624 <detectColoredBoundry+0xa0>
     620:	02 97       	sbiw	r24, 0x02	; 2
     622:	31 f4       	brne	.+12     	; 0x630 <detectColoredBoundry+0xac>
     624:	8f eb       	ldi	r24, 0xBF	; 191
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	f9 de       	rcall	.-526    	; 0x41c <print>
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	38 c0       	rjmp	.+112    	; 0x6a0 <detectColoredBoundry+0x11c>
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	35 c0       	rjmp	.+106    	; 0x6a0 <detectColoredBoundry+0x11c>
     636:	9e 01       	movw	r18, r28
     638:	42 e3       	ldi	r20, 0x32	; 50
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	6c e9       	ldi	r22, 0x9C	; 156
     63e:	7f ef       	ldi	r23, 0xFF	; 255
     640:	8c e9       	ldi	r24, 0x9C	; 156
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	78 d1       	rcall	.+752    	; 0x936 <move>
     646:	80 ed       	ldi	r24, 0xD0	; 208
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	e8 de       	rcall	.-560    	; 0x41c <print>
     64c:	be 01       	movw	r22, r28
     64e:	80 eb       	ldi	r24, 0xB0	; 176
     650:	9f ef       	ldi	r25, 0xFF	; 255
     652:	10 d1       	rcall	.+544    	; 0x874 <turn>
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	23 c0       	rjmp	.+70     	; 0x6a0 <detectColoredBoundry+0x11c>
     65a:	9e 01       	movw	r18, r28
     65c:	42 e3       	ldi	r20, 0x32	; 50
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	6c e9       	ldi	r22, 0x9C	; 156
     662:	7f ef       	ldi	r23, 0xFF	; 255
     664:	8c e9       	ldi	r24, 0x9C	; 156
     666:	9f ef       	ldi	r25, 0xFF	; 255
     668:	66 d1       	rcall	.+716    	; 0x936 <move>
     66a:	c5 cf       	rjmp	.-118    	; 0x5f6 <detectColoredBoundry+0x72>
     66c:	9e 01       	movw	r18, r28
     66e:	42 e3       	ldi	r20, 0x32	; 50
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	6c e9       	ldi	r22, 0x9C	; 156
     674:	7f ef       	ldi	r23, 0xFF	; 255
     676:	8c e9       	ldi	r24, 0x9C	; 156
     678:	9f ef       	ldi	r25, 0xFF	; 255
     67a:	5d d1       	rcall	.+698    	; 0x936 <move>
     67c:	bc cf       	rjmp	.-136    	; 0x5f6 <detectColoredBoundry+0x72>
     67e:	9e 01       	movw	r18, r28
     680:	42 e3       	ldi	r20, 0x32	; 50
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	6c e9       	ldi	r22, 0x9C	; 156
     686:	7f ef       	ldi	r23, 0xFF	; 255
     688:	8c e9       	ldi	r24, 0x9C	; 156
     68a:	9f ef       	ldi	r25, 0xFF	; 255
     68c:	54 d1       	rcall	.+680    	; 0x936 <move>
     68e:	87 ee       	ldi	r24, 0xE7	; 231
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	c4 de       	rcall	.-632    	; 0x41c <print>
     694:	be 01       	movw	r22, r28
     696:	80 e5       	ldi	r24, 0x50	; 80
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	ec d0       	rcall	.+472    	; 0x874 <turn>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	08 95       	ret

000006b2 <detectCrater>:
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
     6b8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     6ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
     6bc:	78 a1       	ldd	r23, Y+32	; 0x20
     6be:	69 a1       	ldd	r22, Y+33	; 0x21
     6c0:	4a a1       	ldd	r20, Y+34	; 0x22
     6c2:	5b a1       	ldd	r21, Y+35	; 0x23
     6c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6c8:	89 2b       	or	r24, r25
     6ca:	69 f0       	breq	.+26     	; 0x6e6 <detectCrater+0x34>
     6cc:	83 2f       	mov	r24, r19
     6ce:	92 2f       	mov	r25, r18
     6d0:	27 2f       	mov	r18, r23
     6d2:	36 2f       	mov	r19, r22
     6d4:	45 2b       	or	r20, r21
     6d6:	59 f0       	breq	.+22     	; 0x6ee <detectCrater+0x3c>
     6d8:	23 2b       	or	r18, r19
     6da:	69 f0       	breq	.+26     	; 0x6f6 <detectCrater+0x44>
     6dc:	89 2b       	or	r24, r25
     6de:	59 f0       	breq	.+22     	; 0x6f6 <detectCrater+0x44>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	1d c0       	rjmp	.+58     	; 0x720 <detectCrater+0x6e>
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	98 de       	rcall	.-720    	; 0x41c <print>
     6ec:	0b c0       	rjmp	.+22     	; 0x704 <detectCrater+0x52>
     6ee:	89 2b       	or	r24, r25
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <detectCrater+0x44>
     6f2:	23 2b       	or	r18, r19
     6f4:	21 f4       	brne	.+8      	; 0x6fe <detectCrater+0x4c>
     6f6:	83 e1       	ldi	r24, 0x13	; 19
     6f8:	92 e0       	ldi	r25, 0x02	; 2
     6fa:	90 de       	rcall	.-736    	; 0x41c <print>
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <detectCrater+0x52>
     6fe:	88 e2       	ldi	r24, 0x28	; 40
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	8c de       	rcall	.-744    	; 0x41c <print>
     704:	9e 01       	movw	r18, r28
     706:	44 e6       	ldi	r20, 0x64	; 100
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	6c e9       	ldi	r22, 0x9C	; 156
     70c:	7f ef       	ldi	r23, 0xFF	; 255
     70e:	8c e9       	ldi	r24, 0x9C	; 156
     710:	9f ef       	ldi	r25, 0xFF	; 255
     712:	11 d1       	rcall	.+546    	; 0x936 <move>
     714:	be 01       	movw	r22, r28
     716:	89 e6       	ldi	r24, 0x69	; 105
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	ac d0       	rcall	.+344    	; 0x874 <turn>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <moveCautiously>:
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	4c 01       	movw	r8, r24
     74c:	5b 01       	movw	r10, r22
     74e:	18 16       	cp	r1, r24
     750:	19 06       	cpc	r1, r25
     752:	0c f0       	brlt	.+2      	; 0x756 <moveCautiously+0x30>
     754:	72 c0       	rjmp	.+228    	; 0x83a <moveCautiously+0x114>
     756:	ee 24       	eor	r14, r14
     758:	ea 94       	dec	r14
     75a:	fe 2c       	mov	r15, r14
     75c:	0f ef       	ldi	r16, 0xFF	; 255
     75e:	1f ef       	ldi	r17, 0xFF	; 255
     760:	cf ef       	ldi	r28, 0xFF	; 255
     762:	df ef       	ldi	r29, 0xFF	; 255
     764:	c1 2c       	mov	r12, r1
     766:	d1 2c       	mov	r13, r1
     768:	21 2c       	mov	r2, r1
     76a:	31 2c       	mov	r3, r1
     76c:	0f 2e       	mov	r0, r31
     76e:	fa e5       	ldi	r31, 0x5A	; 90
     770:	6f 2e       	mov	r6, r31
     772:	71 2c       	mov	r7, r1
     774:	f0 2d       	mov	r31, r0
     776:	0f 2e       	mov	r0, r31
     778:	fc e3       	ldi	r31, 0x3C	; 60
     77a:	4f 2e       	mov	r4, r31
     77c:	51 2c       	mov	r5, r1
     77e:	f0 2d       	mov	r31, r0
     780:	c5 36       	cpi	r28, 0x65	; 101
     782:	d1 05       	cpc	r29, r1
     784:	24 f4       	brge	.+8      	; 0x78e <moveCautiously+0x68>
     786:	cf 3f       	cpi	r28, 0xFF	; 255
     788:	4f ef       	ldi	r20, 0xFF	; 255
     78a:	d4 07       	cpc	r29, r20
     78c:	31 f5       	brne	.+76     	; 0x7da <moveCautiously+0xb4>
     78e:	55 de       	rcall	.-854    	; 0x43a <rapidForwardScan>
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	09 f1       	breq	.+66     	; 0x7d6 <moveCautiously+0xb0>
     794:	8a 35       	cpi	r24, 0x5A	; 90
     796:	91 05       	cpc	r25, r1
     798:	1c f4       	brge	.+6      	; 0x7a0 <moveCautiously+0x7a>
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <moveCautiously+0x7e>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	a3 01       	movw	r20, r6
     7a6:	48 1b       	sub	r20, r24
     7a8:	59 0b       	sbc	r21, r25
     7aa:	ca 01       	movw	r24, r20
     7ac:	99 23       	and	r25, r25
     7ae:	24 f4       	brge	.+8      	; 0x7b8 <moveCautiously+0x92>
     7b0:	88 27       	eor	r24, r24
     7b2:	99 27       	eor	r25, r25
     7b4:	84 1b       	sub	r24, r20
     7b6:	95 0b       	sbc	r25, r21
     7b8:	a2 01       	movw	r20, r4
     7ba:	48 1b       	sub	r20, r24
     7bc:	59 0b       	sbc	r21, r25
     7be:	b5 01       	movw	r22, r10
     7c0:	24 9f       	mul	r18, r20
     7c2:	c0 01       	movw	r24, r0
     7c4:	25 9f       	mul	r18, r21
     7c6:	90 0d       	add	r25, r0
     7c8:	34 9f       	mul	r19, r20
     7ca:	90 0d       	add	r25, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	52 d0       	rcall	.+164    	; 0x874 <turn>
     7d0:	c2 2d       	mov	r28, r2
     7d2:	d3 2d       	mov	r29, r3
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <moveCautiously+0xb4>
     7d6:	c2 2d       	mov	r28, r2
     7d8:	d3 2d       	mov	r29, r3
     7da:	0a 31       	cpi	r16, 0x1A	; 26
     7dc:	11 05       	cpc	r17, r1
     7de:	24 f4       	brge	.+8      	; 0x7e8 <moveCautiously+0xc2>
     7e0:	0f 3f       	cpi	r16, 0xFF	; 255
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	18 07       	cpc	r17, r24
     7e6:	31 f4       	brne	.+12     	; 0x7f4 <moveCautiously+0xce>
     7e8:	c5 01       	movw	r24, r10
     7ea:	cc de       	rcall	.-616    	; 0x584 <detectColoredBoundry>
     7ec:	89 2b       	or	r24, r25
     7ee:	29 f5       	brne	.+74     	; 0x83a <moveCautiously+0x114>
     7f0:	02 2d       	mov	r16, r2
     7f2:	13 2d       	mov	r17, r3
     7f4:	4b e0       	ldi	r20, 0x0B	; 11
     7f6:	e4 16       	cp	r14, r20
     7f8:	f1 04       	cpc	r15, r1
     7fa:	24 f4       	brge	.+8      	; 0x804 <moveCautiously+0xde>
     7fc:	5f ef       	ldi	r21, 0xFF	; 255
     7fe:	e5 16       	cp	r14, r21
     800:	f5 06       	cpc	r15, r21
     802:	31 f4       	brne	.+12     	; 0x810 <moveCautiously+0xea>
     804:	c5 01       	movw	r24, r10
     806:	55 df       	rcall	.-342    	; 0x6b2 <detectCrater>
     808:	89 2b       	or	r24, r25
     80a:	b9 f4       	brne	.+46     	; 0x83a <moveCautiously+0x114>
     80c:	e2 2c       	mov	r14, r2
     80e:	f3 2c       	mov	r15, r3
     810:	95 01       	movw	r18, r10
     812:	4a e0       	ldi	r20, 0x0A	; 10
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	68 e7       	ldi	r22, 0x78	; 120
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	88 e7       	ldi	r24, 0x78	; 120
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	8b d0       	rcall	.+278    	; 0x936 <move>
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	c8 0e       	add	r12, r24
     824:	d1 1c       	adc	r13, r1
     826:	2a 96       	adiw	r28, 0x0a	; 10
     828:	06 5f       	subi	r16, 0xF6	; 246
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	4a e0       	ldi	r20, 0x0A	; 10
     82e:	e4 0e       	add	r14, r20
     830:	f1 1c       	adc	r15, r1
     832:	c8 14       	cp	r12, r8
     834:	d9 04       	cpc	r13, r9
     836:	0c f4       	brge	.+2      	; 0x83a <moveCautiously+0x114>
     838:	a3 cf       	rjmp	.-186    	; 0x780 <moveCautiously+0x5a>
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	5f 90       	pop	r5
     858:	4f 90       	pop	r4
     85a:	3f 90       	pop	r3
     85c:	2f 90       	pop	r2
     85e:	08 95       	ret

00000860 <main>:
// -- Position ourselves to move in the exact center of two posts
// -- Move straight through them. Detection does the rest

int main(void)
{
	oi_t * sensor_data = init();
     860:	af dd       	rcall	.-1186   	; 0x3c0 <init>
     862:	ec 01       	movw	r28, r24
	oi_update(sensor_data);
     864:	f8 d0       	rcall	.+496    	; 0xa56 <oi_update>
		executeCommand(command, quantity, sensor_data);
		*/
		
		//detectColoredBoundry(sensor_data);
		
		moveCautiously(450, sensor_data);
     866:	be 01       	movw	r22, r28
     868:	82 ec       	ldi	r24, 0xC2	; 194
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	5c df       	rcall	.-328    	; 0x726 <moveCautiously>
		
		oi_update(sensor_data);
     86e:	ce 01       	movw	r24, r28
     870:	f2 d0       	rcall	.+484    	; 0xa56 <oi_update>
     872:	f9 cf       	rjmp	.-14     	; 0x866 <main+0x6>

00000874 <turn>:
	
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
     882:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	int magnitude = turnDegrees > 0 ? 1 : -1;
     884:	18 16       	cp	r1, r24
     886:	19 06       	cpc	r1, r25
     888:	1c f4       	brge	.+6      	; 0x890 <turn+0x1c>
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	02 c0       	rjmp	.+4      	; 0x894 <turn+0x20>
     890:	2f ef       	ldi	r18, 0xFF	; 255
     892:	3f ef       	ldi	r19, 0xFF	; 255
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
     894:	4c e9       	ldi	r20, 0x9C	; 156
     896:	42 03       	mulsu	r20, r18
     898:	b0 01       	movw	r22, r0
     89a:	43 9f       	mul	r20, r19
     89c:	70 0d       	add	r23, r0
     89e:	11 24       	eor	r1, r1
     8a0:	84 e6       	ldi	r24, 0x64	; 100
     8a2:	48 2f       	mov	r20, r24
     8a4:	42 9f       	mul	r20, r18
     8a6:	c0 01       	movw	r24, r0
     8a8:	43 9f       	mul	r20, r19
     8aa:	90 0d       	add	r25, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	b4 d0       	rcall	.+360    	; 0xa18 <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     8b0:	7e 01       	movw	r14, r28
     8b2:	dd 23       	and	r29, r29
     8b4:	24 f4       	brge	.+8      	; 0x8be <turn+0x4a>
     8b6:	ee 24       	eor	r14, r14
     8b8:	ff 24       	eor	r15, r15
     8ba:	ec 1a       	sub	r14, r28
     8bc:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     8be:	1e 14       	cp	r1, r14
     8c0:	1f 04       	cpc	r1, r15
     8c2:	a4 f4       	brge	.+40     	; 0x8ec <turn+0x78>
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     8c8:	88 e2       	ldi	r24, 0x28	; 40
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	68 d2       	rcall	.+1232   	; 0xd9e <wait_ms>
		oi_update(sensor_data);
     8ce:	c8 01       	movw	r24, r16
     8d0:	c2 d0       	rcall	.+388    	; 0xa56 <oi_update>
		currentDegrees += abs(sensor_data->angle);
     8d2:	f8 01       	movw	r30, r16
     8d4:	26 85       	ldd	r18, Z+14	; 0x0e
     8d6:	37 85       	ldd	r19, Z+15	; 0x0f
     8d8:	33 23       	and	r19, r19
     8da:	1c f4       	brge	.+6      	; 0x8e2 <turn+0x6e>
     8dc:	31 95       	neg	r19
     8de:	21 95       	neg	r18
     8e0:	31 09       	sbc	r19, r1
     8e2:	c2 0f       	add	r28, r18
     8e4:	d3 1f       	adc	r29, r19
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     8e6:	ce 15       	cp	r28, r14
     8e8:	df 05       	cpc	r29, r15
     8ea:	74 f3       	brlt	.-36     	; 0x8c8 <turn+0x54>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	91 d0       	rcall	.+290    	; 0xa18 <oi_set_wheels>
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	08 95       	ret

00000904 <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     90a:	88 81       	ld	r24, Y
     90c:	98 2f       	mov	r25, r24
     90e:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     910:	81 fd       	sbrc	r24, 1
     912:	02 c0       	rjmp	.+4      	; 0x918 <detectCollision+0x14>
     914:	99 23       	and	r25, r25
     916:	51 f0       	breq	.+20     	; 0x92c <detectCollision+0x28>
		print("Collision!");
     918:	8d e3       	ldi	r24, 0x3D	; 61
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	7f dd       	rcall	.-1282   	; 0x41c <print>
		//move(-100, -100, 150, sensor_data);
		turn(105, sensor_data);
     91e:	be 01       	movw	r22, r28
     920:	89 e6       	ldi	r24, 0x69	; 105
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a7 df       	rcall	.-178    	; 0x874 <turn>
		return 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <detectCollision+0x2c>
	} else {
		return 0;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <move>:
#include "lcd.h"
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	7c 01       	movw	r14, r24
     94c:	5b 01       	movw	r10, r22
     94e:	ea 01       	movw	r28, r20
     950:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
     952:	62 d0       	rcall	.+196    	; 0xa18 <oi_set_wheels>
	
	distance = abs(distance);
     954:	6e 01       	movw	r12, r28
     956:	dd 23       	and	r29, r29
     958:	24 f4       	brge	.+8      	; 0x962 <move+0x2c>
     95a:	cc 24       	eor	r12, r12
     95c:	dd 24       	eor	r13, r13
     95e:	cc 1a       	sub	r12, r28
     960:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     962:	1c 14       	cp	r1, r12
     964:	1d 04       	cpc	r1, r13
     966:	f4 f4       	brge	.+60     	; 0x9a4 <move+0x6e>
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     968:	c0 e0       	ldi	r28, 0x00	; 0
     96a:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     96c:	c8 01       	movw	r24, r16
     96e:	73 d0       	rcall	.+230    	; 0xa56 <oi_update>

		if ( right > 0 && left > 0 ) {
     970:	1e 14       	cp	r1, r14
     972:	1f 04       	cpc	r1, r15
     974:	54 f4       	brge	.+20     	; 0x98a <move+0x54>
     976:	1a 14       	cp	r1, r10
     978:	1b 04       	cpc	r1, r11
     97a:	3c f4       	brge	.+14     	; 0x98a <move+0x54>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     97c:	c8 01       	movw	r24, r16
     97e:	c2 df       	rcall	.-124    	; 0x904 <detectCollision>
     980:	89 2b       	or	r24, r25
     982:	19 f0       	breq	.+6      	; 0x98a <move+0x54>
				oi_set_wheels(right, left);
     984:	b5 01       	movw	r22, r10
     986:	c7 01       	movw	r24, r14
     988:	47 d0       	rcall	.+142    	; 0xa18 <oi_set_wheels>
			}
		}

		sum += abs(sensor_data->distance);
     98a:	f8 01       	movw	r30, r16
     98c:	44 85       	ldd	r20, Z+12	; 0x0c
     98e:	55 85       	ldd	r21, Z+13	; 0x0d
     990:	55 23       	and	r21, r21
     992:	1c f4       	brge	.+6      	; 0x99a <move+0x64>
     994:	51 95       	neg	r21
     996:	41 95       	neg	r20
     998:	51 09       	sbc	r21, r1
     99a:	c4 0f       	add	r28, r20
     99c:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     99e:	cc 15       	cp	r28, r12
     9a0:	dd 05       	cpc	r29, r13
     9a2:	24 f3       	brlt	.-56     	; 0x96c <move+0x36>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	35 d0       	rcall	.+106    	; 0xa18 <oi_set_wheels>
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	08 95       	ret

000009c4 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     9c4:	64 e3       	ldi	r22, 0x34	; 52
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	53 c4       	rjmp	.+2214   	; 0x1274 <calloc>
     9ce:	08 95       	ret

000009d0 <oi_byte_tx>:
     9d0:	eb e9       	ldi	r30, 0x9B	; 155
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	90 81       	ld	r25, Z
     9d6:	95 ff       	sbrs	r25, 5
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <oi_byte_tx+0x4>
     9da:	80 93 9c 00 	sts	0x009C, r24
     9de:	08 95       	ret

000009e0 <oi_set_leds>:
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	08 2f       	mov	r16, r24
     9ea:	16 2f       	mov	r17, r22
     9ec:	d4 2f       	mov	r29, r20
     9ee:	c2 2f       	mov	r28, r18
     9f0:	8b e8       	ldi	r24, 0x8B	; 139
     9f2:	ee df       	rcall	.-36     	; 0x9d0 <oi_byte_tx>
     9f4:	11 23       	and	r17, r17
     9f6:	29 f0       	breq	.+10     	; 0xa02 <oi_set_leds+0x22>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	01 11       	cpse	r16, r1
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <oi_set_leds+0x24>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <oi_set_leds+0x24>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	e5 df       	rcall	.-54     	; 0x9d0 <oi_byte_tx>
     a06:	8d 2f       	mov	r24, r29
     a08:	e3 df       	rcall	.-58     	; 0x9d0 <oi_byte_tx>
     a0a:	8c 2f       	mov	r24, r28
     a0c:	e1 df       	rcall	.-62     	; 0x9d0 <oi_byte_tx>
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <oi_set_wheels>:
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	18 2f       	mov	r17, r24
     a22:	09 2f       	mov	r16, r25
     a24:	c6 2f       	mov	r28, r22
     a26:	d7 2f       	mov	r29, r23
     a28:	81 e9       	ldi	r24, 0x91	; 145
     a2a:	d2 df       	rcall	.-92     	; 0x9d0 <oi_byte_tx>
     a2c:	80 2f       	mov	r24, r16
     a2e:	d0 df       	rcall	.-96     	; 0x9d0 <oi_byte_tx>
     a30:	81 2f       	mov	r24, r17
     a32:	ce df       	rcall	.-100    	; 0x9d0 <oi_byte_tx>
     a34:	8d 2f       	mov	r24, r29
     a36:	cc df       	rcall	.-104    	; 0x9d0 <oi_byte_tx>
     a38:	8c 2f       	mov	r24, r28
     a3a:	ca df       	rcall	.-108    	; 0x9d0 <oi_byte_tx>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	08 95       	ret

00000a46 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     a46:	eb e9       	ldi	r30, 0x9B	; 155
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	88 23       	and	r24, r24
     a4e:	ec f7       	brge	.-6      	; 0xa4a <oi_byte_rx+0x4>

	return UDR1;
     a50:	80 91 9c 00 	lds	r24, 0x009C
     a54:	08 95       	ret

00000a56 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a64:	80 91 9b 00 	lds	r24, 0x009B
     a68:	88 23       	and	r24, r24
     a6a:	44 f4       	brge	.+16     	; 0xa7c <oi_update+0x26>
		i = UDR1;
     a6c:	ac e9       	ldi	r26, 0x9C	; 156
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a70:	eb e9       	ldi	r30, 0x9B	; 155
     a72:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     a74:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     a76:	80 81       	ld	r24, Z
     a78:	88 23       	and	r24, r24
     a7a:	e4 f3       	brlt	.-8      	; 0xa74 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     a7c:	8e e8       	ldi	r24, 0x8E	; 142
     a7e:	a8 df       	rcall	.-176    	; 0x9d0 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	a6 df       	rcall	.-180    	; 0x9d0 <oi_byte_tx>
     a84:	e7 01       	movw	r28, r14
     a86:	87 01       	movw	r16, r14
     a88:	0c 5c       	subi	r16, 0xCC	; 204
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     a8c:	dc df       	rcall	.-72     	; 0xa46 <oi_byte_rx>
     a8e:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     a90:	c0 17       	cp	r28, r16
     a92:	d1 07       	cpc	r29, r17
     a94:	d9 f7       	brne	.-10     	; 0xa8c <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     a96:	f7 01       	movw	r30, r14
     a98:	84 85       	ldd	r24, Z+12	; 0x0c
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	98 2f       	mov	r25, r24
     a9e:	88 27       	eor	r24, r24
     aa0:	25 85       	ldd	r18, Z+13	; 0x0d
     aa2:	82 0f       	add	r24, r18
     aa4:	91 1d       	adc	r25, r1
     aa6:	95 87       	std	Z+13, r25	; 0x0d
     aa8:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     aaa:	86 85       	ldd	r24, Z+14	; 0x0e
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	98 2f       	mov	r25, r24
     ab0:	88 27       	eor	r24, r24
     ab2:	27 85       	ldd	r18, Z+15	; 0x0f
     ab4:	82 0f       	add	r24, r18
     ab6:	91 1d       	adc	r25, r1
     ab8:	97 87       	std	Z+15, r25	; 0x0f
     aba:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     abc:	81 89       	ldd	r24, Z+17	; 0x11
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	98 2f       	mov	r25, r24
     ac2:	88 27       	eor	r24, r24
     ac4:	22 89       	ldd	r18, Z+18	; 0x12
     ac6:	82 0f       	add	r24, r18
     ac8:	91 1d       	adc	r25, r1
     aca:	92 8b       	std	Z+18, r25	; 0x12
     acc:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     ace:	83 89       	ldd	r24, Z+19	; 0x13
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	98 2f       	mov	r25, r24
     ad4:	88 27       	eor	r24, r24
     ad6:	24 89       	ldd	r18, Z+20	; 0x14
     ad8:	82 0f       	add	r24, r18
     ada:	91 1d       	adc	r25, r1
     adc:	94 8b       	std	Z+20, r25	; 0x14
     ade:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     ae0:	86 89       	ldd	r24, Z+22	; 0x16
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	98 2f       	mov	r25, r24
     ae6:	88 27       	eor	r24, r24
     ae8:	27 89       	ldd	r18, Z+23	; 0x17
     aea:	82 0f       	add	r24, r18
     aec:	91 1d       	adc	r25, r1
     aee:	97 8b       	std	Z+23, r25	; 0x17
     af0:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     af2:	80 8d       	ldd	r24, Z+24	; 0x18
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	98 2f       	mov	r25, r24
     af8:	88 27       	eor	r24, r24
     afa:	21 8d       	ldd	r18, Z+25	; 0x19
     afc:	82 0f       	add	r24, r18
     afe:	91 1d       	adc	r25, r1
     b00:	91 8f       	std	Z+25, r25	; 0x19
     b02:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     b04:	82 8d       	ldd	r24, Z+26	; 0x1a
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	98 2f       	mov	r25, r24
     b0a:	88 27       	eor	r24, r24
     b0c:	23 8d       	ldd	r18, Z+27	; 0x1b
     b0e:	82 0f       	add	r24, r18
     b10:	91 1d       	adc	r25, r1
     b12:	93 8f       	std	Z+27, r25	; 0x1b
     b14:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     b16:	84 8d       	ldd	r24, Z+28	; 0x1c
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	98 2f       	mov	r25, r24
     b1c:	88 27       	eor	r24, r24
     b1e:	25 8d       	ldd	r18, Z+29	; 0x1d
     b20:	82 0f       	add	r24, r18
     b22:	91 1d       	adc	r25, r1
     b24:	95 8f       	std	Z+29, r25	; 0x1d
     b26:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     b28:	86 8d       	ldd	r24, Z+30	; 0x1e
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	98 2f       	mov	r25, r24
     b2e:	88 27       	eor	r24, r24
     b30:	27 8d       	ldd	r18, Z+31	; 0x1f
     b32:	82 0f       	add	r24, r18
     b34:	91 1d       	adc	r25, r1
     b36:	97 8f       	std	Z+31, r25	; 0x1f
     b38:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     b3a:	80 a1       	ldd	r24, Z+32	; 0x20
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	98 2f       	mov	r25, r24
     b40:	88 27       	eor	r24, r24
     b42:	21 a1       	ldd	r18, Z+33	; 0x21
     b44:	82 0f       	add	r24, r18
     b46:	91 1d       	adc	r25, r1
     b48:	91 a3       	std	Z+33, r25	; 0x21
     b4a:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     b4c:	82 a1       	ldd	r24, Z+34	; 0x22
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	98 2f       	mov	r25, r24
     b52:	88 27       	eor	r24, r24
     b54:	23 a1       	ldd	r18, Z+35	; 0x23
     b56:	82 0f       	add	r24, r18
     b58:	91 1d       	adc	r25, r1
     b5a:	93 a3       	std	Z+35, r25	; 0x23
     b5c:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     b5e:	82 a5       	ldd	r24, Z+42	; 0x2a
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	21 a5       	ldd	r18, Z+41	; 0x29
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	32 2f       	mov	r19, r18
     b68:	22 27       	eor	r18, r18
     b6a:	28 0f       	add	r18, r24
     b6c:	39 1f       	adc	r19, r25
     b6e:	36 a3       	std	Z+38, r19	; 0x26
     b70:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     b72:	20 a9       	ldd	r18, Z+48	; 0x30
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	32 2f       	mov	r19, r18
     b78:	22 27       	eor	r18, r18
     b7a:	82 0f       	add	r24, r18
     b7c:	93 1f       	adc	r25, r19
     b7e:	95 a7       	std	Z+45, r25	; 0x2d
     b80:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     b82:	82 a9       	ldd	r24, Z+50	; 0x32
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	98 2f       	mov	r25, r24
     b88:	88 27       	eor	r24, r24
     b8a:	23 a9       	ldd	r18, Z+51	; 0x33
     b8c:	82 0f       	add	r24, r18
     b8e:	91 1d       	adc	r25, r1
     b90:	97 a7       	std	Z+47, r25	; 0x2f
     b92:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     b94:	84 a9       	ldd	r24, Z+52	; 0x34
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	98 2f       	mov	r25, r24
     b9a:	88 27       	eor	r24, r24
     b9c:	25 a9       	ldd	r18, Z+53	; 0x35
     b9e:	82 0f       	add	r24, r18
     ba0:	91 1d       	adc	r25, r1
     ba2:	91 ab       	std	Z+49, r25	; 0x31
     ba4:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     ba6:	86 a9       	ldd	r24, Z+54	; 0x36
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	98 2f       	mov	r25, r24
     bac:	88 27       	eor	r24, r24
     bae:	27 a9       	ldd	r18, Z+55	; 0x37
     bb0:	82 0f       	add	r24, r18
     bb2:	91 1d       	adc	r25, r1
     bb4:	93 ab       	std	Z+51, r25	; 0x33
     bb6:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     bb8:	83 e2       	ldi	r24, 0x23	; 35
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	f0 d0       	rcall	.+480    	; 0xd9e <wait_ms>
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     bd6:	09 e9       	ldi	r16, 0x99	; 153
     bd8:	10 e0       	ldi	r17, 0x00	; 0
     bda:	80 e1       	ldi	r24, 0x10	; 16
     bdc:	f8 01       	movw	r30, r16
     bde:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     be6:	86 e0       	ldi	r24, 0x06	; 6
     be8:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     bec:	80 e8       	ldi	r24, 0x80	; 128
     bee:	f0 de       	rcall	.-544    	; 0x9d0 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     bf0:	81 e8       	ldi	r24, 0x81	; 129
     bf2:	ee de       	rcall	.-548    	; 0x9d0 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	ec de       	rcall	.-552    	; 0x9d0 <oi_byte_tx>
	wait_ms(100);
     bf8:	84 e6       	ldi	r24, 0x64	; 100
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	d0 d0       	rcall	.+416    	; 0xd9e <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     bfe:	81 e2       	ldi	r24, 0x21	; 33
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     c04:	84 e8       	ldi	r24, 0x84	; 132
     c06:	e4 de       	rcall	.-568    	; 0x9d0 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	47 e0       	ldi	r20, 0x07	; 7
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	e7 de       	rcall	.-562    	; 0x9e0 <oi_set_leds>
	
	oi_update(self);
     c12:	ce 01       	movw	r24, r28
     c14:	20 df       	rcall	.-448    	; 0xa56 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     c16:	ce 01       	movw	r24, r28
     c18:	1e df       	rcall	.-452    	; 0xa56 <oi_update>
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	08 95       	ret

00000c24 <timer3_init>:
#define DEGREE_MULTIPLIER 20.5
#define DEGREE_OFFSET 700

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     c24:	83 e2       	ldi	r24, 0x23	; 35
     c26:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     c2a:	8a e1       	ldi	r24, 0x1A	; 26
     c2c:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     c30:	88 ef       	ldi	r24, 0xF8	; 248
     c32:	97 ea       	ldi	r25, 0xA7	; 167
     c34:	90 93 87 00 	sts	0x0087, r25
     c38:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     c3c:	80 91 2e 01 	lds	r24, 0x012E
     c40:	90 91 2f 01 	lds	r25, 0x012F
     c44:	90 93 85 00 	sts	0x0085, r25
     c48:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     c4c:	14 9a       	sbi	0x02, 4	; 2
     c4e:	08 95       	ret

00000c50 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     c50:	bc 01       	movw	r22, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	d2 d1       	rcall	.+932    	; 0xffc <__floatunsisf>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	44 ea       	ldi	r20, 0xA4	; 164
     c5e:	51 e4       	ldi	r21, 0x41	; 65
     c60:	7f d2       	rcall	.+1278   	; 0x1160 <__mulsf3>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	4f e2       	ldi	r20, 0x2F	; 47
     c68:	54 e4       	ldi	r21, 0x44	; 68
     c6a:	c7 d0       	rcall	.+398    	; 0xdfa <__addsf3>
     c6c:	9b d1       	rcall	.+822    	; 0xfa4 <__fixunssfsi>
     c6e:	70 93 2f 01 	sts	0x012F, r23
     c72:	60 93 2e 01 	sts	0x012E, r22
	OCR3B = pulse_width; // set pulse width
     c76:	70 93 85 00 	sts	0x0085, r23
     c7a:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     c7e:	8e e1       	ldi	r24, 0x1E	; 30
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	8d c0       	rjmp	.+282    	; 0xd9e <wait_ms>
     c84:	08 95       	ret

00000c86 <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	11 24       	eor	r1, r1
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     c94:	80 91 9d 02 	lds	r24, 0x029D
     c98:	81 11       	cpse	r24, r1
     c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <__vector_11+0x30>
		rising_time = ICR1;
     c9c:	86 b5       	in	r24, 0x26	; 38
     c9e:	97 b5       	in	r25, 0x27	; 39
     ca0:	90 93 9c 02 	sts	0x029C, r25
     ca4:	80 93 9b 02 	sts	0x029B, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     ca8:	8e b5       	in	r24, 0x2e	; 46
     caa:	8f 7b       	andi	r24, 0xBF	; 191
     cac:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 9d 02 	sts	0x029D, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__vector_11+0x4a>
		} else if ( state == FALLING) {
     cb6:	80 91 9d 02 	lds	r24, 0x029D
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <__vector_11+0x4a>
		falling_time = ICR1;
     cbe:	86 b5       	in	r24, 0x26	; 38
     cc0:	97 b5       	in	r25, 0x27	; 39
     cc2:	90 93 9a 02 	sts	0x029A, r25
     cc6:	80 93 99 02 	sts	0x0299, r24
		state = DONE;
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	80 93 9d 02 	sts	0x029D, r24
	}
}
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     cde:	60 91 99 02 	lds	r22, 0x0299
     ce2:	70 91 9a 02 	lds	r23, 0x029A
     ce6:	80 91 9b 02 	lds	r24, 0x029B
     cea:	90 91 9c 02 	lds	r25, 0x029C
     cee:	68 1b       	sub	r22, r24
     cf0:	79 0b       	sbc	r23, r25
     cf2:	76 95       	lsr	r23
     cf4:	67 95       	ror	r22
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	80 d1       	rcall	.+768    	; 0xffc <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	34 e2       	ldi	r19, 0x24	; 36
     d00:	44 e7       	ldi	r20, 0x74	; 116
     d02:	56 e4       	ldi	r21, 0x46	; 70
     d04:	e2 d0       	rcall	.+452    	; 0xeca <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ea       	ldi	r20, 0xAA	; 170
     d0c:	53 e4       	ldi	r21, 0x43	; 67
     d0e:	28 d2       	rcall	.+1104   	; 0x1160 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	48 ec       	ldi	r20, 0xC8	; 200
     d16:	52 e4       	ldi	r21, 0x42	; 66
     d18:	23 c2       	rjmp	.+1094   	; 0x1160 <__mulsf3>
	return timeDifference;
}
     d1a:	08 95       	ret

00000d1c <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     d1c:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     d1e:	ea e7       	ldi	r30, 0x7A	; 122
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     d26:	86 b7       	in	r24, 0x36	; 54
     d28:	80 62       	ori	r24, 0x20	; 32
     d2a:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     d2c:	87 b7       	in	r24, 0x37	; 55
     d2e:	80 62       	ori	r24, 0x20	; 32
     d30:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     d32:	85 ec       	ldi	r24, 0xC5	; 197
     d34:	8e bd       	out	0x2e, r24	; 46
     d36:	08 95       	ret

00000d38 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     d38:	87 b7       	in	r24, 0x37	; 55
     d3a:	8b 7d       	andi	r24, 0xDB	; 219
     d3c:	87 bf       	out	0x37, r24	; 55
     d3e:	08 95       	ret

00000d40 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     d40:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     d42:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	2a d0       	rcall	.+84     	; 0xd9e <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     d4a:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     d4c:	8c 98       	cbi	0x11, 4	; 17
     d4e:	08 95       	ret

00000d50 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     d50:	10 92 9d 02 	sts	0x029D, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     d54:	f1 df       	rcall	.-30     	; 0xd38 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     d56:	f4 df       	rcall	.-24     	; 0xd40 <send_pulse>
	
	//Enable interrupt
	timer1_init();
     d58:	e1 df       	rcall	.-62     	; 0xd1c <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     d5a:	80 91 9d 02 	lds	r24, 0x029D
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	e1 f7       	brne	.-8      	; 0xd5a <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     d62:	bd cf       	rjmp	.-134    	; 0xcde <time_to_dist>
     d64:	08 95       	ret

00000d66 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     d66:	10 92 9f 02 	sts	0x029F, r1
     d6a:	10 92 9e 02 	sts	0x029E, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     d6e:	81 11       	cpse	r24, r1
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     d72:	8b e0       	ldi	r24, 0x0B	; 11
     d74:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     d76:	87 b7       	in	r24, 0x37	; 55
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	87 bf       	out	0x37, r24	; 55
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	29 f4       	brne	.+10     	; 0xd8c <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     d82:	89 e0       	ldi	r24, 0x09	; 9
     d84:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     d86:	87 b7       	in	r24, 0x37	; 55
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     d8c:	78 94       	sei
     d8e:	08 95       	ret

00000d90 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     d90:	87 b7       	in	r24, 0x37	; 55
     d92:	8f 77       	andi	r24, 0x7F	; 127
     d94:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     d96:	85 b5       	in	r24, 0x25	; 37
     d98:	8f 77       	andi	r24, 0x7F	; 127
     d9a:	85 bd       	out	0x25, r24	; 37
     d9c:	08 95       	ret

00000d9e <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     da4:	8a ef       	ldi	r24, 0xFA	; 250
     da6:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     da8:	10 92 9f 02 	sts	0x029F, r1
     dac:	10 92 9e 02 	sts	0x029E, r1
	timer2_start(0);
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	d9 df       	rcall	.-78     	; 0xd66 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     db4:	20 91 9e 02 	lds	r18, 0x029E
     db8:	30 91 9f 02 	lds	r19, 0x029F
     dbc:	2c 17       	cp	r18, r28
     dbe:	3d 07       	cpc	r19, r29
     dc0:	c8 f3       	brcs	.-14     	; 0xdb4 <wait_ms+0x16>

	timer2_stop();
     dc2:	e6 df       	rcall	.-52     	; 0xd90 <timer2_stop>
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	8f 93       	push	r24
     dd6:	9f 93       	push	r25
	timer2_tick++;
     dd8:	80 91 9e 02 	lds	r24, 0x029E
     ddc:	90 91 9f 02 	lds	r25, 0x029F
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	90 93 9f 02 	sts	0x029F, r25
     de6:	80 93 9e 02 	sts	0x029E, r24
}
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__subsf3>:
     df8:	50 58       	subi	r21, 0x80	; 128

00000dfa <__addsf3>:
     dfa:	bb 27       	eor	r27, r27
     dfc:	aa 27       	eor	r26, r26
     dfe:	0e d0       	rcall	.+28     	; 0xe1c <__addsf3x>
     e00:	75 c1       	rjmp	.+746    	; 0x10ec <__fp_round>
     e02:	66 d1       	rcall	.+716    	; 0x10d0 <__fp_pscA>
     e04:	30 f0       	brcs	.+12     	; 0xe12 <__addsf3+0x18>
     e06:	6b d1       	rcall	.+726    	; 0x10de <__fp_pscB>
     e08:	20 f0       	brcs	.+8      	; 0xe12 <__addsf3+0x18>
     e0a:	31 f4       	brne	.+12     	; 0xe18 <__addsf3+0x1e>
     e0c:	9f 3f       	cpi	r25, 0xFF	; 255
     e0e:	11 f4       	brne	.+4      	; 0xe14 <__addsf3+0x1a>
     e10:	1e f4       	brtc	.+6      	; 0xe18 <__addsf3+0x1e>
     e12:	5b c1       	rjmp	.+694    	; 0x10ca <__fp_nan>
     e14:	0e f4       	brtc	.+2      	; 0xe18 <__addsf3+0x1e>
     e16:	e0 95       	com	r30
     e18:	e7 fb       	bst	r30, 7
     e1a:	51 c1       	rjmp	.+674    	; 0x10be <__fp_inf>

00000e1c <__addsf3x>:
     e1c:	e9 2f       	mov	r30, r25
     e1e:	77 d1       	rcall	.+750    	; 0x110e <__fp_split3>
     e20:	80 f3       	brcs	.-32     	; 0xe02 <__addsf3+0x8>
     e22:	ba 17       	cp	r27, r26
     e24:	62 07       	cpc	r22, r18
     e26:	73 07       	cpc	r23, r19
     e28:	84 07       	cpc	r24, r20
     e2a:	95 07       	cpc	r25, r21
     e2c:	18 f0       	brcs	.+6      	; 0xe34 <__addsf3x+0x18>
     e2e:	71 f4       	brne	.+28     	; 0xe4c <__addsf3x+0x30>
     e30:	9e f5       	brtc	.+102    	; 0xe98 <__addsf3x+0x7c>
     e32:	8f c1       	rjmp	.+798    	; 0x1152 <__fp_zero>
     e34:	0e f4       	brtc	.+2      	; 0xe38 <__addsf3x+0x1c>
     e36:	e0 95       	com	r30
     e38:	0b 2e       	mov	r0, r27
     e3a:	ba 2f       	mov	r27, r26
     e3c:	a0 2d       	mov	r26, r0
     e3e:	0b 01       	movw	r0, r22
     e40:	b9 01       	movw	r22, r18
     e42:	90 01       	movw	r18, r0
     e44:	0c 01       	movw	r0, r24
     e46:	ca 01       	movw	r24, r20
     e48:	a0 01       	movw	r20, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	ff 27       	eor	r31, r31
     e4e:	59 1b       	sub	r21, r25
     e50:	99 f0       	breq	.+38     	; 0xe78 <__addsf3x+0x5c>
     e52:	59 3f       	cpi	r21, 0xF9	; 249
     e54:	50 f4       	brcc	.+20     	; 0xe6a <__addsf3x+0x4e>
     e56:	50 3e       	cpi	r21, 0xE0	; 224
     e58:	68 f1       	brcs	.+90     	; 0xeb4 <__addsf3x+0x98>
     e5a:	1a 16       	cp	r1, r26
     e5c:	f0 40       	sbci	r31, 0x00	; 0
     e5e:	a2 2f       	mov	r26, r18
     e60:	23 2f       	mov	r18, r19
     e62:	34 2f       	mov	r19, r20
     e64:	44 27       	eor	r20, r20
     e66:	58 5f       	subi	r21, 0xF8	; 248
     e68:	f3 cf       	rjmp	.-26     	; 0xe50 <__addsf3x+0x34>
     e6a:	46 95       	lsr	r20
     e6c:	37 95       	ror	r19
     e6e:	27 95       	ror	r18
     e70:	a7 95       	ror	r26
     e72:	f0 40       	sbci	r31, 0x00	; 0
     e74:	53 95       	inc	r21
     e76:	c9 f7       	brne	.-14     	; 0xe6a <__addsf3x+0x4e>
     e78:	7e f4       	brtc	.+30     	; 0xe98 <__addsf3x+0x7c>
     e7a:	1f 16       	cp	r1, r31
     e7c:	ba 0b       	sbc	r27, r26
     e7e:	62 0b       	sbc	r22, r18
     e80:	73 0b       	sbc	r23, r19
     e82:	84 0b       	sbc	r24, r20
     e84:	ba f0       	brmi	.+46     	; 0xeb4 <__addsf3x+0x98>
     e86:	91 50       	subi	r25, 0x01	; 1
     e88:	a1 f0       	breq	.+40     	; 0xeb2 <__addsf3x+0x96>
     e8a:	ff 0f       	add	r31, r31
     e8c:	bb 1f       	adc	r27, r27
     e8e:	66 1f       	adc	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	c2 f7       	brpl	.-16     	; 0xe86 <__addsf3x+0x6a>
     e96:	0e c0       	rjmp	.+28     	; 0xeb4 <__addsf3x+0x98>
     e98:	ba 0f       	add	r27, r26
     e9a:	62 1f       	adc	r22, r18
     e9c:	73 1f       	adc	r23, r19
     e9e:	84 1f       	adc	r24, r20
     ea0:	48 f4       	brcc	.+18     	; 0xeb4 <__addsf3x+0x98>
     ea2:	87 95       	ror	r24
     ea4:	77 95       	ror	r23
     ea6:	67 95       	ror	r22
     ea8:	b7 95       	ror	r27
     eaa:	f7 95       	ror	r31
     eac:	9e 3f       	cpi	r25, 0xFE	; 254
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <__addsf3x+0x96>
     eb0:	b3 cf       	rjmp	.-154    	; 0xe18 <__addsf3+0x1e>
     eb2:	93 95       	inc	r25
     eb4:	88 0f       	add	r24, r24
     eb6:	08 f0       	brcs	.+2      	; 0xeba <__addsf3x+0x9e>
     eb8:	99 27       	eor	r25, r25
     eba:	ee 0f       	add	r30, r30
     ebc:	97 95       	ror	r25
     ebe:	87 95       	ror	r24
     ec0:	08 95       	ret

00000ec2 <__cmpsf2>:
     ec2:	d9 d0       	rcall	.+434    	; 0x1076 <__fp_cmp>
     ec4:	08 f4       	brcc	.+2      	; 0xec8 <__cmpsf2+0x6>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	08 95       	ret

00000eca <__divsf3>:
     eca:	0c d0       	rcall	.+24     	; 0xee4 <__divsf3x>
     ecc:	0f c1       	rjmp	.+542    	; 0x10ec <__fp_round>
     ece:	07 d1       	rcall	.+526    	; 0x10de <__fp_pscB>
     ed0:	40 f0       	brcs	.+16     	; 0xee2 <__divsf3+0x18>
     ed2:	fe d0       	rcall	.+508    	; 0x10d0 <__fp_pscA>
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__divsf3+0x18>
     ed6:	21 f4       	brne	.+8      	; 0xee0 <__divsf3+0x16>
     ed8:	5f 3f       	cpi	r21, 0xFF	; 255
     eda:	19 f0       	breq	.+6      	; 0xee2 <__divsf3+0x18>
     edc:	f0 c0       	rjmp	.+480    	; 0x10be <__fp_inf>
     ede:	51 11       	cpse	r21, r1
     ee0:	39 c1       	rjmp	.+626    	; 0x1154 <__fp_szero>
     ee2:	f3 c0       	rjmp	.+486    	; 0x10ca <__fp_nan>

00000ee4 <__divsf3x>:
     ee4:	14 d1       	rcall	.+552    	; 0x110e <__fp_split3>
     ee6:	98 f3       	brcs	.-26     	; 0xece <__divsf3+0x4>

00000ee8 <__divsf3_pse>:
     ee8:	99 23       	and	r25, r25
     eea:	c9 f3       	breq	.-14     	; 0xede <__divsf3+0x14>
     eec:	55 23       	and	r21, r21
     eee:	b1 f3       	breq	.-20     	; 0xedc <__divsf3+0x12>
     ef0:	95 1b       	sub	r25, r21
     ef2:	55 0b       	sbc	r21, r21
     ef4:	bb 27       	eor	r27, r27
     ef6:	aa 27       	eor	r26, r26
     ef8:	62 17       	cp	r22, r18
     efa:	73 07       	cpc	r23, r19
     efc:	84 07       	cpc	r24, r20
     efe:	38 f0       	brcs	.+14     	; 0xf0e <__divsf3_pse+0x26>
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	44 1f       	adc	r20, r20
     f0a:	aa 1f       	adc	r26, r26
     f0c:	a9 f3       	breq	.-22     	; 0xef8 <__divsf3_pse+0x10>
     f0e:	33 d0       	rcall	.+102    	; 0xf76 <__divsf3_pse+0x8e>
     f10:	0e 2e       	mov	r0, r30
     f12:	3a f0       	brmi	.+14     	; 0xf22 <__divsf3_pse+0x3a>
     f14:	e0 e8       	ldi	r30, 0x80	; 128
     f16:	30 d0       	rcall	.+96     	; 0xf78 <__divsf3_pse+0x90>
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	50 40       	sbci	r21, 0x00	; 0
     f1c:	e6 95       	lsr	r30
     f1e:	00 1c       	adc	r0, r0
     f20:	ca f7       	brpl	.-14     	; 0xf14 <__divsf3_pse+0x2c>
     f22:	29 d0       	rcall	.+82     	; 0xf76 <__divsf3_pse+0x8e>
     f24:	fe 2f       	mov	r31, r30
     f26:	27 d0       	rcall	.+78     	; 0xf76 <__divsf3_pse+0x8e>
     f28:	66 0f       	add	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	88 1f       	adc	r24, r24
     f2e:	bb 1f       	adc	r27, r27
     f30:	26 17       	cp	r18, r22
     f32:	37 07       	cpc	r19, r23
     f34:	48 07       	cpc	r20, r24
     f36:	ab 07       	cpc	r26, r27
     f38:	b0 e8       	ldi	r27, 0x80	; 128
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__divsf3_pse+0x56>
     f3c:	bb 0b       	sbc	r27, r27
     f3e:	80 2d       	mov	r24, r0
     f40:	bf 01       	movw	r22, r30
     f42:	ff 27       	eor	r31, r31
     f44:	93 58       	subi	r25, 0x83	; 131
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__divsf3_pse+0x6c>
     f4a:	9e 3f       	cpi	r25, 0xFE	; 254
     f4c:	51 05       	cpc	r21, r1
     f4e:	68 f0       	brcs	.+26     	; 0xf6a <__divsf3_pse+0x82>
     f50:	b6 c0       	rjmp	.+364    	; 0x10be <__fp_inf>
     f52:	00 c1       	rjmp	.+512    	; 0x1154 <__fp_szero>
     f54:	5f 3f       	cpi	r21, 0xFF	; 255
     f56:	ec f3       	brlt	.-6      	; 0xf52 <__divsf3_pse+0x6a>
     f58:	98 3e       	cpi	r25, 0xE8	; 232
     f5a:	dc f3       	brlt	.-10     	; 0xf52 <__divsf3_pse+0x6a>
     f5c:	86 95       	lsr	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	b7 95       	ror	r27
     f64:	f7 95       	ror	r31
     f66:	9f 5f       	subi	r25, 0xFF	; 255
     f68:	c9 f7       	brne	.-14     	; 0xf5c <__divsf3_pse+0x74>
     f6a:	88 0f       	add	r24, r24
     f6c:	91 1d       	adc	r25, r1
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	97 f9       	bld	r25, 7
     f74:	08 95       	ret
     f76:	e1 e0       	ldi	r30, 0x01	; 1
     f78:	66 0f       	add	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	88 1f       	adc	r24, r24
     f7e:	bb 1f       	adc	r27, r27
     f80:	62 17       	cp	r22, r18
     f82:	73 07       	cpc	r23, r19
     f84:	84 07       	cpc	r24, r20
     f86:	ba 07       	cpc	r27, r26
     f88:	20 f0       	brcs	.+8      	; 0xf92 <__divsf3_pse+0xaa>
     f8a:	62 1b       	sub	r22, r18
     f8c:	73 0b       	sbc	r23, r19
     f8e:	84 0b       	sbc	r24, r20
     f90:	ba 0b       	sbc	r27, r26
     f92:	ee 1f       	adc	r30, r30
     f94:	88 f7       	brcc	.-30     	; 0xf78 <__divsf3_pse+0x90>
     f96:	e0 95       	com	r30
     f98:	08 95       	ret

00000f9a <__fixsfsi>:
     f9a:	04 d0       	rcall	.+8      	; 0xfa4 <__fixunssfsi>
     f9c:	68 94       	set
     f9e:	b1 11       	cpse	r27, r1
     fa0:	d9 c0       	rjmp	.+434    	; 0x1154 <__fp_szero>
     fa2:	08 95       	ret

00000fa4 <__fixunssfsi>:
     fa4:	bc d0       	rcall	.+376    	; 0x111e <__fp_splitA>
     fa6:	88 f0       	brcs	.+34     	; 0xfca <__fixunssfsi+0x26>
     fa8:	9f 57       	subi	r25, 0x7F	; 127
     faa:	90 f0       	brcs	.+36     	; 0xfd0 <__fixunssfsi+0x2c>
     fac:	b9 2f       	mov	r27, r25
     fae:	99 27       	eor	r25, r25
     fb0:	b7 51       	subi	r27, 0x17	; 23
     fb2:	a0 f0       	brcs	.+40     	; 0xfdc <__fixunssfsi+0x38>
     fb4:	d1 f0       	breq	.+52     	; 0xfea <__fixunssfsi+0x46>
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	1a f0       	brmi	.+6      	; 0xfc6 <__fixunssfsi+0x22>
     fc0:	ba 95       	dec	r27
     fc2:	c9 f7       	brne	.-14     	; 0xfb6 <__fixunssfsi+0x12>
     fc4:	12 c0       	rjmp	.+36     	; 0xfea <__fixunssfsi+0x46>
     fc6:	b1 30       	cpi	r27, 0x01	; 1
     fc8:	81 f0       	breq	.+32     	; 0xfea <__fixunssfsi+0x46>
     fca:	c3 d0       	rcall	.+390    	; 0x1152 <__fp_zero>
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	08 95       	ret
     fd0:	c0 c0       	rjmp	.+384    	; 0x1152 <__fp_zero>
     fd2:	67 2f       	mov	r22, r23
     fd4:	78 2f       	mov	r23, r24
     fd6:	88 27       	eor	r24, r24
     fd8:	b8 5f       	subi	r27, 0xF8	; 248
     fda:	39 f0       	breq	.+14     	; 0xfea <__fixunssfsi+0x46>
     fdc:	b9 3f       	cpi	r27, 0xF9	; 249
     fde:	cc f3       	brlt	.-14     	; 0xfd2 <__fixunssfsi+0x2e>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b3 95       	inc	r27
     fe8:	d9 f7       	brne	.-10     	; 0xfe0 <__fixunssfsi+0x3c>
     fea:	3e f4       	brtc	.+14     	; 0xffa <__fixunssfsi+0x56>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	08 95       	ret

00000ffc <__floatunsisf>:
     ffc:	e8 94       	clt
     ffe:	09 c0       	rjmp	.+18     	; 0x1012 <__floatsisf+0x12>

00001000 <__floatsisf>:
    1000:	97 fb       	bst	r25, 7
    1002:	3e f4       	brtc	.+14     	; 0x1012 <__floatsisf+0x12>
    1004:	90 95       	com	r25
    1006:	80 95       	com	r24
    1008:	70 95       	com	r23
    100a:	61 95       	neg	r22
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	8f 4f       	sbci	r24, 0xFF	; 255
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	99 23       	and	r25, r25
    1014:	a9 f0       	breq	.+42     	; 0x1040 <__floatsisf+0x40>
    1016:	f9 2f       	mov	r31, r25
    1018:	96 e9       	ldi	r25, 0x96	; 150
    101a:	bb 27       	eor	r27, r27
    101c:	93 95       	inc	r25
    101e:	f6 95       	lsr	r31
    1020:	87 95       	ror	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b7 95       	ror	r27
    1028:	f1 11       	cpse	r31, r1
    102a:	f8 cf       	rjmp	.-16     	; 0x101c <__floatsisf+0x1c>
    102c:	fa f4       	brpl	.+62     	; 0x106c <__floatsisf+0x6c>
    102e:	bb 0f       	add	r27, r27
    1030:	11 f4       	brne	.+4      	; 0x1036 <__floatsisf+0x36>
    1032:	60 ff       	sbrs	r22, 0
    1034:	1b c0       	rjmp	.+54     	; 0x106c <__floatsisf+0x6c>
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	16 c0       	rjmp	.+44     	; 0x106c <__floatsisf+0x6c>
    1040:	88 23       	and	r24, r24
    1042:	11 f0       	breq	.+4      	; 0x1048 <__floatsisf+0x48>
    1044:	96 e9       	ldi	r25, 0x96	; 150
    1046:	11 c0       	rjmp	.+34     	; 0x106a <__floatsisf+0x6a>
    1048:	77 23       	and	r23, r23
    104a:	21 f0       	breq	.+8      	; 0x1054 <__floatsisf+0x54>
    104c:	9e e8       	ldi	r25, 0x8E	; 142
    104e:	87 2f       	mov	r24, r23
    1050:	76 2f       	mov	r23, r22
    1052:	05 c0       	rjmp	.+10     	; 0x105e <__floatsisf+0x5e>
    1054:	66 23       	and	r22, r22
    1056:	71 f0       	breq	.+28     	; 0x1074 <__floatsisf+0x74>
    1058:	96 e8       	ldi	r25, 0x86	; 134
    105a:	86 2f       	mov	r24, r22
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	2a f0       	brmi	.+10     	; 0x106c <__floatsisf+0x6c>
    1062:	9a 95       	dec	r25
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	da f7       	brpl	.-10     	; 0x1062 <__floatsisf+0x62>
    106c:	88 0f       	add	r24, r24
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	97 f9       	bld	r25, 7
    1074:	08 95       	ret

00001076 <__fp_cmp>:
    1076:	99 0f       	add	r25, r25
    1078:	00 08       	sbc	r0, r0
    107a:	55 0f       	add	r21, r21
    107c:	aa 0b       	sbc	r26, r26
    107e:	e0 e8       	ldi	r30, 0x80	; 128
    1080:	fe ef       	ldi	r31, 0xFE	; 254
    1082:	16 16       	cp	r1, r22
    1084:	17 06       	cpc	r1, r23
    1086:	e8 07       	cpc	r30, r24
    1088:	f9 07       	cpc	r31, r25
    108a:	c0 f0       	brcs	.+48     	; 0x10bc <__fp_cmp+0x46>
    108c:	12 16       	cp	r1, r18
    108e:	13 06       	cpc	r1, r19
    1090:	e4 07       	cpc	r30, r20
    1092:	f5 07       	cpc	r31, r21
    1094:	98 f0       	brcs	.+38     	; 0x10bc <__fp_cmp+0x46>
    1096:	62 1b       	sub	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	95 0b       	sbc	r25, r21
    109e:	39 f4       	brne	.+14     	; 0x10ae <__fp_cmp+0x38>
    10a0:	0a 26       	eor	r0, r26
    10a2:	61 f0       	breq	.+24     	; 0x10bc <__fp_cmp+0x46>
    10a4:	23 2b       	or	r18, r19
    10a6:	24 2b       	or	r18, r20
    10a8:	25 2b       	or	r18, r21
    10aa:	21 f4       	brne	.+8      	; 0x10b4 <__fp_cmp+0x3e>
    10ac:	08 95       	ret
    10ae:	0a 26       	eor	r0, r26
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <__fp_cmp+0x3e>
    10b2:	a1 40       	sbci	r26, 0x01	; 1
    10b4:	a6 95       	lsr	r26
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	81 1d       	adc	r24, r1
    10ba:	81 1d       	adc	r24, r1
    10bc:	08 95       	ret

000010be <__fp_inf>:
    10be:	97 f9       	bld	r25, 7
    10c0:	9f 67       	ori	r25, 0x7F	; 127
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	08 95       	ret

000010ca <__fp_nan>:
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	80 ec       	ldi	r24, 0xC0	; 192
    10ce:	08 95       	ret

000010d0 <__fp_pscA>:
    10d0:	00 24       	eor	r0, r0
    10d2:	0a 94       	dec	r0
    10d4:	16 16       	cp	r1, r22
    10d6:	17 06       	cpc	r1, r23
    10d8:	18 06       	cpc	r1, r24
    10da:	09 06       	cpc	r0, r25
    10dc:	08 95       	ret

000010de <__fp_pscB>:
    10de:	00 24       	eor	r0, r0
    10e0:	0a 94       	dec	r0
    10e2:	12 16       	cp	r1, r18
    10e4:	13 06       	cpc	r1, r19
    10e6:	14 06       	cpc	r1, r20
    10e8:	05 06       	cpc	r0, r21
    10ea:	08 95       	ret

000010ec <__fp_round>:
    10ec:	09 2e       	mov	r0, r25
    10ee:	03 94       	inc	r0
    10f0:	00 0c       	add	r0, r0
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0xc>
    10f4:	88 23       	and	r24, r24
    10f6:	52 f0       	brmi	.+20     	; 0x110c <__stack+0xd>
    10f8:	bb 0f       	add	r27, r27
    10fa:	40 f4       	brcc	.+16     	; 0x110c <__stack+0xd>
    10fc:	bf 2b       	or	r27, r31
    10fe:	11 f4       	brne	.+4      	; 0x1104 <__stack+0x5>
    1100:	60 ff       	sbrs	r22, 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <__stack+0xd>
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	08 95       	ret

0000110e <__fp_split3>:
    110e:	57 fd       	sbrc	r21, 7
    1110:	90 58       	subi	r25, 0x80	; 128
    1112:	44 0f       	add	r20, r20
    1114:	55 1f       	adc	r21, r21
    1116:	59 f0       	breq	.+22     	; 0x112e <__fp_splitA+0x10>
    1118:	5f 3f       	cpi	r21, 0xFF	; 255
    111a:	71 f0       	breq	.+28     	; 0x1138 <__fp_splitA+0x1a>
    111c:	47 95       	ror	r20

0000111e <__fp_splitA>:
    111e:	88 0f       	add	r24, r24
    1120:	97 fb       	bst	r25, 7
    1122:	99 1f       	adc	r25, r25
    1124:	61 f0       	breq	.+24     	; 0x113e <__fp_splitA+0x20>
    1126:	9f 3f       	cpi	r25, 0xFF	; 255
    1128:	79 f0       	breq	.+30     	; 0x1148 <__fp_splitA+0x2a>
    112a:	87 95       	ror	r24
    112c:	08 95       	ret
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	14 06       	cpc	r1, r20
    1134:	55 1f       	adc	r21, r21
    1136:	f2 cf       	rjmp	.-28     	; 0x111c <__fp_split3+0xe>
    1138:	46 95       	lsr	r20
    113a:	f1 df       	rcall	.-30     	; 0x111e <__fp_splitA>
    113c:	08 c0       	rjmp	.+16     	; 0x114e <__fp_splitA+0x30>
    113e:	16 16       	cp	r1, r22
    1140:	17 06       	cpc	r1, r23
    1142:	18 06       	cpc	r1, r24
    1144:	99 1f       	adc	r25, r25
    1146:	f1 cf       	rjmp	.-30     	; 0x112a <__fp_splitA+0xc>
    1148:	86 95       	lsr	r24
    114a:	71 05       	cpc	r23, r1
    114c:	61 05       	cpc	r22, r1
    114e:	08 94       	sec
    1150:	08 95       	ret

00001152 <__fp_zero>:
    1152:	e8 94       	clt

00001154 <__fp_szero>:
    1154:	bb 27       	eor	r27, r27
    1156:	66 27       	eor	r22, r22
    1158:	77 27       	eor	r23, r23
    115a:	cb 01       	movw	r24, r22
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <__mulsf3>:
    1160:	0b d0       	rcall	.+22     	; 0x1178 <__mulsf3x>
    1162:	c4 cf       	rjmp	.-120    	; 0x10ec <__fp_round>
    1164:	b5 df       	rcall	.-150    	; 0x10d0 <__fp_pscA>
    1166:	28 f0       	brcs	.+10     	; 0x1172 <__mulsf3+0x12>
    1168:	ba df       	rcall	.-140    	; 0x10de <__fp_pscB>
    116a:	18 f0       	brcs	.+6      	; 0x1172 <__mulsf3+0x12>
    116c:	95 23       	and	r25, r21
    116e:	09 f0       	breq	.+2      	; 0x1172 <__mulsf3+0x12>
    1170:	a6 cf       	rjmp	.-180    	; 0x10be <__fp_inf>
    1172:	ab cf       	rjmp	.-170    	; 0x10ca <__fp_nan>
    1174:	11 24       	eor	r1, r1
    1176:	ee cf       	rjmp	.-36     	; 0x1154 <__fp_szero>

00001178 <__mulsf3x>:
    1178:	ca df       	rcall	.-108    	; 0x110e <__fp_split3>
    117a:	a0 f3       	brcs	.-24     	; 0x1164 <__mulsf3+0x4>

0000117c <__mulsf3_pse>:
    117c:	95 9f       	mul	r25, r21
    117e:	d1 f3       	breq	.-12     	; 0x1174 <__mulsf3+0x14>
    1180:	95 0f       	add	r25, r21
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	55 1f       	adc	r21, r21
    1186:	62 9f       	mul	r22, r18
    1188:	f0 01       	movw	r30, r0
    118a:	72 9f       	mul	r23, r18
    118c:	bb 27       	eor	r27, r27
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	63 9f       	mul	r22, r19
    1194:	aa 27       	eor	r26, r26
    1196:	f0 0d       	add	r31, r0
    1198:	b1 1d       	adc	r27, r1
    119a:	aa 1f       	adc	r26, r26
    119c:	64 9f       	mul	r22, r20
    119e:	66 27       	eor	r22, r22
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	66 1f       	adc	r22, r22
    11a6:	82 9f       	mul	r24, r18
    11a8:	22 27       	eor	r18, r18
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	73 9f       	mul	r23, r19
    11b2:	b0 0d       	add	r27, r0
    11b4:	a1 1d       	adc	r26, r1
    11b6:	62 1f       	adc	r22, r18
    11b8:	83 9f       	mul	r24, r19
    11ba:	a0 0d       	add	r26, r0
    11bc:	61 1d       	adc	r22, r1
    11be:	22 1f       	adc	r18, r18
    11c0:	74 9f       	mul	r23, r20
    11c2:	33 27       	eor	r19, r19
    11c4:	a0 0d       	add	r26, r0
    11c6:	61 1d       	adc	r22, r1
    11c8:	23 1f       	adc	r18, r19
    11ca:	84 9f       	mul	r24, r20
    11cc:	60 0d       	add	r22, r0
    11ce:	21 1d       	adc	r18, r1
    11d0:	82 2f       	mov	r24, r18
    11d2:	76 2f       	mov	r23, r22
    11d4:	6a 2f       	mov	r22, r26
    11d6:	11 24       	eor	r1, r1
    11d8:	9f 57       	subi	r25, 0x7F	; 127
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	8a f0       	brmi	.+34     	; 0x1200 <__mulsf3_pse+0x84>
    11de:	e1 f0       	breq	.+56     	; 0x1218 <__mulsf3_pse+0x9c>
    11e0:	88 23       	and	r24, r24
    11e2:	4a f0       	brmi	.+18     	; 0x11f6 <__mulsf3_pse+0x7a>
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	bb 1f       	adc	r27, r27
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__mulsf3_pse+0x64>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	70 f0       	brcs	.+28     	; 0x1218 <__mulsf3_pse+0x9c>
    11fc:	60 cf       	rjmp	.-320    	; 0x10be <__fp_inf>
    11fe:	aa cf       	rjmp	.-172    	; 0x1154 <__fp_szero>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	ec f3       	brlt	.-6      	; 0x11fe <__mulsf3_pse+0x82>
    1204:	98 3e       	cpi	r25, 0xE8	; 232
    1206:	dc f3       	brlt	.-10     	; 0x11fe <__mulsf3_pse+0x82>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f7 95       	ror	r31
    1212:	e7 95       	ror	r30
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c1 f7       	brne	.-16     	; 0x1208 <__mulsf3_pse+0x8c>
    1218:	fe 2b       	or	r31, r30
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret

00001226 <__divmodhi4>:
    1226:	97 fb       	bst	r25, 7
    1228:	07 2e       	mov	r0, r23
    122a:	16 f4       	brtc	.+4      	; 0x1230 <__divmodhi4+0xa>
    122c:	00 94       	com	r0
    122e:	06 d0       	rcall	.+12     	; 0x123c <__divmodhi4_neg1>
    1230:	77 fd       	sbrc	r23, 7
    1232:	08 d0       	rcall	.+16     	; 0x1244 <__divmodhi4_neg2>
    1234:	0b d0       	rcall	.+22     	; 0x124c <__udivmodhi4>
    1236:	07 fc       	sbrc	r0, 7
    1238:	05 d0       	rcall	.+10     	; 0x1244 <__divmodhi4_neg2>
    123a:	3e f4       	brtc	.+14     	; 0x124a <__divmodhi4_exit>

0000123c <__divmodhi4_neg1>:
    123c:	90 95       	com	r25
    123e:	81 95       	neg	r24
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__divmodhi4_neg2>:
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255

0000124a <__divmodhi4_exit>:
    124a:	08 95       	ret

0000124c <__udivmodhi4>:
    124c:	aa 1b       	sub	r26, r26
    124e:	bb 1b       	sub	r27, r27
    1250:	51 e1       	ldi	r21, 0x11	; 17
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <__udivmodhi4_ep>

00001254 <__udivmodhi4_loop>:
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	a6 17       	cp	r26, r22
    125a:	b7 07       	cpc	r27, r23
    125c:	10 f0       	brcs	.+4      	; 0x1262 <__udivmodhi4_ep>
    125e:	a6 1b       	sub	r26, r22
    1260:	b7 0b       	sbc	r27, r23

00001262 <__udivmodhi4_ep>:
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	5a 95       	dec	r21
    1268:	a9 f7       	brne	.-22     	; 0x1254 <__udivmodhi4_loop>
    126a:	80 95       	com	r24
    126c:	90 95       	com	r25
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	08 95       	ret

00001274 <calloc>:
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	86 9f       	mul	r24, r22
    127e:	80 01       	movw	r16, r0
    1280:	87 9f       	mul	r24, r23
    1282:	10 0d       	add	r17, r0
    1284:	96 9f       	mul	r25, r22
    1286:	10 0d       	add	r17, r0
    1288:	11 24       	eor	r1, r1
    128a:	c8 01       	movw	r24, r16
    128c:	0d d0       	rcall	.+26     	; 0x12a8 <malloc>
    128e:	ec 01       	movw	r28, r24
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	21 f0       	breq	.+8      	; 0x129c <calloc+0x28>
    1294:	a8 01       	movw	r20, r16
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	2d d1       	rcall	.+602    	; 0x14f6 <memset>
    129c:	ce 01       	movw	r24, r28
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <malloc>:
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	82 30       	cpi	r24, 0x02	; 2
    12ae:	91 05       	cpc	r25, r1
    12b0:	10 f4       	brcc	.+4      	; 0x12b6 <malloc+0xe>
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	e0 91 a2 02 	lds	r30, 0x02A2
    12ba:	f0 91 a3 02 	lds	r31, 0x02A3
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	a0 e0       	ldi	r26, 0x00	; 0
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	30 97       	sbiw	r30, 0x00	; 0
    12c8:	39 f1       	breq	.+78     	; 0x1318 <malloc+0x70>
    12ca:	40 81       	ld	r20, Z
    12cc:	51 81       	ldd	r21, Z+1	; 0x01
    12ce:	48 17       	cp	r20, r24
    12d0:	59 07       	cpc	r21, r25
    12d2:	b8 f0       	brcs	.+46     	; 0x1302 <malloc+0x5a>
    12d4:	48 17       	cp	r20, r24
    12d6:	59 07       	cpc	r21, r25
    12d8:	71 f4       	brne	.+28     	; 0x12f6 <malloc+0x4e>
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	10 97       	sbiw	r26, 0x00	; 0
    12e0:	29 f0       	breq	.+10     	; 0x12ec <malloc+0x44>
    12e2:	13 96       	adiw	r26, 0x03	; 3
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
    12e8:	12 97       	sbiw	r26, 0x02	; 2
    12ea:	2c c0       	rjmp	.+88     	; 0x1344 <malloc+0x9c>
    12ec:	90 93 a3 02 	sts	0x02A3, r25
    12f0:	80 93 a2 02 	sts	0x02A2, r24
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <malloc+0x9c>
    12f6:	21 15       	cp	r18, r1
    12f8:	31 05       	cpc	r19, r1
    12fa:	31 f0       	breq	.+12     	; 0x1308 <malloc+0x60>
    12fc:	42 17       	cp	r20, r18
    12fe:	53 07       	cpc	r21, r19
    1300:	18 f0       	brcs	.+6      	; 0x1308 <malloc+0x60>
    1302:	a9 01       	movw	r20, r18
    1304:	db 01       	movw	r26, r22
    1306:	01 c0       	rjmp	.+2      	; 0x130a <malloc+0x62>
    1308:	ef 01       	movw	r28, r30
    130a:	9a 01       	movw	r18, r20
    130c:	bd 01       	movw	r22, r26
    130e:	df 01       	movw	r26, r30
    1310:	02 80       	ldd	r0, Z+2	; 0x02
    1312:	f3 81       	ldd	r31, Z+3	; 0x03
    1314:	e0 2d       	mov	r30, r0
    1316:	d7 cf       	rjmp	.-82     	; 0x12c6 <malloc+0x1e>
    1318:	21 15       	cp	r18, r1
    131a:	31 05       	cpc	r19, r1
    131c:	f9 f0       	breq	.+62     	; 0x135c <malloc+0xb4>
    131e:	28 1b       	sub	r18, r24
    1320:	39 0b       	sbc	r19, r25
    1322:	24 30       	cpi	r18, 0x04	; 4
    1324:	31 05       	cpc	r19, r1
    1326:	80 f4       	brcc	.+32     	; 0x1348 <malloc+0xa0>
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	21 f0       	breq	.+8      	; 0x133a <malloc+0x92>
    1332:	fb 01       	movw	r30, r22
    1334:	93 83       	std	Z+3, r25	; 0x03
    1336:	82 83       	std	Z+2, r24	; 0x02
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <malloc+0x9a>
    133a:	90 93 a3 02 	sts	0x02A3, r25
    133e:	80 93 a2 02 	sts	0x02A2, r24
    1342:	fe 01       	movw	r30, r28
    1344:	32 96       	adiw	r30, 0x02	; 2
    1346:	44 c0       	rjmp	.+136    	; 0x13d0 <malloc+0x128>
    1348:	fe 01       	movw	r30, r28
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	81 93       	st	Z+, r24
    1350:	91 93       	st	Z+, r25
    1352:	22 50       	subi	r18, 0x02	; 2
    1354:	31 09       	sbc	r19, r1
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	28 83       	st	Y, r18
    135a:	3a c0       	rjmp	.+116    	; 0x13d0 <malloc+0x128>
    135c:	20 91 a0 02 	lds	r18, 0x02A0
    1360:	30 91 a1 02 	lds	r19, 0x02A1
    1364:	23 2b       	or	r18, r19
    1366:	41 f4       	brne	.+16     	; 0x1378 <malloc+0xd0>
    1368:	20 91 02 01 	lds	r18, 0x0102
    136c:	30 91 03 01 	lds	r19, 0x0103
    1370:	30 93 a1 02 	sts	0x02A1, r19
    1374:	20 93 a0 02 	sts	0x02A0, r18
    1378:	20 91 00 01 	lds	r18, 0x0100
    137c:	30 91 01 01 	lds	r19, 0x0101
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	41 f4       	brne	.+16     	; 0x1396 <malloc+0xee>
    1386:	2d b7       	in	r18, 0x3d	; 61
    1388:	3e b7       	in	r19, 0x3e	; 62
    138a:	40 91 04 01 	lds	r20, 0x0104
    138e:	50 91 05 01 	lds	r21, 0x0105
    1392:	24 1b       	sub	r18, r20
    1394:	35 0b       	sbc	r19, r21
    1396:	e0 91 a0 02 	lds	r30, 0x02A0
    139a:	f0 91 a1 02 	lds	r31, 0x02A1
    139e:	e2 17       	cp	r30, r18
    13a0:	f3 07       	cpc	r31, r19
    13a2:	a0 f4       	brcc	.+40     	; 0x13cc <malloc+0x124>
    13a4:	2e 1b       	sub	r18, r30
    13a6:	3f 0b       	sbc	r19, r31
    13a8:	28 17       	cp	r18, r24
    13aa:	39 07       	cpc	r19, r25
    13ac:	78 f0       	brcs	.+30     	; 0x13cc <malloc+0x124>
    13ae:	ac 01       	movw	r20, r24
    13b0:	4e 5f       	subi	r20, 0xFE	; 254
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	24 17       	cp	r18, r20
    13b6:	35 07       	cpc	r19, r21
    13b8:	48 f0       	brcs	.+18     	; 0x13cc <malloc+0x124>
    13ba:	4e 0f       	add	r20, r30
    13bc:	5f 1f       	adc	r21, r31
    13be:	50 93 a1 02 	sts	0x02A1, r21
    13c2:	40 93 a0 02 	sts	0x02A0, r20
    13c6:	81 93       	st	Z+, r24
    13c8:	91 93       	st	Z+, r25
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <malloc+0x128>
    13cc:	e0 e0       	ldi	r30, 0x00	; 0
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	cf 01       	movw	r24, r30
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <free>:
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <free+0xa>
    13e0:	87 c0       	rjmp	.+270    	; 0x14f0 <free+0x118>
    13e2:	fc 01       	movw	r30, r24
    13e4:	32 97       	sbiw	r30, 0x02	; 2
    13e6:	13 82       	std	Z+3, r1	; 0x03
    13e8:	12 82       	std	Z+2, r1	; 0x02
    13ea:	c0 91 a2 02 	lds	r28, 0x02A2
    13ee:	d0 91 a3 02 	lds	r29, 0x02A3
    13f2:	20 97       	sbiw	r28, 0x00	; 0
    13f4:	81 f4       	brne	.+32     	; 0x1416 <free+0x3e>
    13f6:	20 81       	ld	r18, Z
    13f8:	31 81       	ldd	r19, Z+1	; 0x01
    13fa:	28 0f       	add	r18, r24
    13fc:	39 1f       	adc	r19, r25
    13fe:	80 91 a0 02 	lds	r24, 0x02A0
    1402:	90 91 a1 02 	lds	r25, 0x02A1
    1406:	82 17       	cp	r24, r18
    1408:	93 07       	cpc	r25, r19
    140a:	79 f5       	brne	.+94     	; 0x146a <free+0x92>
    140c:	f0 93 a1 02 	sts	0x02A1, r31
    1410:	e0 93 a0 02 	sts	0x02A0, r30
    1414:	6d c0       	rjmp	.+218    	; 0x14f0 <free+0x118>
    1416:	de 01       	movw	r26, r28
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	ae 17       	cp	r26, r30
    141e:	bf 07       	cpc	r27, r31
    1420:	50 f4       	brcc	.+20     	; 0x1436 <free+0x5e>
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	4d 91       	ld	r20, X+
    1426:	5c 91       	ld	r21, X
    1428:	13 97       	sbiw	r26, 0x03	; 3
    142a:	9d 01       	movw	r18, r26
    142c:	41 15       	cp	r20, r1
    142e:	51 05       	cpc	r21, r1
    1430:	09 f1       	breq	.+66     	; 0x1474 <free+0x9c>
    1432:	da 01       	movw	r26, r20
    1434:	f3 cf       	rjmp	.-26     	; 0x141c <free+0x44>
    1436:	b3 83       	std	Z+3, r27	; 0x03
    1438:	a2 83       	std	Z+2, r26	; 0x02
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	84 0f       	add	r24, r20
    1440:	95 1f       	adc	r25, r21
    1442:	8a 17       	cp	r24, r26
    1444:	9b 07       	cpc	r25, r27
    1446:	71 f4       	brne	.+28     	; 0x1464 <free+0x8c>
    1448:	8d 91       	ld	r24, X+
    144a:	9c 91       	ld	r25, X
    144c:	11 97       	sbiw	r26, 0x01	; 1
    144e:	84 0f       	add	r24, r20
    1450:	95 1f       	adc	r25, r21
    1452:	02 96       	adiw	r24, 0x02	; 2
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	80 83       	st	Z, r24
    1458:	12 96       	adiw	r26, 0x02	; 2
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	13 97       	sbiw	r26, 0x03	; 3
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	21 15       	cp	r18, r1
    1466:	31 05       	cpc	r19, r1
    1468:	29 f4       	brne	.+10     	; 0x1474 <free+0x9c>
    146a:	f0 93 a3 02 	sts	0x02A3, r31
    146e:	e0 93 a2 02 	sts	0x02A2, r30
    1472:	3e c0       	rjmp	.+124    	; 0x14f0 <free+0x118>
    1474:	d9 01       	movw	r26, r18
    1476:	13 96       	adiw	r26, 0x03	; 3
    1478:	fc 93       	st	X, r31
    147a:	ee 93       	st	-X, r30
    147c:	12 97       	sbiw	r26, 0x02	; 2
    147e:	4d 91       	ld	r20, X+
    1480:	5d 91       	ld	r21, X+
    1482:	a4 0f       	add	r26, r20
    1484:	b5 1f       	adc	r27, r21
    1486:	ea 17       	cp	r30, r26
    1488:	fb 07       	cpc	r31, r27
    148a:	79 f4       	brne	.+30     	; 0x14aa <free+0xd2>
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	84 0f       	add	r24, r20
    1492:	95 1f       	adc	r25, r21
    1494:	02 96       	adiw	r24, 0x02	; 2
    1496:	d9 01       	movw	r26, r18
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	9c 93       	st	X, r25
    149c:	8e 93       	st	-X, r24
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	13 96       	adiw	r26, 0x03	; 3
    14a4:	9c 93       	st	X, r25
    14a6:	8e 93       	st	-X, r24
    14a8:	12 97       	sbiw	r26, 0x02	; 2
    14aa:	e0 e0       	ldi	r30, 0x00	; 0
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	19 f0       	breq	.+6      	; 0x14bc <free+0xe4>
    14b6:	fe 01       	movw	r30, r28
    14b8:	ec 01       	movw	r28, r24
    14ba:	f9 cf       	rjmp	.-14     	; 0x14ae <free+0xd6>
    14bc:	ce 01       	movw	r24, r28
    14be:	02 96       	adiw	r24, 0x02	; 2
    14c0:	28 81       	ld	r18, Y
    14c2:	39 81       	ldd	r19, Y+1	; 0x01
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	20 91 a0 02 	lds	r18, 0x02A0
    14cc:	30 91 a1 02 	lds	r19, 0x02A1
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	69 f4       	brne	.+26     	; 0x14f0 <free+0x118>
    14d6:	30 97       	sbiw	r30, 0x00	; 0
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <free+0x10c>
    14da:	10 92 a3 02 	sts	0x02A3, r1
    14de:	10 92 a2 02 	sts	0x02A2, r1
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <free+0x110>
    14e4:	13 82       	std	Z+3, r1	; 0x03
    14e6:	12 82       	std	Z+2, r1	; 0x02
    14e8:	d0 93 a1 02 	sts	0x02A1, r29
    14ec:	c0 93 a0 02 	sts	0x02A0, r28
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <memset>:
    14f6:	dc 01       	movw	r26, r24
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <memset+0x6>
    14fa:	6d 93       	st	X+, r22
    14fc:	41 50       	subi	r20, 0x01	; 1
    14fe:	50 40       	sbci	r21, 0x00	; 0
    1500:	e0 f7       	brcc	.-8      	; 0x14fa <memset+0x4>
    1502:	08 95       	ret

00001504 <strcmp>:
    1504:	fb 01       	movw	r30, r22
    1506:	dc 01       	movw	r26, r24
    1508:	8d 91       	ld	r24, X+
    150a:	01 90       	ld	r0, Z+
    150c:	80 19       	sub	r24, r0
    150e:	01 10       	cpse	r0, r1
    1510:	d9 f3       	breq	.-10     	; 0x1508 <strcmp+0x4>
    1512:	99 0b       	sbc	r25, r25
    1514:	08 95       	ret

00001516 <strcpy>:
    1516:	fb 01       	movw	r30, r22
    1518:	dc 01       	movw	r26, r24
    151a:	01 90       	ld	r0, Z+
    151c:	0d 92       	st	X+, r0
    151e:	00 20       	and	r0, r0
    1520:	e1 f7       	brne	.-8      	; 0x151a <strcpy+0x4>
    1522:	08 95       	ret

00001524 <vsnprintf>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	2e 97       	sbiw	r28, 0x0e	; 14
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	8c 01       	movw	r16, r24
    153e:	ca 01       	movw	r24, r20
    1540:	46 e0       	ldi	r20, 0x06	; 6
    1542:	4c 83       	std	Y+4, r20	; 0x04
    1544:	1a 83       	std	Y+2, r17	; 0x02
    1546:	09 83       	std	Y+1, r16	; 0x01
    1548:	77 ff       	sbrs	r23, 7
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vsnprintf+0x2c>
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e8       	ldi	r23, 0x80	; 128
    1550:	61 50       	subi	r22, 0x01	; 1
    1552:	71 09       	sbc	r23, r1
    1554:	7e 83       	std	Y+6, r23	; 0x06
    1556:	6d 83       	std	Y+5, r22	; 0x05
    1558:	a9 01       	movw	r20, r18
    155a:	bc 01       	movw	r22, r24
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	19 d0       	rcall	.+50     	; 0x1594 <vfprintf>
    1562:	4d 81       	ldd	r20, Y+5	; 0x05
    1564:	5e 81       	ldd	r21, Y+6	; 0x06
    1566:	57 fd       	sbrc	r21, 7
    1568:	0a c0       	rjmp	.+20     	; 0x157e <vsnprintf+0x5a>
    156a:	2f 81       	ldd	r18, Y+7	; 0x07
    156c:	38 85       	ldd	r19, Y+8	; 0x08
    156e:	42 17       	cp	r20, r18
    1570:	53 07       	cpc	r21, r19
    1572:	0c f4       	brge	.+2      	; 0x1576 <vsnprintf+0x52>
    1574:	9a 01       	movw	r18, r20
    1576:	f8 01       	movw	r30, r16
    1578:	e2 0f       	add	r30, r18
    157a:	f3 1f       	adc	r31, r19
    157c:	10 82       	st	Z, r1
    157e:	2e 96       	adiw	r28, 0x0e	; 14
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <vfprintf>:
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2c 97       	sbiw	r28, 0x0c	; 12
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	7c 01       	movw	r14, r24
    15ca:	6b 01       	movw	r12, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	fc 01       	movw	r30, r24
    15d0:	17 82       	std	Z+7, r1	; 0x07
    15d2:	16 82       	std	Z+6, r1	; 0x06
    15d4:	83 81       	ldd	r24, Z+3	; 0x03
    15d6:	81 ff       	sbrs	r24, 1
    15d8:	b0 c1       	rjmp	.+864    	; 0x193a <vfprintf+0x3a6>
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	4c 01       	movw	r8, r24
    15e0:	f7 01       	movw	r30, r14
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	f6 01       	movw	r30, r12
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x62>
    15f4:	9e c1       	rjmp	.+828    	; 0x1932 <vfprintf+0x39e>
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x74>
    15fa:	93 fd       	sbrc	r25, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	93 ff       	sbrs	r25, 3
    1600:	81 91       	ld	r24, Z+
    1602:	6f 01       	movw	r12, r30
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	21 f4       	brne	.+8      	; 0x1610 <vfprintf+0x7c>
    1608:	b7 01       	movw	r22, r14
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	c7 d1       	rcall	.+910    	; 0x199c <fputc>
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <vfprintf+0x4c>
    1610:	51 2c       	mov	r5, r1
    1612:	31 2c       	mov	r3, r1
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	20 32       	cpi	r18, 0x20	; 32
    1618:	a0 f4       	brcc	.+40     	; 0x1642 <vfprintf+0xae>
    161a:	8b 32       	cpi	r24, 0x2B	; 43
    161c:	69 f0       	breq	.+26     	; 0x1638 <vfprintf+0xa4>
    161e:	30 f4       	brcc	.+12     	; 0x162c <vfprintf+0x98>
    1620:	80 32       	cpi	r24, 0x20	; 32
    1622:	59 f0       	breq	.+22     	; 0x163a <vfprintf+0xa6>
    1624:	83 32       	cpi	r24, 0x23	; 35
    1626:	69 f4       	brne	.+26     	; 0x1642 <vfprintf+0xae>
    1628:	20 61       	ori	r18, 0x10	; 16
    162a:	2c c0       	rjmp	.+88     	; 0x1684 <vfprintf+0xf0>
    162c:	8d 32       	cpi	r24, 0x2D	; 45
    162e:	39 f0       	breq	.+14     	; 0x163e <vfprintf+0xaa>
    1630:	80 33       	cpi	r24, 0x30	; 48
    1632:	39 f4       	brne	.+14     	; 0x1642 <vfprintf+0xae>
    1634:	21 60       	ori	r18, 0x01	; 1
    1636:	26 c0       	rjmp	.+76     	; 0x1684 <vfprintf+0xf0>
    1638:	22 60       	ori	r18, 0x02	; 2
    163a:	24 60       	ori	r18, 0x04	; 4
    163c:	23 c0       	rjmp	.+70     	; 0x1684 <vfprintf+0xf0>
    163e:	28 60       	ori	r18, 0x08	; 8
    1640:	21 c0       	rjmp	.+66     	; 0x1684 <vfprintf+0xf0>
    1642:	27 fd       	sbrc	r18, 7
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <vfprintf+0x100>
    1646:	30 ed       	ldi	r19, 0xD0	; 208
    1648:	38 0f       	add	r19, r24
    164a:	3a 30       	cpi	r19, 0x0A	; 10
    164c:	78 f4       	brcc	.+30     	; 0x166c <vfprintf+0xd8>
    164e:	26 ff       	sbrs	r18, 6
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0xca>
    1652:	fa e0       	ldi	r31, 0x0A	; 10
    1654:	5f 9e       	mul	r5, r31
    1656:	30 0d       	add	r19, r0
    1658:	11 24       	eor	r1, r1
    165a:	53 2e       	mov	r5, r19
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <vfprintf+0xf0>
    165e:	8a e0       	ldi	r24, 0x0A	; 10
    1660:	38 9e       	mul	r3, r24
    1662:	30 0d       	add	r19, r0
    1664:	11 24       	eor	r1, r1
    1666:	33 2e       	mov	r3, r19
    1668:	20 62       	ori	r18, 0x20	; 32
    166a:	0c c0       	rjmp	.+24     	; 0x1684 <vfprintf+0xf0>
    166c:	8e 32       	cpi	r24, 0x2E	; 46
    166e:	21 f4       	brne	.+8      	; 0x1678 <vfprintf+0xe4>
    1670:	26 fd       	sbrc	r18, 6
    1672:	5f c1       	rjmp	.+702    	; 0x1932 <vfprintf+0x39e>
    1674:	20 64       	ori	r18, 0x40	; 64
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <vfprintf+0xf0>
    1678:	8c 36       	cpi	r24, 0x6C	; 108
    167a:	11 f4       	brne	.+4      	; 0x1680 <vfprintf+0xec>
    167c:	20 68       	ori	r18, 0x80	; 128
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0xf0>
    1680:	88 36       	cpi	r24, 0x68	; 104
    1682:	41 f4       	brne	.+16     	; 0x1694 <vfprintf+0x100>
    1684:	f6 01       	movw	r30, r12
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	6f 01       	movw	r12, r30
    1690:	81 11       	cpse	r24, r1
    1692:	c1 cf       	rjmp	.-126    	; 0x1616 <vfprintf+0x82>
    1694:	98 2f       	mov	r25, r24
    1696:	9f 7d       	andi	r25, 0xDF	; 223
    1698:	95 54       	subi	r25, 0x45	; 69
    169a:	93 30       	cpi	r25, 0x03	; 3
    169c:	28 f4       	brcc	.+10     	; 0x16a8 <vfprintf+0x114>
    169e:	0c 5f       	subi	r16, 0xFC	; 252
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	ff e3       	ldi	r31, 0x3F	; 63
    16a4:	f9 83       	std	Y+1, r31	; 0x01
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <vfprintf+0x12e>
    16a8:	83 36       	cpi	r24, 0x63	; 99
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <vfprintf+0x124>
    16ac:	83 37       	cpi	r24, 0x73	; 115
    16ae:	71 f0       	breq	.+28     	; 0x16cc <vfprintf+0x138>
    16b0:	83 35       	cpi	r24, 0x53	; 83
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <vfprintf+0x122>
    16b4:	57 c0       	rjmp	.+174    	; 0x1764 <vfprintf+0x1d0>
    16b6:	21 c0       	rjmp	.+66     	; 0x16fa <vfprintf+0x166>
    16b8:	f8 01       	movw	r30, r16
    16ba:	80 81       	ld	r24, Z
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	0e 5f       	subi	r16, 0xFE	; 254
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	44 24       	eor	r4, r4
    16c4:	43 94       	inc	r4
    16c6:	51 2c       	mov	r5, r1
    16c8:	54 01       	movw	r10, r8
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <vfprintf+0x160>
    16cc:	38 01       	movw	r6, r16
    16ce:	f2 e0       	ldi	r31, 0x02	; 2
    16d0:	6f 0e       	add	r6, r31
    16d2:	71 1c       	adc	r7, r1
    16d4:	f8 01       	movw	r30, r16
    16d6:	a0 80       	ld	r10, Z
    16d8:	b1 80       	ldd	r11, Z+1	; 0x01
    16da:	26 ff       	sbrs	r18, 6
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <vfprintf+0x150>
    16de:	65 2d       	mov	r22, r5
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x154>
    16e4:	6f ef       	ldi	r22, 0xFF	; 255
    16e6:	7f ef       	ldi	r23, 0xFF	; 255
    16e8:	c5 01       	movw	r24, r10
    16ea:	2c 87       	std	Y+12, r18	; 0x0c
    16ec:	4c d1       	rcall	.+664    	; 0x1986 <strnlen>
    16ee:	2c 01       	movw	r4, r24
    16f0:	83 01       	movw	r16, r6
    16f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f4:	2f 77       	andi	r18, 0x7F	; 127
    16f6:	22 2e       	mov	r2, r18
    16f8:	16 c0       	rjmp	.+44     	; 0x1726 <vfprintf+0x192>
    16fa:	38 01       	movw	r6, r16
    16fc:	f2 e0       	ldi	r31, 0x02	; 2
    16fe:	6f 0e       	add	r6, r31
    1700:	71 1c       	adc	r7, r1
    1702:	f8 01       	movw	r30, r16
    1704:	a0 80       	ld	r10, Z
    1706:	b1 80       	ldd	r11, Z+1	; 0x01
    1708:	26 ff       	sbrs	r18, 6
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x17e>
    170c:	65 2d       	mov	r22, r5
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x182>
    1712:	6f ef       	ldi	r22, 0xFF	; 255
    1714:	7f ef       	ldi	r23, 0xFF	; 255
    1716:	c5 01       	movw	r24, r10
    1718:	2c 87       	std	Y+12, r18	; 0x0c
    171a:	2a d1       	rcall	.+596    	; 0x1970 <strnlen_P>
    171c:	2c 01       	movw	r4, r24
    171e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1720:	20 68       	ori	r18, 0x80	; 128
    1722:	22 2e       	mov	r2, r18
    1724:	83 01       	movw	r16, r6
    1726:	23 fc       	sbrc	r2, 3
    1728:	19 c0       	rjmp	.+50     	; 0x175c <vfprintf+0x1c8>
    172a:	83 2d       	mov	r24, r3
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	48 16       	cp	r4, r24
    1730:	59 06       	cpc	r5, r25
    1732:	a0 f4       	brcc	.+40     	; 0x175c <vfprintf+0x1c8>
    1734:	b7 01       	movw	r22, r14
    1736:	80 e2       	ldi	r24, 0x20	; 32
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	30 d1       	rcall	.+608    	; 0x199c <fputc>
    173c:	3a 94       	dec	r3
    173e:	f5 cf       	rjmp	.-22     	; 0x172a <vfprintf+0x196>
    1740:	f5 01       	movw	r30, r10
    1742:	27 fc       	sbrc	r2, 7
    1744:	85 91       	lpm	r24, Z+
    1746:	27 fe       	sbrs	r2, 7
    1748:	81 91       	ld	r24, Z+
    174a:	5f 01       	movw	r10, r30
    174c:	b7 01       	movw	r22, r14
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	25 d1       	rcall	.+586    	; 0x199c <fputc>
    1752:	31 10       	cpse	r3, r1
    1754:	3a 94       	dec	r3
    1756:	f1 e0       	ldi	r31, 0x01	; 1
    1758:	4f 1a       	sub	r4, r31
    175a:	51 08       	sbc	r5, r1
    175c:	41 14       	cp	r4, r1
    175e:	51 04       	cpc	r5, r1
    1760:	79 f7       	brne	.-34     	; 0x1740 <vfprintf+0x1ac>
    1762:	de c0       	rjmp	.+444    	; 0x1920 <vfprintf+0x38c>
    1764:	84 36       	cpi	r24, 0x64	; 100
    1766:	11 f0       	breq	.+4      	; 0x176c <vfprintf+0x1d8>
    1768:	89 36       	cpi	r24, 0x69	; 105
    176a:	31 f5       	brne	.+76     	; 0x17b8 <vfprintf+0x224>
    176c:	f8 01       	movw	r30, r16
    176e:	27 ff       	sbrs	r18, 7
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <vfprintf+0x1ec>
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	0c 5f       	subi	r16, 0xFC	; 252
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x1fc>
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	88 27       	eor	r24, r24
    1786:	77 fd       	sbrc	r23, 7
    1788:	80 95       	com	r24
    178a:	98 2f       	mov	r25, r24
    178c:	0e 5f       	subi	r16, 0xFE	; 254
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	2f 76       	andi	r18, 0x6F	; 111
    1792:	b2 2e       	mov	r11, r18
    1794:	97 ff       	sbrs	r25, 7
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <vfprintf+0x216>
    1798:	90 95       	com	r25
    179a:	80 95       	com	r24
    179c:	70 95       	com	r23
    179e:	61 95       	neg	r22
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	20 68       	ori	r18, 0x80	; 128
    17a8:	b2 2e       	mov	r11, r18
    17aa:	2a e0       	ldi	r18, 0x0A	; 10
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	a4 01       	movw	r20, r8
    17b0:	27 d1       	rcall	.+590    	; 0x1a00 <__ultoa_invert>
    17b2:	a8 2e       	mov	r10, r24
    17b4:	a8 18       	sub	r10, r8
    17b6:	43 c0       	rjmp	.+134    	; 0x183e <vfprintf+0x2aa>
    17b8:	85 37       	cpi	r24, 0x75	; 117
    17ba:	29 f4       	brne	.+10     	; 0x17c6 <vfprintf+0x232>
    17bc:	2f 7e       	andi	r18, 0xEF	; 239
    17be:	b2 2e       	mov	r11, r18
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	25 c0       	rjmp	.+74     	; 0x1810 <vfprintf+0x27c>
    17c6:	f2 2f       	mov	r31, r18
    17c8:	f9 7f       	andi	r31, 0xF9	; 249
    17ca:	bf 2e       	mov	r11, r31
    17cc:	8f 36       	cpi	r24, 0x6F	; 111
    17ce:	c1 f0       	breq	.+48     	; 0x1800 <vfprintf+0x26c>
    17d0:	18 f4       	brcc	.+6      	; 0x17d8 <vfprintf+0x244>
    17d2:	88 35       	cpi	r24, 0x58	; 88
    17d4:	79 f0       	breq	.+30     	; 0x17f4 <vfprintf+0x260>
    17d6:	ad c0       	rjmp	.+346    	; 0x1932 <vfprintf+0x39e>
    17d8:	80 37       	cpi	r24, 0x70	; 112
    17da:	19 f0       	breq	.+6      	; 0x17e2 <vfprintf+0x24e>
    17dc:	88 37       	cpi	r24, 0x78	; 120
    17de:	21 f0       	breq	.+8      	; 0x17e8 <vfprintf+0x254>
    17e0:	a8 c0       	rjmp	.+336    	; 0x1932 <vfprintf+0x39e>
    17e2:	2f 2f       	mov	r18, r31
    17e4:	20 61       	ori	r18, 0x10	; 16
    17e6:	b2 2e       	mov	r11, r18
    17e8:	b4 fe       	sbrs	r11, 4
    17ea:	0d c0       	rjmp	.+26     	; 0x1806 <vfprintf+0x272>
    17ec:	8b 2d       	mov	r24, r11
    17ee:	84 60       	ori	r24, 0x04	; 4
    17f0:	b8 2e       	mov	r11, r24
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <vfprintf+0x272>
    17f4:	24 ff       	sbrs	r18, 4
    17f6:	0a c0       	rjmp	.+20     	; 0x180c <vfprintf+0x278>
    17f8:	9f 2f       	mov	r25, r31
    17fa:	96 60       	ori	r25, 0x06	; 6
    17fc:	b9 2e       	mov	r11, r25
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <vfprintf+0x278>
    1800:	28 e0       	ldi	r18, 0x08	; 8
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x27c>
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <vfprintf+0x27c>
    180c:	20 e1       	ldi	r18, 0x10	; 16
    180e:	32 e0       	ldi	r19, 0x02	; 2
    1810:	f8 01       	movw	r30, r16
    1812:	b7 fe       	sbrs	r11, 7
    1814:	07 c0       	rjmp	.+14     	; 0x1824 <vfprintf+0x290>
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0c 5f       	subi	r16, 0xFC	; 252
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <vfprintf+0x29c>
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 5f       	subi	r16, 0xFE	; 254
    182e:	1f 4f       	sbci	r17, 0xFF	; 255
    1830:	a4 01       	movw	r20, r8
    1832:	e6 d0       	rcall	.+460    	; 0x1a00 <__ultoa_invert>
    1834:	a8 2e       	mov	r10, r24
    1836:	a8 18       	sub	r10, r8
    1838:	fb 2d       	mov	r31, r11
    183a:	ff 77       	andi	r31, 0x7F	; 127
    183c:	bf 2e       	mov	r11, r31
    183e:	b6 fe       	sbrs	r11, 6
    1840:	0b c0       	rjmp	.+22     	; 0x1858 <vfprintf+0x2c4>
    1842:	2b 2d       	mov	r18, r11
    1844:	2e 7f       	andi	r18, 0xFE	; 254
    1846:	a5 14       	cp	r10, r5
    1848:	50 f4       	brcc	.+20     	; 0x185e <vfprintf+0x2ca>
    184a:	b4 fe       	sbrs	r11, 4
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <vfprintf+0x2ce>
    184e:	b2 fc       	sbrc	r11, 2
    1850:	08 c0       	rjmp	.+16     	; 0x1862 <vfprintf+0x2ce>
    1852:	2b 2d       	mov	r18, r11
    1854:	2e 7e       	andi	r18, 0xEE	; 238
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <vfprintf+0x2ce>
    1858:	7a 2c       	mov	r7, r10
    185a:	2b 2d       	mov	r18, r11
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <vfprintf+0x2d0>
    185e:	7a 2c       	mov	r7, r10
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <vfprintf+0x2d0>
    1862:	75 2c       	mov	r7, r5
    1864:	24 ff       	sbrs	r18, 4
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <vfprintf+0x2ee>
    1868:	fe 01       	movw	r30, r28
    186a:	ea 0d       	add	r30, r10
    186c:	f1 1d       	adc	r31, r1
    186e:	80 81       	ld	r24, Z
    1870:	80 33       	cpi	r24, 0x30	; 48
    1872:	11 f4       	brne	.+4      	; 0x1878 <vfprintf+0x2e4>
    1874:	29 7e       	andi	r18, 0xE9	; 233
    1876:	09 c0       	rjmp	.+18     	; 0x188a <vfprintf+0x2f6>
    1878:	22 ff       	sbrs	r18, 2
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <vfprintf+0x2f4>
    187c:	73 94       	inc	r7
    187e:	73 94       	inc	r7
    1880:	04 c0       	rjmp	.+8      	; 0x188a <vfprintf+0x2f6>
    1882:	82 2f       	mov	r24, r18
    1884:	86 78       	andi	r24, 0x86	; 134
    1886:	09 f0       	breq	.+2      	; 0x188a <vfprintf+0x2f6>
    1888:	73 94       	inc	r7
    188a:	23 fd       	sbrc	r18, 3
    188c:	12 c0       	rjmp	.+36     	; 0x18b2 <vfprintf+0x31e>
    188e:	20 ff       	sbrs	r18, 0
    1890:	06 c0       	rjmp	.+12     	; 0x189e <vfprintf+0x30a>
    1892:	5a 2c       	mov	r5, r10
    1894:	73 14       	cp	r7, r3
    1896:	18 f4       	brcc	.+6      	; 0x189e <vfprintf+0x30a>
    1898:	53 0c       	add	r5, r3
    189a:	57 18       	sub	r5, r7
    189c:	73 2c       	mov	r7, r3
    189e:	73 14       	cp	r7, r3
    18a0:	60 f4       	brcc	.+24     	; 0x18ba <vfprintf+0x326>
    18a2:	b7 01       	movw	r22, r14
    18a4:	80 e2       	ldi	r24, 0x20	; 32
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	2c 87       	std	Y+12, r18	; 0x0c
    18aa:	78 d0       	rcall	.+240    	; 0x199c <fputc>
    18ac:	73 94       	inc	r7
    18ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b0:	f6 cf       	rjmp	.-20     	; 0x189e <vfprintf+0x30a>
    18b2:	73 14       	cp	r7, r3
    18b4:	10 f4       	brcc	.+4      	; 0x18ba <vfprintf+0x326>
    18b6:	37 18       	sub	r3, r7
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x328>
    18ba:	31 2c       	mov	r3, r1
    18bc:	24 ff       	sbrs	r18, 4
    18be:	11 c0       	rjmp	.+34     	; 0x18e2 <vfprintf+0x34e>
    18c0:	b7 01       	movw	r22, r14
    18c2:	80 e3       	ldi	r24, 0x30	; 48
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	2c 87       	std	Y+12, r18	; 0x0c
    18c8:	69 d0       	rcall	.+210    	; 0x199c <fputc>
    18ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    18cc:	22 ff       	sbrs	r18, 2
    18ce:	16 c0       	rjmp	.+44     	; 0x18fc <vfprintf+0x368>
    18d0:	21 ff       	sbrs	r18, 1
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x346>
    18d4:	88 e5       	ldi	r24, 0x58	; 88
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x34a>
    18da:	88 e7       	ldi	r24, 0x78	; 120
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	b7 01       	movw	r22, r14
    18e0:	0c c0       	rjmp	.+24     	; 0x18fa <vfprintf+0x366>
    18e2:	82 2f       	mov	r24, r18
    18e4:	86 78       	andi	r24, 0x86	; 134
    18e6:	51 f0       	breq	.+20     	; 0x18fc <vfprintf+0x368>
    18e8:	21 fd       	sbrc	r18, 1
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <vfprintf+0x35c>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <vfprintf+0x35e>
    18f0:	8b e2       	ldi	r24, 0x2B	; 43
    18f2:	27 fd       	sbrc	r18, 7
    18f4:	8d e2       	ldi	r24, 0x2D	; 45
    18f6:	b7 01       	movw	r22, r14
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	50 d0       	rcall	.+160    	; 0x199c <fputc>
    18fc:	a5 14       	cp	r10, r5
    18fe:	30 f4       	brcc	.+12     	; 0x190c <vfprintf+0x378>
    1900:	b7 01       	movw	r22, r14
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	4a d0       	rcall	.+148    	; 0x199c <fputc>
    1908:	5a 94       	dec	r5
    190a:	f8 cf       	rjmp	.-16     	; 0x18fc <vfprintf+0x368>
    190c:	aa 94       	dec	r10
    190e:	f4 01       	movw	r30, r8
    1910:	ea 0d       	add	r30, r10
    1912:	f1 1d       	adc	r31, r1
    1914:	80 81       	ld	r24, Z
    1916:	b7 01       	movw	r22, r14
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	40 d0       	rcall	.+128    	; 0x199c <fputc>
    191c:	a1 10       	cpse	r10, r1
    191e:	f6 cf       	rjmp	.-20     	; 0x190c <vfprintf+0x378>
    1920:	33 20       	and	r3, r3
    1922:	09 f4       	brne	.+2      	; 0x1926 <vfprintf+0x392>
    1924:	5d ce       	rjmp	.-838    	; 0x15e0 <vfprintf+0x4c>
    1926:	b7 01       	movw	r22, r14
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	37 d0       	rcall	.+110    	; 0x199c <fputc>
    192e:	3a 94       	dec	r3
    1930:	f7 cf       	rjmp	.-18     	; 0x1920 <vfprintf+0x38c>
    1932:	f7 01       	movw	r30, r14
    1934:	86 81       	ldd	r24, Z+6	; 0x06
    1936:	97 81       	ldd	r25, Z+7	; 0x07
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x3aa>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f ef       	ldi	r25, 0xFF	; 255
    193e:	2c 96       	adiw	r28, 0x0c	; 12
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	4f 90       	pop	r4
    196a:	3f 90       	pop	r3
    196c:	2f 90       	pop	r2
    196e:	08 95       	ret

00001970 <strnlen_P>:
    1970:	fc 01       	movw	r30, r24
    1972:	05 90       	lpm	r0, Z+
    1974:	61 50       	subi	r22, 0x01	; 1
    1976:	70 40       	sbci	r23, 0x00	; 0
    1978:	01 10       	cpse	r0, r1
    197a:	d8 f7       	brcc	.-10     	; 0x1972 <strnlen_P+0x2>
    197c:	80 95       	com	r24
    197e:	90 95       	com	r25
    1980:	8e 0f       	add	r24, r30
    1982:	9f 1f       	adc	r25, r31
    1984:	08 95       	ret

00001986 <strnlen>:
    1986:	fc 01       	movw	r30, r24
    1988:	61 50       	subi	r22, 0x01	; 1
    198a:	70 40       	sbci	r23, 0x00	; 0
    198c:	01 90       	ld	r0, Z+
    198e:	01 10       	cpse	r0, r1
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <strnlen+0x2>
    1992:	80 95       	com	r24
    1994:	90 95       	com	r25
    1996:	8e 0f       	add	r24, r30
    1998:	9f 1f       	adc	r25, r31
    199a:	08 95       	ret

0000199c <fputc>:
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	18 2f       	mov	r17, r24
    19a6:	09 2f       	mov	r16, r25
    19a8:	eb 01       	movw	r28, r22
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 fd       	sbrc	r24, 1
    19ae:	03 c0       	rjmp	.+6      	; 0x19b6 <fputc+0x1a>
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	20 c0       	rjmp	.+64     	; 0x19f6 <fputc+0x5a>
    19b6:	82 ff       	sbrs	r24, 2
    19b8:	10 c0       	rjmp	.+32     	; 0x19da <fputc+0x3e>
    19ba:	4e 81       	ldd	r20, Y+6	; 0x06
    19bc:	5f 81       	ldd	r21, Y+7	; 0x07
    19be:	2c 81       	ldd	r18, Y+4	; 0x04
    19c0:	3d 81       	ldd	r19, Y+5	; 0x05
    19c2:	42 17       	cp	r20, r18
    19c4:	53 07       	cpc	r21, r19
    19c6:	7c f4       	brge	.+30     	; 0x19e6 <fputc+0x4a>
    19c8:	e8 81       	ld	r30, Y
    19ca:	f9 81       	ldd	r31, Y+1	; 0x01
    19cc:	9f 01       	movw	r18, r30
    19ce:	2f 5f       	subi	r18, 0xFF	; 255
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	39 83       	std	Y+1, r19	; 0x01
    19d4:	28 83       	st	Y, r18
    19d6:	10 83       	st	Z, r17
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <fputc+0x4a>
    19da:	e8 85       	ldd	r30, Y+8	; 0x08
    19dc:	f9 85       	ldd	r31, Y+9	; 0x09
    19de:	81 2f       	mov	r24, r17
    19e0:	09 95       	icall
    19e2:	89 2b       	or	r24, r25
    19e4:	29 f7       	brne	.-54     	; 0x19b0 <fputc+0x14>
    19e6:	2e 81       	ldd	r18, Y+6	; 0x06
    19e8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ea:	2f 5f       	subi	r18, 0xFF	; 255
    19ec:	3f 4f       	sbci	r19, 0xFF	; 255
    19ee:	3f 83       	std	Y+7, r19	; 0x07
    19f0:	2e 83       	std	Y+6, r18	; 0x06
    19f2:	81 2f       	mov	r24, r17
    19f4:	90 2f       	mov	r25, r16
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <__ultoa_invert>:
    1a00:	fa 01       	movw	r30, r20
    1a02:	aa 27       	eor	r26, r26
    1a04:	28 30       	cpi	r18, 0x08	; 8
    1a06:	51 f1       	breq	.+84     	; 0x1a5c <__ultoa_invert+0x5c>
    1a08:	20 31       	cpi	r18, 0x10	; 16
    1a0a:	81 f1       	breq	.+96     	; 0x1a6c <__ultoa_invert+0x6c>
    1a0c:	e8 94       	clt
    1a0e:	6f 93       	push	r22
    1a10:	6e 7f       	andi	r22, 0xFE	; 254
    1a12:	6e 5f       	subi	r22, 0xFE	; 254
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	af 4f       	sbci	r26, 0xFF	; 255
    1a1c:	b1 e0       	ldi	r27, 0x01	; 1
    1a1e:	3e d0       	rcall	.+124    	; 0x1a9c <__ultoa_invert+0x9c>
    1a20:	b4 e0       	ldi	r27, 0x04	; 4
    1a22:	3c d0       	rcall	.+120    	; 0x1a9c <__ultoa_invert+0x9c>
    1a24:	67 0f       	add	r22, r23
    1a26:	78 1f       	adc	r23, r24
    1a28:	89 1f       	adc	r24, r25
    1a2a:	9a 1f       	adc	r25, r26
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	68 0f       	add	r22, r24
    1a30:	79 1f       	adc	r23, r25
    1a32:	8a 1f       	adc	r24, r26
    1a34:	91 1d       	adc	r25, r1
    1a36:	a1 1d       	adc	r26, r1
    1a38:	6a 0f       	add	r22, r26
    1a3a:	71 1d       	adc	r23, r1
    1a3c:	81 1d       	adc	r24, r1
    1a3e:	91 1d       	adc	r25, r1
    1a40:	a1 1d       	adc	r26, r1
    1a42:	20 d0       	rcall	.+64     	; 0x1a84 <__ultoa_invert+0x84>
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <__ultoa_invert+0x48>
    1a46:	68 94       	set
    1a48:	3f 91       	pop	r19
    1a4a:	2a e0       	ldi	r18, 0x0A	; 10
    1a4c:	26 9f       	mul	r18, r22
    1a4e:	11 24       	eor	r1, r1
    1a50:	30 19       	sub	r19, r0
    1a52:	30 5d       	subi	r19, 0xD0	; 208
    1a54:	31 93       	st	Z+, r19
    1a56:	de f6       	brtc	.-74     	; 0x1a0e <__ultoa_invert+0xe>
    1a58:	cf 01       	movw	r24, r30
    1a5a:	08 95       	ret
    1a5c:	46 2f       	mov	r20, r22
    1a5e:	47 70       	andi	r20, 0x07	; 7
    1a60:	40 5d       	subi	r20, 0xD0	; 208
    1a62:	41 93       	st	Z+, r20
    1a64:	b3 e0       	ldi	r27, 0x03	; 3
    1a66:	0f d0       	rcall	.+30     	; 0x1a86 <__ultoa_invert+0x86>
    1a68:	c9 f7       	brne	.-14     	; 0x1a5c <__ultoa_invert+0x5c>
    1a6a:	f6 cf       	rjmp	.-20     	; 0x1a58 <__ultoa_invert+0x58>
    1a6c:	46 2f       	mov	r20, r22
    1a6e:	4f 70       	andi	r20, 0x0F	; 15
    1a70:	40 5d       	subi	r20, 0xD0	; 208
    1a72:	4a 33       	cpi	r20, 0x3A	; 58
    1a74:	18 f0       	brcs	.+6      	; 0x1a7c <__ultoa_invert+0x7c>
    1a76:	49 5d       	subi	r20, 0xD9	; 217
    1a78:	31 fd       	sbrc	r19, 1
    1a7a:	40 52       	subi	r20, 0x20	; 32
    1a7c:	41 93       	st	Z+, r20
    1a7e:	02 d0       	rcall	.+4      	; 0x1a84 <__ultoa_invert+0x84>
    1a80:	a9 f7       	brne	.-22     	; 0x1a6c <__ultoa_invert+0x6c>
    1a82:	ea cf       	rjmp	.-44     	; 0x1a58 <__ultoa_invert+0x58>
    1a84:	b4 e0       	ldi	r27, 0x04	; 4
    1a86:	a6 95       	lsr	r26
    1a88:	97 95       	ror	r25
    1a8a:	87 95       	ror	r24
    1a8c:	77 95       	ror	r23
    1a8e:	67 95       	ror	r22
    1a90:	ba 95       	dec	r27
    1a92:	c9 f7       	brne	.-14     	; 0x1a86 <__ultoa_invert+0x86>
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	61 05       	cpc	r22, r1
    1a98:	71 05       	cpc	r23, r1
    1a9a:	08 95       	ret
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	0a 2e       	mov	r0, r26
    1aa2:	06 94       	lsr	r0
    1aa4:	57 95       	ror	r21
    1aa6:	47 95       	ror	r20
    1aa8:	37 95       	ror	r19
    1aaa:	27 95       	ror	r18
    1aac:	ba 95       	dec	r27
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__ultoa_invert+0xa2>
    1ab0:	62 0f       	add	r22, r18
    1ab2:	73 1f       	adc	r23, r19
    1ab4:	84 1f       	adc	r24, r20
    1ab6:	95 1f       	adc	r25, r21
    1ab8:	a0 1d       	adc	r26, r0
    1aba:	08 95       	ret

00001abc <_exit>:
    1abc:	f8 94       	cli

00001abe <__stop_program>:
    1abe:	ff cf       	rjmp	.-2      	; 0x1abe <__stop_program>

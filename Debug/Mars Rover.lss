
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  00001cb4  00001d48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  008002ae  008002ae  00001ef6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003152  00000000  00000000  0000224a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dba  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001953  00000000  00000000  00006156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000087c  00000000  00000000  00007aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b81  00000000  00000000  00008328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020f5  00000000  00000000  00008ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000af9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c7       	rjmp	.+3992   	; 0xfbe <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c7       	rjmp	.+3660   	; 0xe7a <__vector_11>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3a       	cpi	r26, 0xAE	; 174
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ae ea       	ldi	r26, 0xAE	; 174
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 31       	cpi	r26, 0x12	; 18
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	84 d4       	rcall	.+2312   	; 0x9cc <main>
      c4:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      ca:	10 92 90 00 	sts	0x0090, r1
      ce:	82 e2       	ldi	r24, 0x22	; 34
      d0:	89 b9       	out	0x09, r24	; 9
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	8b b9       	out	0x0b, r24	; 11
      d6:	8e e0       	ldi	r24, 0x0E	; 14
      d8:	80 93 95 00 	sts	0x0095, r24
      dc:	88 e1       	ldi	r24, 0x18	; 24
      de:	8a b9       	out	0x0a, r24	; 10
      e0:	08 95       	ret

000000e2 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
      e2:	5d 9b       	sbis	0x0b, 5	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
      e6:	8c b9       	out	0x0c, r24	; 12
      e8:	08 95       	ret

000000ea <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	c1 55       	subi	r28, 0x51	; 81
      fc:	d1 09       	sbc	r29, r1
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	de bf       	out	0x3e, r29	; 62
     104:	0f be       	out	0x3f, r0	; 63
     106:	cd bf       	out	0x3d, r28	; 61
     108:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     10a:	41 e5       	ldi	r20, 0x51	; 81
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e2       	ldi	r22, 0x20	; 32
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	ce 01       	movw	r24, r28
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	0e 94 75 0b 	call	0x16ea	; 0x16ea <memset>
	sprintf(buf, "%s", data);
     11a:	b8 01       	movw	r22, r16
     11c:	ce 01       	movw	r24, r28
     11e:	01 96       	adiw	r24, 0x01	; 1
     120:	0e 94 85 0b 	call	0x170a	; 0x170a <strcpy>
     124:	8e 01       	movw	r16, r28
     126:	0f 5f       	subi	r16, 0xFF	; 255
     128:	1f 4f       	sbci	r17, 0xFF	; 255
     12a:	7e 01       	movw	r14, r28
     12c:	82 e5       	ldi	r24, 0x52	; 82
     12e:	e8 0e       	add	r14, r24
     130:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     132:	f8 01       	movw	r30, r16
     134:	81 91       	ld	r24, Z+
     136:	8f 01       	movw	r16, r30
     138:	d4 df       	rcall	.-88     	; 0xe2 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     13a:	0e 15       	cp	r16, r14
     13c:	1f 05       	cpc	r17, r15
     13e:	c9 f7       	brne	.-14     	; 0x132 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     140:	cf 5a       	subi	r28, 0xAF	; 175
     142:	df 4f       	sbci	r29, 0xFF	; 255
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
     14c:	cd bf       	out	0x3d, r28	; 61
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	1f 91       	pop	r17
     154:	0f 91       	pop	r16
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	08 95       	ret

0000015c <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     15c:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     15e:	40 91 06 01 	lds	r20, 0x0106
     162:	50 91 07 01 	lds	r21, 0x0107
     166:	48 17       	cp	r20, r24
     168:	59 07       	cpc	r21, r25
     16a:	54 f0       	brlt	.+20     	; 0x180 <linearRegression+0x24>
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     174:	41 91       	ld	r20, Z+
     176:	51 91       	ld	r21, Z+
     178:	46 17       	cp	r20, r22
     17a:	57 07       	cpc	r21, r23
     17c:	5c f4       	brge	.+22     	; 0x194 <linearRegression+0x38>
     17e:	02 c0       	rjmp	.+4      	; 0x184 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     184:	f9 01       	movw	r30, r18
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	ec 5f       	subi	r30, 0xFC	; 252
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	20 31       	cpi	r18, 0x10	; 16
     19a:	31 05       	cpc	r19, r1
     19c:	59 f7       	brne	.-42     	; 0x174 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1a6:	84 1b       	sub	r24, r20
     1a8:	95 0b       	sbc	r25, r21
     1aa:	64 1b       	sub	r22, r20
     1ac:	75 0b       	sbc	r23, r21
     1ae:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1b2:	c9 01       	movw	r24, r18
     1b4:	88 0f       	add	r24, r24
     1b6:	99 1f       	adc	r25, r25
     1b8:	88 0f       	add	r24, r24
     1ba:	99 1f       	adc	r25, r25
     1bc:	82 0f       	add	r24, r18
     1be:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1c0:	86 0f       	add	r24, r22
     1c2:	97 1f       	adc	r25, r23
     1c4:	08 95       	ret

000001c6 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1c6:	87 b1       	in	r24, 0x07	; 7
     1c8:	82 6c       	ori	r24, 0xC2	; 194
     1ca:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1cc:	86 b1       	in	r24, 0x06	; 6
     1ce:	87 6c       	ori	r24, 0xC7	; 199
     1d0:	86 b9       	out	0x06, r24	; 6
     1d2:	08 95       	ret

000001d4 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1d4:	86 b1       	in	r24, 0x06	; 6
     1d6:	80 6c       	ori	r24, 0xC0	; 192
     1d8:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1da:	36 99       	sbic	0x06, 6	; 6
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <ADC_read+0x6>
	return linearRegression(ADC);
     1de:	84 b1       	in	r24, 0x04	; 4
     1e0:	95 b1       	in	r25, 0x05	; 5
     1e2:	bc cf       	rjmp	.-136    	; 0x15c <linearRegression>
     1e4:	08 95       	ret

000001e6 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     1e6:	de 9a       	sbi	0x1b, 6	; 27
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	d3 d6       	rcall	.+3494   	; 0xf92 <wait_ms>
     1ec:	de 98       	cbi	0x1b, 6	; 27
     1ee:	8b b3       	in	r24, 0x1b	; 27
     1f0:	80 7f       	andi	r24, 0xF0	; 240
     1f2:	8b bb       	out	0x1b, r24	; 27
     1f4:	08 95       	ret

000001f6 <lcd_command>:
     1f6:	cf 93       	push	r28
     1f8:	c8 2f       	mov	r28, r24
     1fa:	dc 98       	cbi	0x1b, 4	; 27
     1fc:	8b b3       	in	r24, 0x1b	; 27
     1fe:	9c 2f       	mov	r25, r28
     200:	92 95       	swap	r25
     202:	9f 70       	andi	r25, 0x0F	; 15
     204:	89 2b       	or	r24, r25
     206:	8b bb       	out	0x1b, r24	; 27
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	ed df       	rcall	.-38     	; 0x1e6 <lcd_toggle_clear>
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	cf 70       	andi	r28, 0x0F	; 15
     210:	c8 2b       	or	r28, r24
     212:	cb bb       	out	0x1b, r28	; 27
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	e7 df       	rcall	.-50     	; 0x1e6 <lcd_toggle_clear>
     218:	dc 9a       	sbi	0x1b, 4	; 27
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <lcd_clear>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	ea df       	rcall	.-44     	; 0x1f6 <lcd_command>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	b5 c6       	rjmp	.+3434   	; 0xf92 <wait_ms>
     228:	08 95       	ret

0000022a <lcd_home_line1>:
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	e4 cf       	rjmp	.-56     	; 0x1f6 <lcd_command>
     22e:	08 95       	ret

00000230 <lcd_init>:
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	8a bb       	out	0x1a, r24	; 26
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	8b bb       	out	0x1b, r24	; 27
     238:	de 9a       	sbi	0x1b, 6	; 27
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	a9 d6       	rcall	.+3410   	; 0xf92 <wait_ms>
     240:	de 98       	cbi	0x1b, 6	; 27
     242:	85 e0       	ldi	r24, 0x05	; 5
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	a5 d6       	rcall	.+3402   	; 0xf92 <wait_ms>
     248:	de 9a       	sbi	0x1b, 6	; 27
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	a1 d6       	rcall	.+3394   	; 0xf92 <wait_ms>
     250:	de 98       	cbi	0x1b, 6	; 27
     252:	de 9a       	sbi	0x1b, 6	; 27
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9c d6       	rcall	.+3384   	; 0xf92 <wait_ms>
     25a:	de 98       	cbi	0x1b, 6	; 27
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	8b bb       	out	0x1b, r24	; 27
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	c1 df       	rcall	.-126    	; 0x1e6 <lcd_toggle_clear>
     264:	8b b3       	in	r24, 0x1b	; 27
     266:	8b bb       	out	0x1b, r24	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	bd df       	rcall	.-134    	; 0x1e6 <lcd_toggle_clear>
     26c:	8b b3       	in	r24, 0x1b	; 27
     26e:	8e 60       	ori	r24, 0x0E	; 14
     270:	8b bb       	out	0x1b, r24	; 27
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	b8 df       	rcall	.-144    	; 0x1e6 <lcd_toggle_clear>
     276:	8b b3       	in	r24, 0x1b	; 27
     278:	8b bb       	out	0x1b, r24	; 27
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	b4 df       	rcall	.-152    	; 0x1e6 <lcd_toggle_clear>
     27e:	8b b3       	in	r24, 0x1b	; 27
     280:	86 60       	ori	r24, 0x06	; 6
     282:	8b bb       	out	0x1b, r24	; 27
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	af df       	rcall	.-162    	; 0x1e6 <lcd_toggle_clear>
     288:	8b b3       	in	r24, 0x1b	; 27
     28a:	8b bb       	out	0x1b, r24	; 27
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	ab df       	rcall	.-170    	; 0x1e6 <lcd_toggle_clear>
     290:	d8 9a       	sbi	0x1b, 0	; 27
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	a8 df       	rcall	.-176    	; 0x1e6 <lcd_toggle_clear>
     296:	dc 9a       	sbi	0x1b, 4	; 27
     298:	c8 cf       	rjmp	.-112    	; 0x22a <lcd_home_line1>
     29a:	08 95       	ret

0000029c <lcd_home_line2>:
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	ab cf       	rjmp	.-170    	; 0x1f6 <lcd_command>
     2a0:	08 95       	ret

000002a2 <lcd_home_line3>:
     2a2:	84 e9       	ldi	r24, 0x94	; 148
     2a4:	a8 cf       	rjmp	.-176    	; 0x1f6 <lcd_command>
     2a6:	08 95       	ret

000002a8 <lcd_home_line4>:
     2a8:	84 ed       	ldi	r24, 0xD4	; 212
     2aa:	a5 cf       	rjmp	.-182    	; 0x1f6 <lcd_command>
     2ac:	08 95       	ret

000002ae <lcd_putc>:
     2ae:	cf 93       	push	r28
     2b0:	c8 2f       	mov	r28, r24
     2b2:	8b b3       	in	r24, 0x1b	; 27
     2b4:	9c 2f       	mov	r25, r28
     2b6:	92 95       	swap	r25
     2b8:	9f 70       	andi	r25, 0x0F	; 15
     2ba:	89 2b       	or	r24, r25
     2bc:	8b bb       	out	0x1b, r24	; 27
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	92 df       	rcall	.-220    	; 0x1e6 <lcd_toggle_clear>
     2c2:	8b b3       	in	r24, 0x1b	; 27
     2c4:	cf 70       	andi	r28, 0x0F	; 15
     2c6:	c8 2b       	or	r28, r24
     2c8:	cb bb       	out	0x1b, r28	; 27
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	8c df       	rcall	.-232    	; 0x1e6 <lcd_toggle_clear>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	c1 55       	subi	r28, 0x51	; 81
     2e8:	d1 09       	sbc	r29, r1
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	fe 01       	movw	r30, r28
     2f6:	e4 5a       	subi	r30, 0xA4	; 164
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	41 91       	ld	r20, Z+
     2fc:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     2fe:	9f 01       	movw	r18, r30
     300:	61 e5       	ldi	r22, 0x51	; 81
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 8c 0b 	call	0x1718	; 0x1718 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     30c:	be 01       	movw	r22, r28
     30e:	6f 5f       	subi	r22, 0xFF	; 255
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8e ea       	ldi	r24, 0xAE	; 174
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f4       	brne	.+2      	; 0x320 <lprintf+0x4e>
     31e:	43 c0       	rjmp	.+134    	; 0x3a6 <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     320:	be 01       	movw	r22, r28
     322:	6f 5f       	subi	r22, 0xFF	; 255
     324:	7f 4f       	sbci	r23, 0xFF	; 255
     326:	8e ea       	ldi	r24, 0xAE	; 174
     328:	92 e0       	ldi	r25, 0x02	; 2
     32a:	0e 94 85 0b 	call	0x170a	; 0x170a <strcpy>
	lcd_clear();
     32e:	77 df       	rcall	.-274    	; 0x21e <lcd_clear>
     330:	9e 01       	movw	r18, r28
     332:	2f 5f       	subi	r18, 0xFF	; 255
     334:	3f 4f       	sbci	r19, 0xFF	; 255
     336:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     33c:	0f 2e       	mov	r0, r31
     33e:	f4 e1       	ldi	r31, 0x14	; 20
     340:	ef 2e       	mov	r14, r31
     342:	f1 2c       	mov	r15, r1
     344:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     346:	27 c0       	rjmp	.+78     	; 0x396 <lprintf+0xc4>
		if (*str == '\n') {
     348:	8a 30       	cpi	r24, 0x0A	; 10
     34a:	51 f4       	brne	.+20     	; 0x360 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     34c:	c8 01       	movw	r24, r16
     34e:	b7 01       	movw	r22, r14
     350:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     354:	f7 01       	movw	r30, r14
     356:	e8 1b       	sub	r30, r24
     358:	f9 0b       	sbc	r31, r25
     35a:	0e 0f       	add	r16, r30
     35c:	1f 1f       	adc	r17, r31
     35e:	03 c0       	rjmp	.+6      	; 0x366 <lprintf+0x94>
		} else {
			lcd_putc(*str);
     360:	a6 df       	rcall	.-180    	; 0x2ae <lcd_putc>
			charnum++;
     362:	0f 5f       	subi	r16, 0xFF	; 255
     364:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     36e:	89 2b       	or	r24, r25
     370:	91 f4       	brne	.+36     	; 0x396 <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     37a:	62 30       	cpi	r22, 0x02	; 2
     37c:	71 05       	cpc	r23, r1
     37e:	41 f0       	breq	.+16     	; 0x390 <lprintf+0xbe>
     380:	63 30       	cpi	r22, 0x03	; 3
     382:	71 05       	cpc	r23, r1
     384:	39 f0       	breq	.+14     	; 0x394 <lprintf+0xc2>
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	71 05       	cpc	r23, r1
     38a:	29 f4       	brne	.+10     	; 0x396 <lprintf+0xc4>
			case 1:
				lcd_home_line2();
     38c:	87 df       	rcall	.-242    	; 0x29c <lcd_home_line2>
				break;
     38e:	03 c0       	rjmp	.+6      	; 0x396 <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     390:	88 df       	rcall	.-240    	; 0x2a2 <lcd_home_line3>
				break;
     392:	01 c0       	rjmp	.+2      	; 0x396 <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     394:	89 df       	rcall	.-238    	; 0x2a8 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     396:	f6 01       	movw	r30, r12
     398:	81 91       	ld	r24, Z+
     39a:	6f 01       	movw	r12, r30
     39c:	88 23       	and	r24, r24
     39e:	19 f0       	breq	.+6      	; 0x3a6 <lprintf+0xd4>
     3a0:	00 35       	cpi	r16, 0x50	; 80
     3a2:	11 05       	cpc	r17, r1
     3a4:	8c f2       	brlt	.-94     	; 0x348 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3a6:	cf 5a       	subi	r28, 0xAF	; 175
     3a8:	df 4f       	sbci	r29, 0xFF	; 255
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	f8 94       	cli
     3ae:	de bf       	out	0x3e, r29	; 62
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	cd bf       	out	0x3d, r28	; 61
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	08 95       	ret

000003c6 <init>:
			break;
		case TURN:
			turn(quantity, sensor_data);
			break;
		case WIN:
			winProcedure(sensor_data);
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	32 df       	rcall	.-412    	; 0x230 <lcd_init>
     3cc:	7e de       	rcall	.-772    	; 0xca <serial_init>
     3ce:	78 94       	sei
     3d0:	fa de       	rcall	.-524    	; 0x1c6 <ADC_init>
     3d2:	9e d5       	rcall	.+2876   	; 0xf10 <timer1_init>
     3d4:	21 d5       	rcall	.+2626   	; 0xe18 <timer3_init>
     3d6:	b7 d3       	rcall	.+1902   	; 0xb46 <oi_alloc>
     3d8:	ec 01       	movw	r28, r24
     3da:	f2 d4       	rcall	.+2532   	; 0xdc0 <oi_init>
     3dc:	85 e9       	ldi	r24, 0x95	; 149
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	84 de       	rcall	.-760    	; 0xea <serial_puts>
     3e2:	ce 01       	movw	r24, r28
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <determineBoundryType>:
     3ea:	9c 01       	movw	r18, r24
     3ec:	cb 01       	movw	r24, r22
     3ee:	88 0f       	add	r24, r24
     3f0:	99 1f       	adc	r25, r25
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	84 f0       	brlt	.+32     	; 0x418 <determineBoundryType+0x2e>
     3f8:	43 e2       	ldi	r20, 0x23	; 35
     3fa:	46 9f       	mul	r20, r22
     3fc:	c0 01       	movw	r24, r0
     3fe:	47 9f       	mul	r20, r23
     400:	90 0d       	add	r25, r0
     402:	11 24       	eor	r1, r1
     404:	6a e0       	ldi	r22, 0x0A	; 10
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divmodhi4>
     40c:	26 17       	cp	r18, r22
     40e:	37 07       	cpc	r19, r23
     410:	34 f4       	brge	.+12     	; 0x41e <determineBoundryType+0x34>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	08 95       	ret
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	08 95       	ret
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	08 95       	ret

00000424 <winProcedure>:
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	c2 56       	subi	r28, 0x62	; 98
     432:	d1 09       	sbc	r29, r1
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	8c 01       	movw	r16, r24
     440:	81 e3       	ldi	r24, 0x31	; 49
     442:	e8 e2       	ldi	r30, 0x28	; 40
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	de 01       	movw	r26, r28
     448:	11 96       	adiw	r26, 0x01	; 1
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	8a 95       	dec	r24
     450:	e1 f7       	brne	.-8      	; 0x44a <winProcedure+0x26>
     452:	81 e3       	ldi	r24, 0x31	; 49
     454:	e9 e5       	ldi	r30, 0x59	; 89
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	de 01       	movw	r26, r28
     45a:	d2 96       	adiw	r26, 0x32	; 50
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <winProcedure+0x38>
     464:	9e 01       	movw	r18, r28
     466:	2e 5c       	subi	r18, 0xCE	; 206
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	ae 01       	movw	r20, r28
     46c:	4f 5f       	subi	r20, 0xFF	; 255
     46e:	5f 4f       	sbci	r21, 0xFF	; 255
     470:	61 e3       	ldi	r22, 0x31	; 49
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a7 d3       	rcall	.+1870   	; 0xbc8 <oi_load_song>
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	d5 d3       	rcall	.+1962   	; 0xc2a <oi_play_song>
     480:	b8 01       	movw	r22, r16
     482:	88 ee       	ldi	r24, 0xE8	; 232
     484:	93 e0       	ldi	r25, 0x03	; 3
     486:	ac d2       	rcall	.+1368   	; 0x9e0 <turn>
     488:	ce 59       	subi	r28, 0x9E	; 158
     48a:	df 4f       	sbci	r29, 0xFF	; 255
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <setBaseLightSensors>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
     4a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4aa:	90 93 06 03 	sts	0x0306, r25
     4ae:	80 93 05 03 	sts	0x0305, r24
     4b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4b6:	90 93 04 03 	sts	0x0304, r25
     4ba:	80 93 03 03 	sts	0x0303, r24
     4be:	88 a1       	ldd	r24, Y+32	; 0x20
     4c0:	99 a1       	ldd	r25, Y+33	; 0x21
     4c2:	90 93 02 03 	sts	0x0302, r25
     4c6:	80 93 01 03 	sts	0x0301, r24
     4ca:	8a a1       	ldd	r24, Y+34	; 0x22
     4cc:	9b a1       	ldd	r25, Y+35	; 0x23
     4ce:	90 93 00 03 	sts	0x0300, r25
     4d2:	80 93 ff 02 	sts	0x02FF, r24
     4d6:	1a c0       	rjmp	.+52     	; 0x50c <setBaseLightSensors+0x6c>
     4d8:	ce 01       	movw	r24, r28
     4da:	b7 d3       	rcall	.+1902   	; 0xc4a <oi_update>
     4dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4de:	9d 8d       	ldd	r25, Y+29	; 0x1d
     4e0:	90 93 06 03 	sts	0x0306, r25
     4e4:	80 93 05 03 	sts	0x0305, r24
     4e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     4ec:	90 93 04 03 	sts	0x0304, r25
     4f0:	80 93 03 03 	sts	0x0303, r24
     4f4:	88 a1       	ldd	r24, Y+32	; 0x20
     4f6:	99 a1       	ldd	r25, Y+33	; 0x21
     4f8:	90 93 02 03 	sts	0x0302, r25
     4fc:	80 93 01 03 	sts	0x0301, r24
     500:	8a a1       	ldd	r24, Y+34	; 0x22
     502:	9b a1       	ldd	r25, Y+35	; 0x23
     504:	90 93 00 03 	sts	0x0300, r25
     508:	80 93 ff 02 	sts	0x02FF, r24
     50c:	80 91 05 03 	lds	r24, 0x0305
     510:	90 91 06 03 	lds	r25, 0x0306
     514:	89 2b       	or	r24, r25
     516:	01 f3       	breq	.-64     	; 0x4d8 <setBaseLightSensors+0x38>
     518:	80 91 03 03 	lds	r24, 0x0303
     51c:	90 91 04 03 	lds	r25, 0x0304
     520:	89 2b       	or	r24, r25
     522:	d1 f2       	breq	.-76     	; 0x4d8 <setBaseLightSensors+0x38>
     524:	80 91 01 03 	lds	r24, 0x0301
     528:	90 91 02 03 	lds	r25, 0x0302
     52c:	89 2b       	or	r24, r25
     52e:	a1 f2       	breq	.-88     	; 0x4d8 <setBaseLightSensors+0x38>
     530:	80 91 ff 02 	lds	r24, 0x02FF
     534:	90 91 00 03 	lds	r25, 0x0300
     538:	89 2b       	or	r24, r25
     53a:	71 f2       	breq	.-100    	; 0x4d8 <setBaseLightSensors+0x38>
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <print>:
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	d8 2f       	mov	r29, r24
     548:	c9 2f       	mov	r28, r25
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	c1 de       	rcall	.-638    	; 0x2d2 <lprintf>
     550:	8d 2f       	mov	r24, r29
     552:	9c 2f       	mov	r25, r28
     554:	ca dd       	rcall	.-1132   	; 0xea <serial_puts>
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <rapidForwardScan>:
     560:	4f 92       	push	r4
     562:	5f 92       	push	r5
     564:	6f 92       	push	r6
     566:	7f 92       	push	r7
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	00 d0       	rcall	.+0      	; 0x582 <rapidForwardScan+0x22>
     582:	00 d0       	rcall	.+0      	; 0x584 <rapidForwardScan+0x24>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	0f 2e       	mov	r0, r31
     58a:	41 2c       	mov	r4, r1
     58c:	51 2c       	mov	r5, r1
     58e:	f8 ec       	ldi	r31, 0xC8	; 200
     590:	6f 2e       	mov	r6, r31
     592:	f2 e4       	ldi	r31, 0x42	; 66
     594:	7f 2e       	mov	r7, r31
     596:	f0 2d       	mov	r31, r0
     598:	53 01       	movw	r10, r6
     59a:	42 01       	movw	r8, r4
     59c:	0f 2e       	mov	r0, r31
     59e:	c1 2c       	mov	r12, r1
     5a0:	d1 2c       	mov	r13, r1
     5a2:	fc e0       	ldi	r31, 0x0C	; 12
     5a4:	ef 2e       	mov	r14, r31
     5a6:	f2 e4       	ldi	r31, 0x42	; 66
     5a8:	ff 2e       	mov	r15, r31
     5aa:	f0 2d       	mov	r31, r0
     5ac:	c7 01       	movw	r24, r14
     5ae:	b6 01       	movw	r22, r12
     5b0:	f3 d5       	rcall	.+3046   	; 0x1198 <__fixunssfsi>
     5b2:	cb 01       	movw	r24, r22
     5b4:	47 d4       	rcall	.+2190   	; 0xe44 <move_servo>
     5b6:	c6 d4       	rcall	.+2444   	; 0xf44 <ping_read>
     5b8:	69 83       	std	Y+1, r22	; 0x01
     5ba:	7a 83       	std	Y+2, r23	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	23 ec       	ldi	r18, 0xC3	; 195
     5c2:	35 ef       	ldi	r19, 0xF5	; 245
     5c4:	48 e2       	ldi	r20, 0x28	; 40
     5c6:	5f e3       	ldi	r21, 0x3F	; 63
     5c8:	c5 01       	movw	r24, r10
     5ca:	b4 01       	movw	r22, r8
     5cc:	c3 d6       	rcall	.+3462   	; 0x1354 <__mulsf3>
     5ce:	4b 01       	movw	r8, r22
     5d0:	5c 01       	movw	r10, r24
     5d2:	23 ec       	ldi	r18, 0xC3	; 195
     5d4:	35 ef       	ldi	r19, 0xF5	; 245
     5d6:	48 ea       	ldi	r20, 0xA8	; 168
     5d8:	5e e3       	ldi	r21, 0x3E	; 62
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7a 81       	ldd	r23, Y+2	; 0x02
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	b8 d6       	rcall	.+3440   	; 0x1354 <__mulsf3>
     5e4:	a5 01       	movw	r20, r10
     5e6:	94 01       	movw	r18, r8
     5e8:	02 d5       	rcall	.+2564   	; 0xfee <__addsf3>
     5ea:	4b 01       	movw	r8, r22
     5ec:	5c 01       	movw	r10, r24
     5ee:	f2 dd       	rcall	.-1052   	; 0x1d4 <ADC_read>
     5f0:	b5 dd       	rcall	.-1174   	; 0x15c <linearRegression>
     5f2:	8c 01       	movw	r16, r24
     5f4:	23 ec       	ldi	r18, 0xC3	; 195
     5f6:	35 ef       	ldi	r19, 0xF5	; 245
     5f8:	48 e2       	ldi	r20, 0x28	; 40
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	c3 01       	movw	r24, r6
     5fe:	b2 01       	movw	r22, r4
     600:	a9 d6       	rcall	.+3410   	; 0x1354 <__mulsf3>
     602:	2b 01       	movw	r4, r22
     604:	3c 01       	movw	r6, r24
     606:	b8 01       	movw	r22, r16
     608:	88 27       	eor	r24, r24
     60a:	77 fd       	sbrc	r23, 7
     60c:	80 95       	com	r24
     60e:	98 2f       	mov	r25, r24
     610:	f1 d5       	rcall	.+3042   	; 0x11f4 <__floatsisf>
     612:	23 ec       	ldi	r18, 0xC3	; 195
     614:	35 ef       	ldi	r19, 0xF5	; 245
     616:	48 ea       	ldi	r20, 0xA8	; 168
     618:	5e e3       	ldi	r21, 0x3E	; 62
     61a:	9c d6       	rcall	.+3384   	; 0x1354 <__mulsf3>
     61c:	a3 01       	movw	r20, r6
     61e:	92 01       	movw	r18, r4
     620:	e6 d4       	rcall	.+2508   	; 0xfee <__addsf3>
     622:	2b 01       	movw	r4, r22
     624:	3c 01       	movw	r6, r24
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	48 ec       	ldi	r20, 0xC8	; 200
     62c:	51 e4       	ldi	r21, 0x41	; 65
     62e:	c5 01       	movw	r24, r10
     630:	b4 01       	movw	r22, r8
     632:	41 d5       	rcall	.+2690   	; 0x10b6 <__cmpsf2>
     634:	88 23       	and	r24, r24
     636:	4c f0       	brlt	.+18     	; 0x64a <rapidForwardScan+0xea>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	48 ec       	ldi	r20, 0xC8	; 200
     63e:	51 e4       	ldi	r21, 0x41	; 65
     640:	c3 01       	movw	r24, r6
     642:	b2 01       	movw	r22, r4
     644:	38 d5       	rcall	.+2672   	; 0x10b6 <__cmpsf2>
     646:	88 23       	and	r24, r24
     648:	44 f4       	brge	.+16     	; 0x65a <rapidForwardScan+0xfa>
     64a:	87 ef       	ldi	r24, 0xF7	; 247
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	79 df       	rcall	.-270    	; 0x542 <print>
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	9c d5       	rcall	.+2872   	; 0x118e <__fixsfsi>
     656:	cb 01       	movw	r24, r22
     658:	13 c0       	rjmp	.+38     	; 0x680 <rapidForwardScan+0x120>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	50 e4       	ldi	r21, 0x40	; 64
     662:	c7 01       	movw	r24, r14
     664:	b6 01       	movw	r22, r12
     666:	c3 d4       	rcall	.+2438   	; 0xfee <__addsf3>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	41 e1       	ldi	r20, 0x11	; 17
     672:	53 e4       	ldi	r21, 0x43	; 67
     674:	20 d5       	rcall	.+2624   	; 0x10b6 <__cmpsf2>
     676:	18 16       	cp	r1, r24
     678:	0c f0       	brlt	.+2      	; 0x67c <rapidForwardScan+0x11c>
     67a:	98 cf       	rjmp	.-208    	; 0x5ac <rapidForwardScan+0x4c>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <detectColoredBoundry>:
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	60 91 05 03 	lds	r22, 0x0305
     6c0:	70 91 06 03 	lds	r23, 0x0306
     6c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6c8:	90 de       	rcall	.-736    	; 0x3ea <determineBoundryType>
     6ca:	8c 01       	movw	r16, r24
     6cc:	60 91 03 03 	lds	r22, 0x0303
     6d0:	70 91 04 03 	lds	r23, 0x0304
     6d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6d8:	88 de       	rcall	.-752    	; 0x3ea <determineBoundryType>
     6da:	6c 01       	movw	r12, r24
     6dc:	60 91 01 03 	lds	r22, 0x0301
     6e0:	70 91 02 03 	lds	r23, 0x0302
     6e4:	88 a1       	ldd	r24, Y+32	; 0x20
     6e6:	99 a1       	ldd	r25, Y+33	; 0x21
     6e8:	80 de       	rcall	.-768    	; 0x3ea <determineBoundryType>
     6ea:	7c 01       	movw	r14, r24
     6ec:	60 91 ff 02 	lds	r22, 0x02FF
     6f0:	70 91 00 03 	lds	r23, 0x0300
     6f4:	8a a1       	ldd	r24, Y+34	; 0x22
     6f6:	9b a1       	ldd	r25, Y+35	; 0x23
     6f8:	78 de       	rcall	.-784    	; 0x3ea <determineBoundryType>
     6fa:	01 30       	cpi	r16, 0x01	; 1
     6fc:	11 05       	cpc	r17, r1
     6fe:	81 f1       	breq	.+96     	; 0x760 <detectColoredBoundry+0xb6>
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	e2 16       	cp	r14, r18
     704:	f1 04       	cpc	r15, r1
     706:	09 f4       	brne	.+2      	; 0x70a <detectColoredBoundry+0x60>
     708:	3d c0       	rjmp	.+122    	; 0x784 <detectColoredBoundry+0xda>
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	c2 16       	cp	r12, r18
     70e:	d1 04       	cpc	r13, r1
     710:	09 f4       	brne	.+2      	; 0x714 <detectColoredBoundry+0x6a>
     712:	41 c0       	rjmp	.+130    	; 0x796 <detectColoredBoundry+0xec>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	91 05       	cpc	r25, r1
     718:	59 f4       	brne	.+22     	; 0x730 <detectColoredBoundry+0x86>
     71a:	46 c0       	rjmp	.+140    	; 0x7a8 <detectColoredBoundry+0xfe>
     71c:	8a e0       	ldi	r24, 0x0A	; 10
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	10 df       	rcall	.-480    	; 0x542 <print>
     722:	be 01       	movw	r22, r28
     724:	84 e6       	ldi	r24, 0x64	; 100
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	5b d1       	rcall	.+694    	; 0x9e0 <turn>
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	4d c0       	rjmp	.+154    	; 0x7ca <detectColoredBoundry+0x120>
     730:	02 30       	cpi	r16, 0x02	; 2
     732:	11 05       	cpc	r17, r1
     734:	51 f0       	breq	.+20     	; 0x74a <detectColoredBoundry+0xa0>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	e2 16       	cp	r14, r18
     73a:	f1 04       	cpc	r15, r1
     73c:	31 f0       	breq	.+12     	; 0x74a <detectColoredBoundry+0xa0>
     73e:	22 e0       	ldi	r18, 0x02	; 2
     740:	c2 16       	cp	r12, r18
     742:	d1 04       	cpc	r13, r1
     744:	11 f0       	breq	.+4      	; 0x74a <detectColoredBoundry+0xa0>
     746:	02 97       	sbiw	r24, 0x02	; 2
     748:	41 f4       	brne	.+16     	; 0x75a <detectColoredBoundry+0xb0>
     74a:	84 e2       	ldi	r24, 0x24	; 36
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	f9 de       	rcall	.-526    	; 0x542 <print>
     750:	ce 01       	movw	r24, r28
     752:	68 de       	rcall	.-816    	; 0x424 <winProcedure>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	38 c0       	rjmp	.+112    	; 0x7ca <detectColoredBoundry+0x120>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	35 c0       	rjmp	.+106    	; 0x7ca <detectColoredBoundry+0x120>
     760:	9e 01       	movw	r18, r28
     762:	42 e3       	ldi	r20, 0x32	; 50
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	6c e9       	ldi	r22, 0x9C	; 156
     768:	7f ef       	ldi	r23, 0xFF	; 255
     76a:	8c e9       	ldi	r24, 0x9C	; 156
     76c:	9f ef       	ldi	r25, 0xFF	; 255
     76e:	a1 d1       	rcall	.+834    	; 0xab2 <move>
     770:	85 e3       	ldi	r24, 0x35	; 53
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	e6 de       	rcall	.-564    	; 0x542 <print>
     776:	be 01       	movw	r22, r28
     778:	8f eb       	ldi	r24, 0xBF	; 191
     77a:	9f ef       	ldi	r25, 0xFF	; 255
     77c:	31 d1       	rcall	.+610    	; 0x9e0 <turn>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	23 c0       	rjmp	.+70     	; 0x7ca <detectColoredBoundry+0x120>
     784:	9e 01       	movw	r18, r28
     786:	42 e3       	ldi	r20, 0x32	; 50
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	6c e9       	ldi	r22, 0x9C	; 156
     78c:	7f ef       	ldi	r23, 0xFF	; 255
     78e:	8c e9       	ldi	r24, 0x9C	; 156
     790:	9f ef       	ldi	r25, 0xFF	; 255
     792:	8f d1       	rcall	.+798    	; 0xab2 <move>
     794:	c3 cf       	rjmp	.-122    	; 0x71c <detectColoredBoundry+0x72>
     796:	9e 01       	movw	r18, r28
     798:	42 e3       	ldi	r20, 0x32	; 50
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	6c e9       	ldi	r22, 0x9C	; 156
     79e:	7f ef       	ldi	r23, 0xFF	; 255
     7a0:	8c e9       	ldi	r24, 0x9C	; 156
     7a2:	9f ef       	ldi	r25, 0xFF	; 255
     7a4:	86 d1       	rcall	.+780    	; 0xab2 <move>
     7a6:	ba cf       	rjmp	.-140    	; 0x71c <detectColoredBoundry+0x72>
     7a8:	9e 01       	movw	r18, r28
     7aa:	42 e3       	ldi	r20, 0x32	; 50
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	6c e9       	ldi	r22, 0x9C	; 156
     7b0:	7f ef       	ldi	r23, 0xFF	; 255
     7b2:	8c e9       	ldi	r24, 0x9C	; 156
     7b4:	9f ef       	ldi	r25, 0xFF	; 255
     7b6:	7d d1       	rcall	.+762    	; 0xab2 <move>
     7b8:	8c e4       	ldi	r24, 0x4C	; 76
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	c2 de       	rcall	.-636    	; 0x542 <print>
     7be:	be 01       	movw	r22, r28
     7c0:	81 e4       	ldi	r24, 0x41	; 65
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0d d1       	rcall	.+538    	; 0x9e0 <turn>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	08 95       	ret

000007dc <detectCrater>:
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	ec 01       	movw	r28, r24
     7ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7ee:	58 a1       	ldd	r21, Y+32	; 0x20
     7f0:	49 a1       	ldd	r20, Y+33	; 0x21
     7f2:	2a a1       	ldd	r18, Y+34	; 0x22
     7f4:	3b a1       	ldd	r19, Y+35	; 0x23
     7f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7fa:	89 2b       	or	r24, r25
     7fc:	21 f1       	breq	.+72     	; 0x846 <detectCrater+0x6a>
     7fe:	e7 2e       	mov	r14, r23
     800:	f6 2e       	mov	r15, r22
     802:	05 2f       	mov	r16, r21
     804:	14 2f       	mov	r17, r20
     806:	23 2b       	or	r18, r19
     808:	81 f1       	breq	.+96     	; 0x86a <detectCrater+0x8e>
     80a:	01 2b       	or	r16, r17
     80c:	09 f4       	brne	.+2      	; 0x810 <detectCrater+0x34>
     80e:	41 c0       	rjmp	.+130    	; 0x892 <detectCrater+0xb6>
     810:	ef 28       	or	r14, r15
     812:	b1 f1       	breq	.+108    	; 0x880 <detectCrater+0xa4>
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	45 c0       	rjmp	.+138    	; 0x8a4 <detectCrater+0xc8>
     81a:	01 2b       	or	r16, r17
     81c:	51 f4       	brne	.+20     	; 0x832 <detectCrater+0x56>
     81e:	84 e6       	ldi	r24, 0x64	; 100
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	8f de       	rcall	.-738    	; 0x542 <print>
     824:	be 01       	movw	r22, r28
     826:	8a e5       	ldi	r24, 0x5A	; 90
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	da d0       	rcall	.+436    	; 0x9e0 <turn>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	39 c0       	rjmp	.+114    	; 0x8a4 <detectCrater+0xc8>
     832:	89 e7       	ldi	r24, 0x79	; 121
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	85 de       	rcall	.-758    	; 0x542 <print>
     838:	be 01       	movw	r22, r28
     83a:	81 e4       	ldi	r24, 0x41	; 65
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	d0 d0       	rcall	.+416    	; 0x9e0 <turn>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	2f c0       	rjmp	.+94     	; 0x8a4 <detectCrater+0xc8>
     846:	9e 01       	movw	r18, r28
     848:	42 e3       	ldi	r20, 0x32	; 50
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	6c e9       	ldi	r22, 0x9C	; 156
     84e:	7f ef       	ldi	r23, 0xFF	; 255
     850:	8c e9       	ldi	r24, 0x9C	; 156
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	2e d1       	rcall	.+604    	; 0xab2 <move>
     856:	8e e8       	ldi	r24, 0x8E	; 142
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	73 de       	rcall	.-794    	; 0x542 <print>
     85c:	be 01       	movw	r22, r28
     85e:	8f eb       	ldi	r24, 0xBF	; 191
     860:	9f ef       	ldi	r25, 0xFF	; 255
     862:	be d0       	rcall	.+380    	; 0x9e0 <turn>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	1d c0       	rjmp	.+58     	; 0x8a4 <detectCrater+0xc8>
     86a:	9e 01       	movw	r18, r28
     86c:	42 e3       	ldi	r20, 0x32	; 50
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	6c e9       	ldi	r22, 0x9C	; 156
     872:	7f ef       	ldi	r23, 0xFF	; 255
     874:	8c e9       	ldi	r24, 0x9C	; 156
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	1c d1       	rcall	.+568    	; 0xab2 <move>
     87a:	ef 28       	or	r14, r15
     87c:	71 f6       	brne	.-100    	; 0x81a <detectCrater+0x3e>
     87e:	cf cf       	rjmp	.-98     	; 0x81e <detectCrater+0x42>
     880:	9e 01       	movw	r18, r28
     882:	42 e3       	ldi	r20, 0x32	; 50
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	6c e9       	ldi	r22, 0x9C	; 156
     888:	7f ef       	ldi	r23, 0xFF	; 255
     88a:	8c e9       	ldi	r24, 0x9C	; 156
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	11 d1       	rcall	.+546    	; 0xab2 <move>
     890:	c6 cf       	rjmp	.-116    	; 0x81e <detectCrater+0x42>
     892:	9e 01       	movw	r18, r28
     894:	42 e3       	ldi	r20, 0x32	; 50
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	6c e9       	ldi	r22, 0x9C	; 156
     89a:	7f ef       	ldi	r23, 0xFF	; 255
     89c:	8c e9       	ldi	r24, 0x9C	; 156
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	08 d1       	rcall	.+528    	; 0xab2 <move>
     8a2:	bd cf       	rjmp	.-134    	; 0x81e <detectCrater+0x42>
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret

000008b2 <moveCautiously>:
     8b2:	6f 92       	push	r6
     8b4:	7f 92       	push	r7
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	4c 01       	movw	r8, r24
     8d0:	5b 01       	movw	r10, r22
     8d2:	18 16       	cp	r1, r24
     8d4:	19 06       	cpc	r1, r25
     8d6:	0c f0       	brlt	.+2      	; 0x8da <moveCautiously+0x28>
     8d8:	6a c0       	rjmp	.+212    	; 0x9ae <moveCautiously+0xfc>
     8da:	ee 24       	eor	r14, r14
     8dc:	ea 94       	dec	r14
     8de:	fe 2c       	mov	r15, r14
     8e0:	0f ef       	ldi	r16, 0xFF	; 255
     8e2:	1f ef       	ldi	r17, 0xFF	; 255
     8e4:	cf ef       	ldi	r28, 0xFF	; 255
     8e6:	df ef       	ldi	r29, 0xFF	; 255
     8e8:	c1 2c       	mov	r12, r1
     8ea:	d1 2c       	mov	r13, r1
     8ec:	61 2c       	mov	r6, r1
     8ee:	71 2c       	mov	r7, r1
     8f0:	c5 36       	cpi	r28, 0x65	; 101
     8f2:	d1 05       	cpc	r29, r1
     8f4:	24 f4       	brge	.+8      	; 0x8fe <moveCautiously+0x4c>
     8f6:	cf 3f       	cpi	r28, 0xFF	; 255
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	d2 07       	cpc	r29, r18
     8fc:	31 f5       	brne	.+76     	; 0x94a <moveCautiously+0x98>
     8fe:	30 de       	rcall	.-928    	; 0x560 <rapidForwardScan>
     900:	00 97       	sbiw	r24, 0x00	; 0
     902:	09 f1       	breq	.+66     	; 0x946 <moveCautiously+0x94>
     904:	8a 35       	cpi	r24, 0x5A	; 90
     906:	91 05       	cpc	r25, r1
     908:	1c f4       	brge	.+6      	; 0x910 <moveCautiously+0x5e>
     90a:	e1 e0       	ldi	r30, 0x01	; 1
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <moveCautiously+0x62>
     910:	ef ef       	ldi	r30, 0xFF	; 255
     912:	ff ef       	ldi	r31, 0xFF	; 255
     914:	4a e5       	ldi	r20, 0x5A	; 90
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	48 1b       	sub	r20, r24
     91a:	59 0b       	sbc	r21, r25
     91c:	9a 01       	movw	r18, r20
     91e:	22 f4       	brpl	.+8      	; 0x928 <moveCautiously+0x76>
     920:	22 27       	eor	r18, r18
     922:	33 27       	eor	r19, r19
     924:	24 1b       	sub	r18, r20
     926:	35 0b       	sbc	r19, r21
     928:	8c e3       	ldi	r24, 0x3C	; 60
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	82 1b       	sub	r24, r18
     92e:	93 0b       	sbc	r25, r19
     930:	b5 01       	movw	r22, r10
     932:	9c 01       	movw	r18, r24
     934:	e2 9f       	mul	r30, r18
     936:	c0 01       	movw	r24, r0
     938:	e3 9f       	mul	r30, r19
     93a:	90 0d       	add	r25, r0
     93c:	f2 9f       	mul	r31, r18
     93e:	90 0d       	add	r25, r0
     940:	11 24       	eor	r1, r1
     942:	4e d0       	rcall	.+156    	; 0x9e0 <turn>
     944:	34 c0       	rjmp	.+104    	; 0x9ae <moveCautiously+0xfc>
     946:	c6 2d       	mov	r28, r6
     948:	d7 2d       	mov	r29, r7
     94a:	0b 30       	cpi	r16, 0x0B	; 11
     94c:	11 05       	cpc	r17, r1
     94e:	24 f4       	brge	.+8      	; 0x958 <moveCautiously+0xa6>
     950:	0f 3f       	cpi	r16, 0xFF	; 255
     952:	2f ef       	ldi	r18, 0xFF	; 255
     954:	12 07       	cpc	r17, r18
     956:	31 f4       	brne	.+12     	; 0x964 <moveCautiously+0xb2>
     958:	c5 01       	movw	r24, r10
     95a:	a7 de       	rcall	.-690    	; 0x6aa <detectColoredBoundry>
     95c:	89 2b       	or	r24, r25
     95e:	39 f5       	brne	.+78     	; 0x9ae <moveCautiously+0xfc>
     960:	06 2d       	mov	r16, r6
     962:	17 2d       	mov	r17, r7
     964:	35 e1       	ldi	r19, 0x15	; 21
     966:	e3 16       	cp	r14, r19
     968:	f1 04       	cpc	r15, r1
     96a:	24 f4       	brge	.+8      	; 0x974 <moveCautiously+0xc2>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	e8 16       	cp	r14, r24
     970:	f8 06       	cpc	r15, r24
     972:	31 f4       	brne	.+12     	; 0x980 <moveCautiously+0xce>
     974:	c5 01       	movw	r24, r10
     976:	32 df       	rcall	.-412    	; 0x7dc <detectCrater>
     978:	89 2b       	or	r24, r25
     97a:	c9 f4       	brne	.+50     	; 0x9ae <moveCautiously+0xfc>
     97c:	e6 2c       	mov	r14, r6
     97e:	f7 2c       	mov	r15, r7
     980:	95 01       	movw	r18, r10
     982:	4a e0       	ldi	r20, 0x0A	; 10
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	68 e7       	ldi	r22, 0x78	; 120
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	88 e7       	ldi	r24, 0x78	; 120
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	91 d0       	rcall	.+290    	; 0xab2 <move>
     990:	89 2b       	or	r24, r25
     992:	69 f4       	brne	.+26     	; 0x9ae <moveCautiously+0xfc>
     994:	2a e0       	ldi	r18, 0x0A	; 10
     996:	c2 0e       	add	r12, r18
     998:	d1 1c       	adc	r13, r1
     99a:	2a 96       	adiw	r28, 0x0a	; 10
     99c:	06 5f       	subi	r16, 0xF6	; 246
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	3a e0       	ldi	r19, 0x0A	; 10
     9a2:	e3 0e       	add	r14, r19
     9a4:	f1 1c       	adc	r15, r1
     9a6:	c8 14       	cp	r12, r8
     9a8:	d9 04       	cpc	r13, r9
     9aa:	0c f4       	brge	.+2      	; 0x9ae <moveCautiously+0xfc>
     9ac:	a1 cf       	rjmp	.-190    	; 0x8f0 <moveCautiously+0x3e>
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	08 95       	ret

000009cc <main>:
// -- Position ourselves to move in the exact center of two posts
// -- Move straight through them. Detection does the rest

int main(void)
{
	oi_t * sensor_data = init();
     9cc:	fc dc       	rcall	.-1544   	; 0x3c6 <init>
     9ce:	ec 01       	movw	r28, r24
	
	setBaseLightSensors(sensor_data);
     9d0:	67 dd       	rcall	.-1330   	; 0x4a0 <setBaseLightSensors>
		executeCommand(command, quantity, sensor_data);
		*/
		
		//detectColoredBoundry(sensor_data);
		
		moveCautiously(450, sensor_data);
     9d2:	be 01       	movw	r22, r28
     9d4:	82 ec       	ldi	r24, 0xC2	; 194
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	6c df       	rcall	.-296    	; 0x8b2 <moveCautiously>
		
		oi_update(sensor_data);
     9da:	ce 01       	movw	r24, r28
     9dc:	36 d1       	rcall	.+620    	; 0xc4a <oi_update>
     9de:	f9 cf       	rjmp	.-14     	; 0x9d2 <main+0x6>

000009e0 <turn>:
	
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
     9ee:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	int magnitude = turnDegrees > 0 ? 1 : -1;
     9f0:	18 16       	cp	r1, r24
     9f2:	19 06       	cpc	r1, r25
     9f4:	1c f4       	brge	.+6      	; 0x9fc <turn+0x1c>
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <turn+0x20>
     9fc:	2f ef       	ldi	r18, 0xFF	; 255
     9fe:	3f ef       	ldi	r19, 0xFF	; 255
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
     a00:	4c e9       	ldi	r20, 0x9C	; 156
     a02:	42 03       	mulsu	r20, r18
     a04:	b0 01       	movw	r22, r0
     a06:	43 9f       	mul	r20, r19
     a08:	70 0d       	add	r23, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	84 e6       	ldi	r24, 0x64	; 100
     a0e:	48 2f       	mov	r20, r24
     a10:	42 9f       	mul	r20, r18
     a12:	c0 01       	movw	r24, r0
     a14:	43 9f       	mul	r20, r19
     a16:	90 0d       	add	r25, r0
     a18:	11 24       	eor	r1, r1
     a1a:	bf d0       	rcall	.+382    	; 0xb9a <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     a1c:	7e 01       	movw	r14, r28
     a1e:	dd 23       	and	r29, r29
     a20:	24 f4       	brge	.+8      	; 0xa2a <turn+0x4a>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	ec 1a       	sub	r14, r28
     a28:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     a2a:	1e 14       	cp	r1, r14
     a2c:	1f 04       	cpc	r1, r15
     a2e:	a4 f4       	brge	.+40     	; 0xa58 <turn+0x78>
	return 0;
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     a34:	88 e2       	ldi	r24, 0x28	; 40
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	ac d2       	rcall	.+1368   	; 0xf92 <wait_ms>
		oi_update(sensor_data);
     a3a:	c8 01       	movw	r24, r16
     a3c:	06 d1       	rcall	.+524    	; 0xc4a <oi_update>
		currentDegrees += abs(sensor_data->angle);
     a3e:	f8 01       	movw	r30, r16
     a40:	26 85       	ldd	r18, Z+14	; 0x0e
     a42:	37 85       	ldd	r19, Z+15	; 0x0f
     a44:	33 23       	and	r19, r19
     a46:	1c f4       	brge	.+6      	; 0xa4e <turn+0x6e>
     a48:	31 95       	neg	r19
     a4a:	21 95       	neg	r18
     a4c:	31 09       	sbc	r19, r1
     a4e:	c2 0f       	add	r28, r18
     a50:	d3 1f       	adc	r29, r19
	
	oi_set_wheels(magnitude * 100, -1 * magnitude * 100);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     a52:	ce 15       	cp	r28, r14
     a54:	df 05       	cpc	r29, r15
     a56:	74 f3       	brlt	.-36     	; 0xa34 <turn+0x54>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	9c d0       	rcall	.+312    	; 0xb9a <oi_set_wheels>
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     a76:	88 81       	ld	r24, Y
     a78:	98 2f       	mov	r25, r24
     a7a:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     a7c:	81 fd       	sbrc	r24, 1
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <detectCollision+0x14>
     a80:	99 23       	and	r25, r25
     a82:	91 f0       	breq	.+36     	; 0xaa8 <detectCollision+0x38>
		print("Collision!");
     a84:	82 ea       	ldi	r24, 0xA2	; 162
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	5c dd       	rcall	.-1352   	; 0x542 <print>
		move(-100, -100, 50, sensor_data);
     a8a:	9e 01       	movw	r18, r28
     a8c:	42 e3       	ldi	r20, 0x32	; 50
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	6c e9       	ldi	r22, 0x9C	; 156
     a92:	7f ef       	ldi	r23, 0xFF	; 255
     a94:	8c e9       	ldi	r24, 0x9C	; 156
     a96:	9f ef       	ldi	r25, 0xFF	; 255
     a98:	0c d0       	rcall	.+24     	; 0xab2 <move>
		turn(60, sensor_data);
     a9a:	be 01       	movw	r22, r28
     a9c:	8c e3       	ldi	r24, 0x3C	; 60
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	9f df       	rcall	.-194    	; 0x9e0 <turn>
		return 1;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <detectCollision+0x3c>
	} else {
		return 0;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <move>:
#include "lcd.h"
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	7c 01       	movw	r14, r24
     ac8:	5b 01       	movw	r10, r22
     aca:	ea 01       	movw	r28, r20
     acc:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
     ace:	08 97       	sbiw	r24, 0x08	; 8
     ad0:	64 d0       	rcall	.+200    	; 0xb9a <oi_set_wheels>
	
	distance = abs(distance);
     ad2:	6e 01       	movw	r12, r28
     ad4:	dd 23       	and	r29, r29
     ad6:	24 f4       	brge	.+8      	; 0xae0 <move+0x2e>
     ad8:	cc 24       	eor	r12, r12
     ada:	dd 24       	eor	r13, r13
     adc:	cc 1a       	sub	r12, r28
     ade:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     ae0:	1c 14       	cp	r1, r12
     ae2:	1d 04       	cpc	r1, r13
     ae4:	dc f4       	brge	.+54     	; 0xb1c <move+0x6a>
#include "util.h"
#include <avr/io.h>

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
int move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     ae6:	c0 e0       	ldi	r28, 0x00	; 0
     ae8:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     aea:	c8 01       	movw	r24, r16
     aec:	ae d0       	rcall	.+348    	; 0xc4a <oi_update>

		if ( right > 0 && left > 0 ) {
     aee:	1e 14       	cp	r1, r14
     af0:	1f 04       	cpc	r1, r15
     af2:	3c f4       	brge	.+14     	; 0xb02 <move+0x50>
     af4:	1a 14       	cp	r1, r10
     af6:	1b 04       	cpc	r1, r11
     af8:	24 f4       	brge	.+8      	; 0xb02 <move+0x50>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     afa:	c8 01       	movw	r24, r16
     afc:	b9 df       	rcall	.-142    	; 0xa70 <detectCollision>
     afe:	89 2b       	or	r24, r25
     b00:	a9 f4       	brne	.+42     	; 0xb2c <move+0x7a>
				return 1;
			}
		}

		sum += abs(sensor_data->distance);
     b02:	f8 01       	movw	r30, r16
     b04:	44 85       	ldd	r20, Z+12	; 0x0c
     b06:	55 85       	ldd	r21, Z+13	; 0x0d
     b08:	55 23       	and	r21, r21
     b0a:	1c f4       	brge	.+6      	; 0xb12 <move+0x60>
     b0c:	51 95       	neg	r21
     b0e:	41 95       	neg	r20
     b10:	51 09       	sbc	r21, r1
     b12:	c4 0f       	add	r28, r20
     b14:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right - 8, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     b16:	cc 15       	cp	r28, r12
     b18:	dd 05       	cpc	r29, r13
     b1a:	3c f3       	brlt	.-50     	; 0xaea <move+0x38>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	3a d0       	rcall	.+116    	; 0xb9a <oi_set_wheels>
	
	return 0;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <move+0x7e>
		oi_update(sensor_data);

		if ( right > 0 && left > 0 ) {
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
				return 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	oi_set_wheels(0,0);
	
	return 0;
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	08 95       	ret

00000b46 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     b46:	64 e3       	ldi	r22, 0x34	; 52
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	8c c4       	rjmp	.+2328   	; 0x1468 <calloc>
     b50:	08 95       	ret

00000b52 <oi_byte_tx>:
     b52:	eb e9       	ldi	r30, 0x9B	; 155
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	90 81       	ld	r25, Z
     b58:	95 ff       	sbrs	r25, 5
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <oi_byte_tx+0x4>
     b5c:	80 93 9c 00 	sts	0x009C, r24
     b60:	08 95       	ret

00000b62 <oi_set_leds>:
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	08 2f       	mov	r16, r24
     b6c:	16 2f       	mov	r17, r22
     b6e:	d4 2f       	mov	r29, r20
     b70:	c2 2f       	mov	r28, r18
     b72:	8b e8       	ldi	r24, 0x8B	; 139
     b74:	ee df       	rcall	.-36     	; 0xb52 <oi_byte_tx>
     b76:	11 23       	and	r17, r17
     b78:	29 f0       	breq	.+10     	; 0xb84 <oi_set_leds+0x22>
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	01 11       	cpse	r16, r1
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <oi_set_leds+0x24>
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <oi_set_leds+0x24>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	e5 df       	rcall	.-54     	; 0xb52 <oi_byte_tx>
     b88:	8d 2f       	mov	r24, r29
     b8a:	e3 df       	rcall	.-58     	; 0xb52 <oi_byte_tx>
     b8c:	8c 2f       	mov	r24, r28
     b8e:	e1 df       	rcall	.-62     	; 0xb52 <oi_byte_tx>
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	08 95       	ret

00000b9a <oi_set_wheels>:
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	18 2f       	mov	r17, r24
     ba4:	09 2f       	mov	r16, r25
     ba6:	c6 2f       	mov	r28, r22
     ba8:	d7 2f       	mov	r29, r23
     baa:	81 e9       	ldi	r24, 0x91	; 145
     bac:	d2 df       	rcall	.-92     	; 0xb52 <oi_byte_tx>
     bae:	80 2f       	mov	r24, r16
     bb0:	d0 df       	rcall	.-96     	; 0xb52 <oi_byte_tx>
     bb2:	81 2f       	mov	r24, r17
     bb4:	ce df       	rcall	.-100    	; 0xb52 <oi_byte_tx>
     bb6:	8d 2f       	mov	r24, r29
     bb8:	cc df       	rcall	.-104    	; 0xb52 <oi_byte_tx>
     bba:	8c 2f       	mov	r24, r28
     bbc:	ca df       	rcall	.-108    	; 0xb52 <oi_byte_tx>
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	08 95       	ret

00000bc8 <oi_load_song>:
     bc8:	af 92       	push	r10
     bca:	bf 92       	push	r11
     bcc:	cf 92       	push	r12
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	c8 2f       	mov	r28, r24
     bde:	7b 01       	movw	r14, r22
     be0:	6a 01       	movw	r12, r20
     be2:	a2 2e       	mov	r10, r18
     be4:	b3 2e       	mov	r11, r19
     be6:	8c e8       	ldi	r24, 0x8C	; 140
     be8:	b4 df       	rcall	.-152    	; 0xb52 <oi_byte_tx>
     bea:	8c 2f       	mov	r24, r28
     bec:	b2 df       	rcall	.-156    	; 0xb52 <oi_byte_tx>
     bee:	8e 2d       	mov	r24, r14
     bf0:	b0 df       	rcall	.-160    	; 0xb52 <oi_byte_tx>
     bf2:	1e 14       	cp	r1, r14
     bf4:	1f 04       	cpc	r1, r15
     bf6:	74 f4       	brge	.+28     	; 0xc14 <oi_load_song+0x4c>
     bf8:	e6 01       	movw	r28, r12
     bfa:	0a 2d       	mov	r16, r10
     bfc:	1b 2d       	mov	r17, r11
     bfe:	ec 0c       	add	r14, r12
     c00:	fd 1c       	adc	r15, r13
     c02:	89 91       	ld	r24, Y+
     c04:	a6 df       	rcall	.-180    	; 0xb52 <oi_byte_tx>
     c06:	f8 01       	movw	r30, r16
     c08:	81 91       	ld	r24, Z+
     c0a:	8f 01       	movw	r16, r30
     c0c:	a2 df       	rcall	.-188    	; 0xb52 <oi_byte_tx>
     c0e:	ce 15       	cp	r28, r14
     c10:	df 05       	cpc	r29, r15
     c12:	b9 f7       	brne	.-18     	; 0xc02 <oi_load_song+0x3a>
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	08 95       	ret

00000c2a <oi_play_song>:
     c2a:	cf 93       	push	r28
     c2c:	c8 2f       	mov	r28, r24
     c2e:	8d e8       	ldi	r24, 0x8D	; 141
     c30:	90 df       	rcall	.-224    	; 0xb52 <oi_byte_tx>
     c32:	8c 2f       	mov	r24, r28
     c34:	8e df       	rcall	.-228    	; 0xb52 <oi_byte_tx>
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     c3a:	eb e9       	ldi	r30, 0x9B	; 155
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	ec f7       	brge	.-6      	; 0xc3e <oi_byte_rx+0x4>

	return UDR1;
     c44:	80 91 9c 00 	lds	r24, 0x009C
     c48:	08 95       	ret

00000c4a <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c58:	80 91 9b 00 	lds	r24, 0x009B
     c5c:	88 23       	and	r24, r24
     c5e:	44 f4       	brge	.+16     	; 0xc70 <oi_update+0x26>
		i = UDR1;
     c60:	ac e9       	ldi	r26, 0x9C	; 156
     c62:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c64:	eb e9       	ldi	r30, 0x9B	; 155
     c66:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     c68:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	e4 f3       	brlt	.-8      	; 0xc68 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     c70:	8e e8       	ldi	r24, 0x8E	; 142
     c72:	6f df       	rcall	.-290    	; 0xb52 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     c74:	86 e0       	ldi	r24, 0x06	; 6
     c76:	6d df       	rcall	.-294    	; 0xb52 <oi_byte_tx>
     c78:	e7 01       	movw	r28, r14
     c7a:	87 01       	movw	r16, r14
     c7c:	0c 5c       	subi	r16, 0xCC	; 204
     c7e:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     c80:	dc df       	rcall	.-72     	; 0xc3a <oi_byte_rx>
     c82:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     c84:	c0 17       	cp	r28, r16
     c86:	d1 07       	cpc	r29, r17
     c88:	d9 f7       	brne	.-10     	; 0xc80 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     c8a:	f7 01       	movw	r30, r14
     c8c:	84 85       	ldd	r24, Z+12	; 0x0c
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	98 2f       	mov	r25, r24
     c92:	88 27       	eor	r24, r24
     c94:	25 85       	ldd	r18, Z+13	; 0x0d
     c96:	82 0f       	add	r24, r18
     c98:	91 1d       	adc	r25, r1
     c9a:	95 87       	std	Z+13, r25	; 0x0d
     c9c:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     c9e:	86 85       	ldd	r24, Z+14	; 0x0e
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	98 2f       	mov	r25, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	27 85       	ldd	r18, Z+15	; 0x0f
     ca8:	82 0f       	add	r24, r18
     caa:	91 1d       	adc	r25, r1
     cac:	97 87       	std	Z+15, r25	; 0x0f
     cae:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     cb0:	81 89       	ldd	r24, Z+17	; 0x11
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	98 2f       	mov	r25, r24
     cb6:	88 27       	eor	r24, r24
     cb8:	22 89       	ldd	r18, Z+18	; 0x12
     cba:	82 0f       	add	r24, r18
     cbc:	91 1d       	adc	r25, r1
     cbe:	92 8b       	std	Z+18, r25	; 0x12
     cc0:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     cc2:	83 89       	ldd	r24, Z+19	; 0x13
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	98 2f       	mov	r25, r24
     cc8:	88 27       	eor	r24, r24
     cca:	24 89       	ldd	r18, Z+20	; 0x14
     ccc:	82 0f       	add	r24, r18
     cce:	91 1d       	adc	r25, r1
     cd0:	94 8b       	std	Z+20, r25	; 0x14
     cd2:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     cd4:	86 89       	ldd	r24, Z+22	; 0x16
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	98 2f       	mov	r25, r24
     cda:	88 27       	eor	r24, r24
     cdc:	27 89       	ldd	r18, Z+23	; 0x17
     cde:	82 0f       	add	r24, r18
     ce0:	91 1d       	adc	r25, r1
     ce2:	97 8b       	std	Z+23, r25	; 0x17
     ce4:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     ce6:	80 8d       	ldd	r24, Z+24	; 0x18
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	98 2f       	mov	r25, r24
     cec:	88 27       	eor	r24, r24
     cee:	21 8d       	ldd	r18, Z+25	; 0x19
     cf0:	82 0f       	add	r24, r18
     cf2:	91 1d       	adc	r25, r1
     cf4:	91 8f       	std	Z+25, r25	; 0x19
     cf6:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     cf8:	82 8d       	ldd	r24, Z+26	; 0x1a
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	98 2f       	mov	r25, r24
     cfe:	88 27       	eor	r24, r24
     d00:	23 8d       	ldd	r18, Z+27	; 0x1b
     d02:	82 0f       	add	r24, r18
     d04:	91 1d       	adc	r25, r1
     d06:	93 8f       	std	Z+27, r25	; 0x1b
     d08:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     d0a:	84 8d       	ldd	r24, Z+28	; 0x1c
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	98 2f       	mov	r25, r24
     d10:	88 27       	eor	r24, r24
     d12:	25 8d       	ldd	r18, Z+29	; 0x1d
     d14:	82 0f       	add	r24, r18
     d16:	91 1d       	adc	r25, r1
     d18:	95 8f       	std	Z+29, r25	; 0x1d
     d1a:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     d1c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	98 2f       	mov	r25, r24
     d22:	88 27       	eor	r24, r24
     d24:	27 8d       	ldd	r18, Z+31	; 0x1f
     d26:	82 0f       	add	r24, r18
     d28:	91 1d       	adc	r25, r1
     d2a:	97 8f       	std	Z+31, r25	; 0x1f
     d2c:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     d2e:	80 a1       	ldd	r24, Z+32	; 0x20
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	98 2f       	mov	r25, r24
     d34:	88 27       	eor	r24, r24
     d36:	21 a1       	ldd	r18, Z+33	; 0x21
     d38:	82 0f       	add	r24, r18
     d3a:	91 1d       	adc	r25, r1
     d3c:	91 a3       	std	Z+33, r25	; 0x21
     d3e:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     d40:	82 a1       	ldd	r24, Z+34	; 0x22
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	98 2f       	mov	r25, r24
     d46:	88 27       	eor	r24, r24
     d48:	23 a1       	ldd	r18, Z+35	; 0x23
     d4a:	82 0f       	add	r24, r18
     d4c:	91 1d       	adc	r25, r1
     d4e:	93 a3       	std	Z+35, r25	; 0x23
     d50:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     d52:	82 a5       	ldd	r24, Z+42	; 0x2a
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	21 a5       	ldd	r18, Z+41	; 0x29
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	32 2f       	mov	r19, r18
     d5c:	22 27       	eor	r18, r18
     d5e:	28 0f       	add	r18, r24
     d60:	39 1f       	adc	r19, r25
     d62:	36 a3       	std	Z+38, r19	; 0x26
     d64:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     d66:	20 a9       	ldd	r18, Z+48	; 0x30
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	32 2f       	mov	r19, r18
     d6c:	22 27       	eor	r18, r18
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	95 a7       	std	Z+45, r25	; 0x2d
     d74:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     d76:	82 a9       	ldd	r24, Z+50	; 0x32
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	98 2f       	mov	r25, r24
     d7c:	88 27       	eor	r24, r24
     d7e:	23 a9       	ldd	r18, Z+51	; 0x33
     d80:	82 0f       	add	r24, r18
     d82:	91 1d       	adc	r25, r1
     d84:	97 a7       	std	Z+47, r25	; 0x2f
     d86:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     d88:	84 a9       	ldd	r24, Z+52	; 0x34
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	98 2f       	mov	r25, r24
     d8e:	88 27       	eor	r24, r24
     d90:	25 a9       	ldd	r18, Z+53	; 0x35
     d92:	82 0f       	add	r24, r18
     d94:	91 1d       	adc	r25, r1
     d96:	91 ab       	std	Z+49, r25	; 0x31
     d98:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     d9a:	86 a9       	ldd	r24, Z+54	; 0x36
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	98 2f       	mov	r25, r24
     da0:	88 27       	eor	r24, r24
     da2:	27 a9       	ldd	r18, Z+55	; 0x37
     da4:	82 0f       	add	r24, r18
     da6:	91 1d       	adc	r25, r1
     da8:	93 ab       	std	Z+51, r25	; 0x33
     daa:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     dac:	83 e2       	ldi	r24, 0x23	; 35
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	f0 d0       	rcall	.+480    	; 0xf92 <wait_ms>
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     dca:	09 e9       	ldi	r16, 0x99	; 153
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     dd4:	88 e1       	ldi	r24, 0x18	; 24
     dd6:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     dda:	86 e0       	ldi	r24, 0x06	; 6
     ddc:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	b7 de       	rcall	.-658    	; 0xb52 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     de4:	81 e8       	ldi	r24, 0x81	; 129
     de6:	b5 de       	rcall	.-662    	; 0xb52 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     de8:	88 e0       	ldi	r24, 0x08	; 8
     dea:	b3 de       	rcall	.-666    	; 0xb52 <oi_byte_tx>
	wait_ms(100);
     dec:	84 e6       	ldi	r24, 0x64	; 100
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	d0 d0       	rcall	.+416    	; 0xf92 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     df2:	81 e2       	ldi	r24, 0x21	; 33
     df4:	f8 01       	movw	r30, r16
     df6:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     df8:	84 e8       	ldi	r24, 0x84	; 132
     dfa:	ab de       	rcall	.-682    	; 0xb52 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	47 e0       	ldi	r20, 0x07	; 7
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	ae de       	rcall	.-676    	; 0xb62 <oi_set_leds>
	
	oi_update(self);
     e06:	ce 01       	movw	r24, r28
     e08:	20 df       	rcall	.-448    	; 0xc4a <oi_update>
	oi_update(self); // call twice to clear distance/angle
     e0a:	ce 01       	movw	r24, r28
     e0c:	1e df       	rcall	.-452    	; 0xc4a <oi_update>
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <timer3_init>:
#define DEGREE_MULTIPLIER 20.5
#define DEGREE_OFFSET 700

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     e18:	83 e2       	ldi	r24, 0x23	; 35
     e1a:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     e1e:	8a e1       	ldi	r24, 0x1A	; 26
     e20:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     e24:	88 ef       	ldi	r24, 0xF8	; 248
     e26:	97 ea       	ldi	r25, 0xA7	; 167
     e28:	90 93 87 00 	sts	0x0087, r25
     e2c:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     e30:	80 91 26 01 	lds	r24, 0x0126
     e34:	90 91 27 01 	lds	r25, 0x0127
     e38:	90 93 85 00 	sts	0x0085, r25
     e3c:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     e40:	14 9a       	sbi	0x02, 4	; 2
     e42:	08 95       	ret

00000e44 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     e44:	bc 01       	movw	r22, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	d2 d1       	rcall	.+932    	; 0x11f0 <__floatunsisf>
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	44 ea       	ldi	r20, 0xA4	; 164
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	7f d2       	rcall	.+1278   	; 0x1354 <__mulsf3>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4f e2       	ldi	r20, 0x2F	; 47
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	c7 d0       	rcall	.+398    	; 0xfee <__addsf3>
     e60:	9b d1       	rcall	.+822    	; 0x1198 <__fixunssfsi>
     e62:	70 93 27 01 	sts	0x0127, r23
     e66:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
     e6a:	70 93 85 00 	sts	0x0085, r23
     e6e:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     e72:	8e e1       	ldi	r24, 0x1E	; 30
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	8d c0       	rjmp	.+282    	; 0xf92 <wait_ms>
     e78:	08 95       	ret

00000e7a <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     e88:	80 91 0b 03 	lds	r24, 0x030B
     e8c:	81 11       	cpse	r24, r1
     e8e:	0d c0       	rjmp	.+26     	; 0xeaa <__vector_11+0x30>
		rising_time = ICR1;
     e90:	86 b5       	in	r24, 0x26	; 38
     e92:	97 b5       	in	r25, 0x27	; 39
     e94:	90 93 0a 03 	sts	0x030A, r25
     e98:	80 93 09 03 	sts	0x0309, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     e9c:	8e b5       	in	r24, 0x2e	; 46
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	80 93 0b 03 	sts	0x030B, r24
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <__vector_11+0x4a>
		} else if ( state == FALLING) {
     eaa:	80 91 0b 03 	lds	r24, 0x030B
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	49 f4       	brne	.+18     	; 0xec4 <__vector_11+0x4a>
		falling_time = ICR1;
     eb2:	86 b5       	in	r24, 0x26	; 38
     eb4:	97 b5       	in	r25, 0x27	; 39
     eb6:	90 93 08 03 	sts	0x0308, r25
     eba:	80 93 07 03 	sts	0x0307, r24
		state = DONE;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	80 93 0b 03 	sts	0x030B, r24
	}
}
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     ed2:	60 91 07 03 	lds	r22, 0x0307
     ed6:	70 91 08 03 	lds	r23, 0x0308
     eda:	80 91 09 03 	lds	r24, 0x0309
     ede:	90 91 0a 03 	lds	r25, 0x030A
     ee2:	68 1b       	sub	r22, r24
     ee4:	79 0b       	sbc	r23, r25
     ee6:	76 95       	lsr	r23
     ee8:	67 95       	ror	r22
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	80 d1       	rcall	.+768    	; 0x11f0 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	34 e2       	ldi	r19, 0x24	; 36
     ef4:	44 e7       	ldi	r20, 0x74	; 116
     ef6:	56 e4       	ldi	r21, 0x46	; 70
     ef8:	e2 d0       	rcall	.+452    	; 0x10be <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a ea       	ldi	r20, 0xAA	; 170
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	28 d2       	rcall	.+1104   	; 0x1354 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	48 ec       	ldi	r20, 0xC8	; 200
     f0a:	52 e4       	ldi	r21, 0x42	; 66
     f0c:	23 c2       	rjmp	.+1094   	; 0x1354 <__mulsf3>
	return timeDifference;
}
     f0e:	08 95       	ret

00000f10 <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     f10:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     f12:	ea e7       	ldi	r30, 0x7A	; 122
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     f1a:	86 b7       	in	r24, 0x36	; 54
     f1c:	80 62       	ori	r24, 0x20	; 32
     f1e:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     f20:	87 b7       	in	r24, 0x37	; 55
     f22:	80 62       	ori	r24, 0x20	; 32
     f24:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     f26:	85 ec       	ldi	r24, 0xC5	; 197
     f28:	8e bd       	out	0x2e, r24	; 46
     f2a:	08 95       	ret

00000f2c <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     f2c:	87 b7       	in	r24, 0x37	; 55
     f2e:	8b 7d       	andi	r24, 0xDB	; 219
     f30:	87 bf       	out	0x37, r24	; 55
     f32:	08 95       	ret

00000f34 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     f34:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     f36:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	2a d0       	rcall	.+84     	; 0xf92 <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     f3e:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     f40:	8c 98       	cbi	0x11, 4	; 17
     f42:	08 95       	ret

00000f44 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     f44:	10 92 0b 03 	sts	0x030B, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     f48:	f1 df       	rcall	.-30     	; 0xf2c <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     f4a:	f4 df       	rcall	.-24     	; 0xf34 <send_pulse>
	
	//Enable interrupt
	timer1_init();
     f4c:	e1 df       	rcall	.-62     	; 0xf10 <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     f4e:	80 91 0b 03 	lds	r24, 0x030B
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	e1 f7       	brne	.-8      	; 0xf4e <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     f56:	bd cf       	rjmp	.-134    	; 0xed2 <time_to_dist>
     f58:	08 95       	ret

00000f5a <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     f5a:	10 92 0d 03 	sts	0x030D, r1
     f5e:	10 92 0c 03 	sts	0x030C, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     f62:	81 11       	cpse	r24, r1
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     f66:	8b e0       	ldi	r24, 0x0B	; 11
     f68:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     f6a:	87 b7       	in	r24, 0x37	; 55
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	87 bf       	out	0x37, r24	; 55
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	29 f4       	brne	.+10     	; 0xf80 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     f76:	89 e0       	ldi	r24, 0x09	; 9
     f78:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     f7a:	87 b7       	in	r24, 0x37	; 55
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     f80:	78 94       	sei
     f82:	08 95       	ret

00000f84 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     f84:	87 b7       	in	r24, 0x37	; 55
     f86:	8f 77       	andi	r24, 0x7F	; 127
     f88:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     f8a:	85 b5       	in	r24, 0x25	; 37
     f8c:	8f 77       	andi	r24, 0x7F	; 127
     f8e:	85 bd       	out	0x25, r24	; 37
     f90:	08 95       	ret

00000f92 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     f98:	8a ef       	ldi	r24, 0xFA	; 250
     f9a:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     f9c:	10 92 0d 03 	sts	0x030D, r1
     fa0:	10 92 0c 03 	sts	0x030C, r1
	timer2_start(0);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	d9 df       	rcall	.-78     	; 0xf5a <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     fa8:	20 91 0c 03 	lds	r18, 0x030C
     fac:	30 91 0d 03 	lds	r19, 0x030D
     fb0:	2c 17       	cp	r18, r28
     fb2:	3d 07       	cpc	r19, r29
     fb4:	c8 f3       	brcs	.-14     	; 0xfa8 <wait_ms+0x16>

	timer2_stop();
     fb6:	e6 df       	rcall	.-52     	; 0xf84 <timer2_stop>
}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
	timer2_tick++;
     fcc:	80 91 0c 03 	lds	r24, 0x030C
     fd0:	90 91 0d 03 	lds	r25, 0x030D
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	90 93 0d 03 	sts	0x030D, r25
     fda:	80 93 0c 03 	sts	0x030C, r24
}
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__subsf3>:
     fec:	50 58       	subi	r21, 0x80	; 128

00000fee <__addsf3>:
     fee:	bb 27       	eor	r27, r27
     ff0:	aa 27       	eor	r26, r26
     ff2:	0e d0       	rcall	.+28     	; 0x1010 <__addsf3x>
     ff4:	75 c1       	rjmp	.+746    	; 0x12e0 <__fp_round>
     ff6:	66 d1       	rcall	.+716    	; 0x12c4 <__fp_pscA>
     ff8:	30 f0       	brcs	.+12     	; 0x1006 <__addsf3+0x18>
     ffa:	6b d1       	rcall	.+726    	; 0x12d2 <__fp_pscB>
     ffc:	20 f0       	brcs	.+8      	; 0x1006 <__addsf3+0x18>
     ffe:	31 f4       	brne	.+12     	; 0x100c <__addsf3+0x1e>
    1000:	9f 3f       	cpi	r25, 0xFF	; 255
    1002:	11 f4       	brne	.+4      	; 0x1008 <__addsf3+0x1a>
    1004:	1e f4       	brtc	.+6      	; 0x100c <__addsf3+0x1e>
    1006:	5b c1       	rjmp	.+694    	; 0x12be <__fp_nan>
    1008:	0e f4       	brtc	.+2      	; 0x100c <__addsf3+0x1e>
    100a:	e0 95       	com	r30
    100c:	e7 fb       	bst	r30, 7
    100e:	51 c1       	rjmp	.+674    	; 0x12b2 <__fp_inf>

00001010 <__addsf3x>:
    1010:	e9 2f       	mov	r30, r25
    1012:	77 d1       	rcall	.+750    	; 0x1302 <__fp_split3>
    1014:	80 f3       	brcs	.-32     	; 0xff6 <__addsf3+0x8>
    1016:	ba 17       	cp	r27, r26
    1018:	62 07       	cpc	r22, r18
    101a:	73 07       	cpc	r23, r19
    101c:	84 07       	cpc	r24, r20
    101e:	95 07       	cpc	r25, r21
    1020:	18 f0       	brcs	.+6      	; 0x1028 <__addsf3x+0x18>
    1022:	71 f4       	brne	.+28     	; 0x1040 <__addsf3x+0x30>
    1024:	9e f5       	brtc	.+102    	; 0x108c <__addsf3x+0x7c>
    1026:	8f c1       	rjmp	.+798    	; 0x1346 <__fp_zero>
    1028:	0e f4       	brtc	.+2      	; 0x102c <__addsf3x+0x1c>
    102a:	e0 95       	com	r30
    102c:	0b 2e       	mov	r0, r27
    102e:	ba 2f       	mov	r27, r26
    1030:	a0 2d       	mov	r26, r0
    1032:	0b 01       	movw	r0, r22
    1034:	b9 01       	movw	r22, r18
    1036:	90 01       	movw	r18, r0
    1038:	0c 01       	movw	r0, r24
    103a:	ca 01       	movw	r24, r20
    103c:	a0 01       	movw	r20, r0
    103e:	11 24       	eor	r1, r1
    1040:	ff 27       	eor	r31, r31
    1042:	59 1b       	sub	r21, r25
    1044:	99 f0       	breq	.+38     	; 0x106c <__addsf3x+0x5c>
    1046:	59 3f       	cpi	r21, 0xF9	; 249
    1048:	50 f4       	brcc	.+20     	; 0x105e <__addsf3x+0x4e>
    104a:	50 3e       	cpi	r21, 0xE0	; 224
    104c:	68 f1       	brcs	.+90     	; 0x10a8 <__addsf3x+0x98>
    104e:	1a 16       	cp	r1, r26
    1050:	f0 40       	sbci	r31, 0x00	; 0
    1052:	a2 2f       	mov	r26, r18
    1054:	23 2f       	mov	r18, r19
    1056:	34 2f       	mov	r19, r20
    1058:	44 27       	eor	r20, r20
    105a:	58 5f       	subi	r21, 0xF8	; 248
    105c:	f3 cf       	rjmp	.-26     	; 0x1044 <__addsf3x+0x34>
    105e:	46 95       	lsr	r20
    1060:	37 95       	ror	r19
    1062:	27 95       	ror	r18
    1064:	a7 95       	ror	r26
    1066:	f0 40       	sbci	r31, 0x00	; 0
    1068:	53 95       	inc	r21
    106a:	c9 f7       	brne	.-14     	; 0x105e <__addsf3x+0x4e>
    106c:	7e f4       	brtc	.+30     	; 0x108c <__addsf3x+0x7c>
    106e:	1f 16       	cp	r1, r31
    1070:	ba 0b       	sbc	r27, r26
    1072:	62 0b       	sbc	r22, r18
    1074:	73 0b       	sbc	r23, r19
    1076:	84 0b       	sbc	r24, r20
    1078:	ba f0       	brmi	.+46     	; 0x10a8 <__addsf3x+0x98>
    107a:	91 50       	subi	r25, 0x01	; 1
    107c:	a1 f0       	breq	.+40     	; 0x10a6 <__addsf3x+0x96>
    107e:	ff 0f       	add	r31, r31
    1080:	bb 1f       	adc	r27, r27
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	c2 f7       	brpl	.-16     	; 0x107a <__addsf3x+0x6a>
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <__addsf3x+0x98>
    108c:	ba 0f       	add	r27, r26
    108e:	62 1f       	adc	r22, r18
    1090:	73 1f       	adc	r23, r19
    1092:	84 1f       	adc	r24, r20
    1094:	48 f4       	brcc	.+18     	; 0x10a8 <__addsf3x+0x98>
    1096:	87 95       	ror	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	b7 95       	ror	r27
    109e:	f7 95       	ror	r31
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__addsf3x+0x96>
    10a4:	b3 cf       	rjmp	.-154    	; 0x100c <__addsf3+0x1e>
    10a6:	93 95       	inc	r25
    10a8:	88 0f       	add	r24, r24
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__addsf3x+0x9e>
    10ac:	99 27       	eor	r25, r25
    10ae:	ee 0f       	add	r30, r30
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	08 95       	ret

000010b6 <__cmpsf2>:
    10b6:	d9 d0       	rcall	.+434    	; 0x126a <__fp_cmp>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__cmpsf2+0x6>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret

000010be <__divsf3>:
    10be:	0c d0       	rcall	.+24     	; 0x10d8 <__divsf3x>
    10c0:	0f c1       	rjmp	.+542    	; 0x12e0 <__fp_round>
    10c2:	07 d1       	rcall	.+526    	; 0x12d2 <__fp_pscB>
    10c4:	40 f0       	brcs	.+16     	; 0x10d6 <__divsf3+0x18>
    10c6:	fe d0       	rcall	.+508    	; 0x12c4 <__fp_pscA>
    10c8:	30 f0       	brcs	.+12     	; 0x10d6 <__divsf3+0x18>
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <__divsf3+0x16>
    10cc:	5f 3f       	cpi	r21, 0xFF	; 255
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <__divsf3+0x18>
    10d0:	f0 c0       	rjmp	.+480    	; 0x12b2 <__fp_inf>
    10d2:	51 11       	cpse	r21, r1
    10d4:	39 c1       	rjmp	.+626    	; 0x1348 <__fp_szero>
    10d6:	f3 c0       	rjmp	.+486    	; 0x12be <__fp_nan>

000010d8 <__divsf3x>:
    10d8:	14 d1       	rcall	.+552    	; 0x1302 <__fp_split3>
    10da:	98 f3       	brcs	.-26     	; 0x10c2 <__divsf3+0x4>

000010dc <__divsf3_pse>:
    10dc:	99 23       	and	r25, r25
    10de:	c9 f3       	breq	.-14     	; 0x10d2 <__divsf3+0x14>
    10e0:	55 23       	and	r21, r21
    10e2:	b1 f3       	breq	.-20     	; 0x10d0 <__divsf3+0x12>
    10e4:	95 1b       	sub	r25, r21
    10e6:	55 0b       	sbc	r21, r21
    10e8:	bb 27       	eor	r27, r27
    10ea:	aa 27       	eor	r26, r26
    10ec:	62 17       	cp	r22, r18
    10ee:	73 07       	cpc	r23, r19
    10f0:	84 07       	cpc	r24, r20
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <__stack+0x3>
    10f4:	9f 5f       	subi	r25, 0xFF	; 255
    10f6:	5f 4f       	sbci	r21, 0xFF	; 255
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	44 1f       	adc	r20, r20
    10fe:	aa 1f       	adc	r26, r26
    1100:	a9 f3       	breq	.-22     	; 0x10ec <__divsf3_pse+0x10>
    1102:	33 d0       	rcall	.+102    	; 0x116a <__stack+0x6b>
    1104:	0e 2e       	mov	r0, r30
    1106:	3a f0       	brmi	.+14     	; 0x1116 <__stack+0x17>
    1108:	e0 e8       	ldi	r30, 0x80	; 128
    110a:	30 d0       	rcall	.+96     	; 0x116c <__stack+0x6d>
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	e6 95       	lsr	r30
    1112:	00 1c       	adc	r0, r0
    1114:	ca f7       	brpl	.-14     	; 0x1108 <__stack+0x9>
    1116:	29 d0       	rcall	.+82     	; 0x116a <__stack+0x6b>
    1118:	fe 2f       	mov	r31, r30
    111a:	27 d0       	rcall	.+78     	; 0x116a <__stack+0x6b>
    111c:	66 0f       	add	r22, r22
    111e:	77 1f       	adc	r23, r23
    1120:	88 1f       	adc	r24, r24
    1122:	bb 1f       	adc	r27, r27
    1124:	26 17       	cp	r18, r22
    1126:	37 07       	cpc	r19, r23
    1128:	48 07       	cpc	r20, r24
    112a:	ab 07       	cpc	r26, r27
    112c:	b0 e8       	ldi	r27, 0x80	; 128
    112e:	09 f0       	breq	.+2      	; 0x1132 <__stack+0x33>
    1130:	bb 0b       	sbc	r27, r27
    1132:	80 2d       	mov	r24, r0
    1134:	bf 01       	movw	r22, r30
    1136:	ff 27       	eor	r31, r31
    1138:	93 58       	subi	r25, 0x83	; 131
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	2a f0       	brmi	.+10     	; 0x1148 <__stack+0x49>
    113e:	9e 3f       	cpi	r25, 0xFE	; 254
    1140:	51 05       	cpc	r21, r1
    1142:	68 f0       	brcs	.+26     	; 0x115e <__stack+0x5f>
    1144:	b6 c0       	rjmp	.+364    	; 0x12b2 <__fp_inf>
    1146:	00 c1       	rjmp	.+512    	; 0x1348 <__fp_szero>
    1148:	5f 3f       	cpi	r21, 0xFF	; 255
    114a:	ec f3       	brlt	.-6      	; 0x1146 <__stack+0x47>
    114c:	98 3e       	cpi	r25, 0xE8	; 232
    114e:	dc f3       	brlt	.-10     	; 0x1146 <__stack+0x47>
    1150:	86 95       	lsr	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b7 95       	ror	r27
    1158:	f7 95       	ror	r31
    115a:	9f 5f       	subi	r25, 0xFF	; 255
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__stack+0x51>
    115e:	88 0f       	add	r24, r24
    1160:	91 1d       	adc	r25, r1
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	97 f9       	bld	r25, 7
    1168:	08 95       	ret
    116a:	e1 e0       	ldi	r30, 0x01	; 1
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	bb 1f       	adc	r27, r27
    1174:	62 17       	cp	r22, r18
    1176:	73 07       	cpc	r23, r19
    1178:	84 07       	cpc	r24, r20
    117a:	ba 07       	cpc	r27, r26
    117c:	20 f0       	brcs	.+8      	; 0x1186 <__stack+0x87>
    117e:	62 1b       	sub	r22, r18
    1180:	73 0b       	sbc	r23, r19
    1182:	84 0b       	sbc	r24, r20
    1184:	ba 0b       	sbc	r27, r26
    1186:	ee 1f       	adc	r30, r30
    1188:	88 f7       	brcc	.-30     	; 0x116c <__stack+0x6d>
    118a:	e0 95       	com	r30
    118c:	08 95       	ret

0000118e <__fixsfsi>:
    118e:	04 d0       	rcall	.+8      	; 0x1198 <__fixunssfsi>
    1190:	68 94       	set
    1192:	b1 11       	cpse	r27, r1
    1194:	d9 c0       	rjmp	.+434    	; 0x1348 <__fp_szero>
    1196:	08 95       	ret

00001198 <__fixunssfsi>:
    1198:	bc d0       	rcall	.+376    	; 0x1312 <__fp_splitA>
    119a:	88 f0       	brcs	.+34     	; 0x11be <__fixunssfsi+0x26>
    119c:	9f 57       	subi	r25, 0x7F	; 127
    119e:	90 f0       	brcs	.+36     	; 0x11c4 <__fixunssfsi+0x2c>
    11a0:	b9 2f       	mov	r27, r25
    11a2:	99 27       	eor	r25, r25
    11a4:	b7 51       	subi	r27, 0x17	; 23
    11a6:	a0 f0       	brcs	.+40     	; 0x11d0 <__fixunssfsi+0x38>
    11a8:	d1 f0       	breq	.+52     	; 0x11de <__fixunssfsi+0x46>
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	1a f0       	brmi	.+6      	; 0x11ba <__fixunssfsi+0x22>
    11b4:	ba 95       	dec	r27
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <__fixunssfsi+0x12>
    11b8:	12 c0       	rjmp	.+36     	; 0x11de <__fixunssfsi+0x46>
    11ba:	b1 30       	cpi	r27, 0x01	; 1
    11bc:	81 f0       	breq	.+32     	; 0x11de <__fixunssfsi+0x46>
    11be:	c3 d0       	rcall	.+390    	; 0x1346 <__fp_zero>
    11c0:	b1 e0       	ldi	r27, 0x01	; 1
    11c2:	08 95       	ret
    11c4:	c0 c0       	rjmp	.+384    	; 0x1346 <__fp_zero>
    11c6:	67 2f       	mov	r22, r23
    11c8:	78 2f       	mov	r23, r24
    11ca:	88 27       	eor	r24, r24
    11cc:	b8 5f       	subi	r27, 0xF8	; 248
    11ce:	39 f0       	breq	.+14     	; 0x11de <__fixunssfsi+0x46>
    11d0:	b9 3f       	cpi	r27, 0xF9	; 249
    11d2:	cc f3       	brlt	.-14     	; 0x11c6 <__fixunssfsi+0x2e>
    11d4:	86 95       	lsr	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	b3 95       	inc	r27
    11dc:	d9 f7       	brne	.-10     	; 0x11d4 <__fixunssfsi+0x3c>
    11de:	3e f4       	brtc	.+14     	; 0x11ee <__fixunssfsi+0x56>
    11e0:	90 95       	com	r25
    11e2:	80 95       	com	r24
    11e4:	70 95       	com	r23
    11e6:	61 95       	neg	r22
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	8f 4f       	sbci	r24, 0xFF	; 255
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	08 95       	ret

000011f0 <__floatunsisf>:
    11f0:	e8 94       	clt
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <__floatsisf+0x12>

000011f4 <__floatsisf>:
    11f4:	97 fb       	bst	r25, 7
    11f6:	3e f4       	brtc	.+14     	; 0x1206 <__floatsisf+0x12>
    11f8:	90 95       	com	r25
    11fa:	80 95       	com	r24
    11fc:	70 95       	com	r23
    11fe:	61 95       	neg	r22
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	8f 4f       	sbci	r24, 0xFF	; 255
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	99 23       	and	r25, r25
    1208:	a9 f0       	breq	.+42     	; 0x1234 <__floatsisf+0x40>
    120a:	f9 2f       	mov	r31, r25
    120c:	96 e9       	ldi	r25, 0x96	; 150
    120e:	bb 27       	eor	r27, r27
    1210:	93 95       	inc	r25
    1212:	f6 95       	lsr	r31
    1214:	87 95       	ror	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	b7 95       	ror	r27
    121c:	f1 11       	cpse	r31, r1
    121e:	f8 cf       	rjmp	.-16     	; 0x1210 <__floatsisf+0x1c>
    1220:	fa f4       	brpl	.+62     	; 0x1260 <__floatsisf+0x6c>
    1222:	bb 0f       	add	r27, r27
    1224:	11 f4       	brne	.+4      	; 0x122a <__floatsisf+0x36>
    1226:	60 ff       	sbrs	r22, 0
    1228:	1b c0       	rjmp	.+54     	; 0x1260 <__floatsisf+0x6c>
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	16 c0       	rjmp	.+44     	; 0x1260 <__floatsisf+0x6c>
    1234:	88 23       	and	r24, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <__floatsisf+0x48>
    1238:	96 e9       	ldi	r25, 0x96	; 150
    123a:	11 c0       	rjmp	.+34     	; 0x125e <__floatsisf+0x6a>
    123c:	77 23       	and	r23, r23
    123e:	21 f0       	breq	.+8      	; 0x1248 <__floatsisf+0x54>
    1240:	9e e8       	ldi	r25, 0x8E	; 142
    1242:	87 2f       	mov	r24, r23
    1244:	76 2f       	mov	r23, r22
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <__floatsisf+0x5e>
    1248:	66 23       	and	r22, r22
    124a:	71 f0       	breq	.+28     	; 0x1268 <__floatsisf+0x74>
    124c:	96 e8       	ldi	r25, 0x86	; 134
    124e:	86 2f       	mov	r24, r22
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	2a f0       	brmi	.+10     	; 0x1260 <__floatsisf+0x6c>
    1256:	9a 95       	dec	r25
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	88 1f       	adc	r24, r24
    125e:	da f7       	brpl	.-10     	; 0x1256 <__floatsisf+0x62>
    1260:	88 0f       	add	r24, r24
    1262:	96 95       	lsr	r25
    1264:	87 95       	ror	r24
    1266:	97 f9       	bld	r25, 7
    1268:	08 95       	ret

0000126a <__fp_cmp>:
    126a:	99 0f       	add	r25, r25
    126c:	00 08       	sbc	r0, r0
    126e:	55 0f       	add	r21, r21
    1270:	aa 0b       	sbc	r26, r26
    1272:	e0 e8       	ldi	r30, 0x80	; 128
    1274:	fe ef       	ldi	r31, 0xFE	; 254
    1276:	16 16       	cp	r1, r22
    1278:	17 06       	cpc	r1, r23
    127a:	e8 07       	cpc	r30, r24
    127c:	f9 07       	cpc	r31, r25
    127e:	c0 f0       	brcs	.+48     	; 0x12b0 <__fp_cmp+0x46>
    1280:	12 16       	cp	r1, r18
    1282:	13 06       	cpc	r1, r19
    1284:	e4 07       	cpc	r30, r20
    1286:	f5 07       	cpc	r31, r21
    1288:	98 f0       	brcs	.+38     	; 0x12b0 <__fp_cmp+0x46>
    128a:	62 1b       	sub	r22, r18
    128c:	73 0b       	sbc	r23, r19
    128e:	84 0b       	sbc	r24, r20
    1290:	95 0b       	sbc	r25, r21
    1292:	39 f4       	brne	.+14     	; 0x12a2 <__fp_cmp+0x38>
    1294:	0a 26       	eor	r0, r26
    1296:	61 f0       	breq	.+24     	; 0x12b0 <__fp_cmp+0x46>
    1298:	23 2b       	or	r18, r19
    129a:	24 2b       	or	r18, r20
    129c:	25 2b       	or	r18, r21
    129e:	21 f4       	brne	.+8      	; 0x12a8 <__fp_cmp+0x3e>
    12a0:	08 95       	ret
    12a2:	0a 26       	eor	r0, r26
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <__fp_cmp+0x3e>
    12a6:	a1 40       	sbci	r26, 0x01	; 1
    12a8:	a6 95       	lsr	r26
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	81 1d       	adc	r24, r1
    12ae:	81 1d       	adc	r24, r1
    12b0:	08 95       	ret

000012b2 <__fp_inf>:
    12b2:	97 f9       	bld	r25, 7
    12b4:	9f 67       	ori	r25, 0x7F	; 127
    12b6:	80 e8       	ldi	r24, 0x80	; 128
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	08 95       	ret

000012be <__fp_nan>:
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	80 ec       	ldi	r24, 0xC0	; 192
    12c2:	08 95       	ret

000012c4 <__fp_pscA>:
    12c4:	00 24       	eor	r0, r0
    12c6:	0a 94       	dec	r0
    12c8:	16 16       	cp	r1, r22
    12ca:	17 06       	cpc	r1, r23
    12cc:	18 06       	cpc	r1, r24
    12ce:	09 06       	cpc	r0, r25
    12d0:	08 95       	ret

000012d2 <__fp_pscB>:
    12d2:	00 24       	eor	r0, r0
    12d4:	0a 94       	dec	r0
    12d6:	12 16       	cp	r1, r18
    12d8:	13 06       	cpc	r1, r19
    12da:	14 06       	cpc	r1, r20
    12dc:	05 06       	cpc	r0, r21
    12de:	08 95       	ret

000012e0 <__fp_round>:
    12e0:	09 2e       	mov	r0, r25
    12e2:	03 94       	inc	r0
    12e4:	00 0c       	add	r0, r0
    12e6:	11 f4       	brne	.+4      	; 0x12ec <__fp_round+0xc>
    12e8:	88 23       	and	r24, r24
    12ea:	52 f0       	brmi	.+20     	; 0x1300 <__fp_round+0x20>
    12ec:	bb 0f       	add	r27, r27
    12ee:	40 f4       	brcc	.+16     	; 0x1300 <__fp_round+0x20>
    12f0:	bf 2b       	or	r27, r31
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__fp_round+0x18>
    12f4:	60 ff       	sbrs	r22, 0
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <__fp_round+0x20>
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	08 95       	ret

00001302 <__fp_split3>:
    1302:	57 fd       	sbrc	r21, 7
    1304:	90 58       	subi	r25, 0x80	; 128
    1306:	44 0f       	add	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	59 f0       	breq	.+22     	; 0x1322 <__fp_splitA+0x10>
    130c:	5f 3f       	cpi	r21, 0xFF	; 255
    130e:	71 f0       	breq	.+28     	; 0x132c <__fp_splitA+0x1a>
    1310:	47 95       	ror	r20

00001312 <__fp_splitA>:
    1312:	88 0f       	add	r24, r24
    1314:	97 fb       	bst	r25, 7
    1316:	99 1f       	adc	r25, r25
    1318:	61 f0       	breq	.+24     	; 0x1332 <__fp_splitA+0x20>
    131a:	9f 3f       	cpi	r25, 0xFF	; 255
    131c:	79 f0       	breq	.+30     	; 0x133c <__fp_splitA+0x2a>
    131e:	87 95       	ror	r24
    1320:	08 95       	ret
    1322:	12 16       	cp	r1, r18
    1324:	13 06       	cpc	r1, r19
    1326:	14 06       	cpc	r1, r20
    1328:	55 1f       	adc	r21, r21
    132a:	f2 cf       	rjmp	.-28     	; 0x1310 <__fp_split3+0xe>
    132c:	46 95       	lsr	r20
    132e:	f1 df       	rcall	.-30     	; 0x1312 <__fp_splitA>
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <__fp_splitA+0x30>
    1332:	16 16       	cp	r1, r22
    1334:	17 06       	cpc	r1, r23
    1336:	18 06       	cpc	r1, r24
    1338:	99 1f       	adc	r25, r25
    133a:	f1 cf       	rjmp	.-30     	; 0x131e <__fp_splitA+0xc>
    133c:	86 95       	lsr	r24
    133e:	71 05       	cpc	r23, r1
    1340:	61 05       	cpc	r22, r1
    1342:	08 94       	sec
    1344:	08 95       	ret

00001346 <__fp_zero>:
    1346:	e8 94       	clt

00001348 <__fp_szero>:
    1348:	bb 27       	eor	r27, r27
    134a:	66 27       	eor	r22, r22
    134c:	77 27       	eor	r23, r23
    134e:	cb 01       	movw	r24, r22
    1350:	97 f9       	bld	r25, 7
    1352:	08 95       	ret

00001354 <__mulsf3>:
    1354:	0b d0       	rcall	.+22     	; 0x136c <__mulsf3x>
    1356:	c4 cf       	rjmp	.-120    	; 0x12e0 <__fp_round>
    1358:	b5 df       	rcall	.-150    	; 0x12c4 <__fp_pscA>
    135a:	28 f0       	brcs	.+10     	; 0x1366 <__mulsf3+0x12>
    135c:	ba df       	rcall	.-140    	; 0x12d2 <__fp_pscB>
    135e:	18 f0       	brcs	.+6      	; 0x1366 <__mulsf3+0x12>
    1360:	95 23       	and	r25, r21
    1362:	09 f0       	breq	.+2      	; 0x1366 <__mulsf3+0x12>
    1364:	a6 cf       	rjmp	.-180    	; 0x12b2 <__fp_inf>
    1366:	ab cf       	rjmp	.-170    	; 0x12be <__fp_nan>
    1368:	11 24       	eor	r1, r1
    136a:	ee cf       	rjmp	.-36     	; 0x1348 <__fp_szero>

0000136c <__mulsf3x>:
    136c:	ca df       	rcall	.-108    	; 0x1302 <__fp_split3>
    136e:	a0 f3       	brcs	.-24     	; 0x1358 <__mulsf3+0x4>

00001370 <__mulsf3_pse>:
    1370:	95 9f       	mul	r25, r21
    1372:	d1 f3       	breq	.-12     	; 0x1368 <__mulsf3+0x14>
    1374:	95 0f       	add	r25, r21
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	55 1f       	adc	r21, r21
    137a:	62 9f       	mul	r22, r18
    137c:	f0 01       	movw	r30, r0
    137e:	72 9f       	mul	r23, r18
    1380:	bb 27       	eor	r27, r27
    1382:	f0 0d       	add	r31, r0
    1384:	b1 1d       	adc	r27, r1
    1386:	63 9f       	mul	r22, r19
    1388:	aa 27       	eor	r26, r26
    138a:	f0 0d       	add	r31, r0
    138c:	b1 1d       	adc	r27, r1
    138e:	aa 1f       	adc	r26, r26
    1390:	64 9f       	mul	r22, r20
    1392:	66 27       	eor	r22, r22
    1394:	b0 0d       	add	r27, r0
    1396:	a1 1d       	adc	r26, r1
    1398:	66 1f       	adc	r22, r22
    139a:	82 9f       	mul	r24, r18
    139c:	22 27       	eor	r18, r18
    139e:	b0 0d       	add	r27, r0
    13a0:	a1 1d       	adc	r26, r1
    13a2:	62 1f       	adc	r22, r18
    13a4:	73 9f       	mul	r23, r19
    13a6:	b0 0d       	add	r27, r0
    13a8:	a1 1d       	adc	r26, r1
    13aa:	62 1f       	adc	r22, r18
    13ac:	83 9f       	mul	r24, r19
    13ae:	a0 0d       	add	r26, r0
    13b0:	61 1d       	adc	r22, r1
    13b2:	22 1f       	adc	r18, r18
    13b4:	74 9f       	mul	r23, r20
    13b6:	33 27       	eor	r19, r19
    13b8:	a0 0d       	add	r26, r0
    13ba:	61 1d       	adc	r22, r1
    13bc:	23 1f       	adc	r18, r19
    13be:	84 9f       	mul	r24, r20
    13c0:	60 0d       	add	r22, r0
    13c2:	21 1d       	adc	r18, r1
    13c4:	82 2f       	mov	r24, r18
    13c6:	76 2f       	mov	r23, r22
    13c8:	6a 2f       	mov	r22, r26
    13ca:	11 24       	eor	r1, r1
    13cc:	9f 57       	subi	r25, 0x7F	; 127
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	8a f0       	brmi	.+34     	; 0x13f4 <__mulsf3_pse+0x84>
    13d2:	e1 f0       	breq	.+56     	; 0x140c <__mulsf3_pse+0x9c>
    13d4:	88 23       	and	r24, r24
    13d6:	4a f0       	brmi	.+18     	; 0x13ea <__mulsf3_pse+0x7a>
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	bb 1f       	adc	r27, r27
    13de:	66 1f       	adc	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	91 50       	subi	r25, 0x01	; 1
    13e6:	50 40       	sbci	r21, 0x00	; 0
    13e8:	a9 f7       	brne	.-22     	; 0x13d4 <__mulsf3_pse+0x64>
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	51 05       	cpc	r21, r1
    13ee:	70 f0       	brcs	.+28     	; 0x140c <__mulsf3_pse+0x9c>
    13f0:	60 cf       	rjmp	.-320    	; 0x12b2 <__fp_inf>
    13f2:	aa cf       	rjmp	.-172    	; 0x1348 <__fp_szero>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	ec f3       	brlt	.-6      	; 0x13f2 <__mulsf3_pse+0x82>
    13f8:	98 3e       	cpi	r25, 0xE8	; 232
    13fa:	dc f3       	brlt	.-10     	; 0x13f2 <__mulsf3_pse+0x82>
    13fc:	86 95       	lsr	r24
    13fe:	77 95       	ror	r23
    1400:	67 95       	ror	r22
    1402:	b7 95       	ror	r27
    1404:	f7 95       	ror	r31
    1406:	e7 95       	ror	r30
    1408:	9f 5f       	subi	r25, 0xFF	; 255
    140a:	c1 f7       	brne	.-16     	; 0x13fc <__mulsf3_pse+0x8c>
    140c:	fe 2b       	or	r31, r30
    140e:	88 0f       	add	r24, r24
    1410:	91 1d       	adc	r25, r1
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	97 f9       	bld	r25, 7
    1418:	08 95       	ret

0000141a <__divmodhi4>:
    141a:	97 fb       	bst	r25, 7
    141c:	07 2e       	mov	r0, r23
    141e:	16 f4       	brtc	.+4      	; 0x1424 <__divmodhi4+0xa>
    1420:	00 94       	com	r0
    1422:	06 d0       	rcall	.+12     	; 0x1430 <__divmodhi4_neg1>
    1424:	77 fd       	sbrc	r23, 7
    1426:	08 d0       	rcall	.+16     	; 0x1438 <__divmodhi4_neg2>
    1428:	0b d0       	rcall	.+22     	; 0x1440 <__udivmodhi4>
    142a:	07 fc       	sbrc	r0, 7
    142c:	05 d0       	rcall	.+10     	; 0x1438 <__divmodhi4_neg2>
    142e:	3e f4       	brtc	.+14     	; 0x143e <__divmodhi4_exit>

00001430 <__divmodhi4_neg1>:
    1430:	90 95       	com	r25
    1432:	81 95       	neg	r24
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	08 95       	ret

00001438 <__divmodhi4_neg2>:
    1438:	70 95       	com	r23
    143a:	61 95       	neg	r22
    143c:	7f 4f       	sbci	r23, 0xFF	; 255

0000143e <__divmodhi4_exit>:
    143e:	08 95       	ret

00001440 <__udivmodhi4>:
    1440:	aa 1b       	sub	r26, r26
    1442:	bb 1b       	sub	r27, r27
    1444:	51 e1       	ldi	r21, 0x11	; 17
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <__udivmodhi4_ep>

00001448 <__udivmodhi4_loop>:
    1448:	aa 1f       	adc	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	a6 17       	cp	r26, r22
    144e:	b7 07       	cpc	r27, r23
    1450:	10 f0       	brcs	.+4      	; 0x1456 <__udivmodhi4_ep>
    1452:	a6 1b       	sub	r26, r22
    1454:	b7 0b       	sbc	r27, r23

00001456 <__udivmodhi4_ep>:
    1456:	88 1f       	adc	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	5a 95       	dec	r21
    145c:	a9 f7       	brne	.-22     	; 0x1448 <__udivmodhi4_loop>
    145e:	80 95       	com	r24
    1460:	90 95       	com	r25
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	08 95       	ret

00001468 <calloc>:
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	86 9f       	mul	r24, r22
    1472:	80 01       	movw	r16, r0
    1474:	87 9f       	mul	r24, r23
    1476:	10 0d       	add	r17, r0
    1478:	96 9f       	mul	r25, r22
    147a:	10 0d       	add	r17, r0
    147c:	11 24       	eor	r1, r1
    147e:	c8 01       	movw	r24, r16
    1480:	0d d0       	rcall	.+26     	; 0x149c <malloc>
    1482:	ec 01       	movw	r28, r24
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	21 f0       	breq	.+8      	; 0x1490 <calloc+0x28>
    1488:	a8 01       	movw	r20, r16
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	2d d1       	rcall	.+602    	; 0x16ea <memset>
    1490:	ce 01       	movw	r24, r28
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <malloc>:
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	91 05       	cpc	r25, r1
    14a4:	10 f4       	brcc	.+4      	; 0x14aa <malloc+0xe>
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	e0 91 10 03 	lds	r30, 0x0310
    14ae:	f0 91 11 03 	lds	r31, 0x0311
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	39 f1       	breq	.+78     	; 0x150c <malloc+0x70>
    14be:	40 81       	ld	r20, Z
    14c0:	51 81       	ldd	r21, Z+1	; 0x01
    14c2:	48 17       	cp	r20, r24
    14c4:	59 07       	cpc	r21, r25
    14c6:	b8 f0       	brcs	.+46     	; 0x14f6 <malloc+0x5a>
    14c8:	48 17       	cp	r20, r24
    14ca:	59 07       	cpc	r21, r25
    14cc:	71 f4       	brne	.+28     	; 0x14ea <malloc+0x4e>
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	10 97       	sbiw	r26, 0x00	; 0
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <malloc+0x44>
    14d6:	13 96       	adiw	r26, 0x03	; 3
    14d8:	9c 93       	st	X, r25
    14da:	8e 93       	st	-X, r24
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	2c c0       	rjmp	.+88     	; 0x1538 <malloc+0x9c>
    14e0:	90 93 11 03 	sts	0x0311, r25
    14e4:	80 93 10 03 	sts	0x0310, r24
    14e8:	27 c0       	rjmp	.+78     	; 0x1538 <malloc+0x9c>
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	31 f0       	breq	.+12     	; 0x14fc <malloc+0x60>
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	18 f0       	brcs	.+6      	; 0x14fc <malloc+0x60>
    14f6:	a9 01       	movw	r20, r18
    14f8:	db 01       	movw	r26, r22
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <malloc+0x62>
    14fc:	ef 01       	movw	r28, r30
    14fe:	9a 01       	movw	r18, r20
    1500:	bd 01       	movw	r22, r26
    1502:	df 01       	movw	r26, r30
    1504:	02 80       	ldd	r0, Z+2	; 0x02
    1506:	f3 81       	ldd	r31, Z+3	; 0x03
    1508:	e0 2d       	mov	r30, r0
    150a:	d7 cf       	rjmp	.-82     	; 0x14ba <malloc+0x1e>
    150c:	21 15       	cp	r18, r1
    150e:	31 05       	cpc	r19, r1
    1510:	f9 f0       	breq	.+62     	; 0x1550 <malloc+0xb4>
    1512:	28 1b       	sub	r18, r24
    1514:	39 0b       	sbc	r19, r25
    1516:	24 30       	cpi	r18, 0x04	; 4
    1518:	31 05       	cpc	r19, r1
    151a:	80 f4       	brcc	.+32     	; 0x153c <malloc+0xa0>
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	9b 81       	ldd	r25, Y+3	; 0x03
    1520:	61 15       	cp	r22, r1
    1522:	71 05       	cpc	r23, r1
    1524:	21 f0       	breq	.+8      	; 0x152e <malloc+0x92>
    1526:	fb 01       	movw	r30, r22
    1528:	93 83       	std	Z+3, r25	; 0x03
    152a:	82 83       	std	Z+2, r24	; 0x02
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <malloc+0x9a>
    152e:	90 93 11 03 	sts	0x0311, r25
    1532:	80 93 10 03 	sts	0x0310, r24
    1536:	fe 01       	movw	r30, r28
    1538:	32 96       	adiw	r30, 0x02	; 2
    153a:	44 c0       	rjmp	.+136    	; 0x15c4 <malloc+0x128>
    153c:	fe 01       	movw	r30, r28
    153e:	e2 0f       	add	r30, r18
    1540:	f3 1f       	adc	r31, r19
    1542:	81 93       	st	Z+, r24
    1544:	91 93       	st	Z+, r25
    1546:	22 50       	subi	r18, 0x02	; 2
    1548:	31 09       	sbc	r19, r1
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	28 83       	st	Y, r18
    154e:	3a c0       	rjmp	.+116    	; 0x15c4 <malloc+0x128>
    1550:	20 91 0e 03 	lds	r18, 0x030E
    1554:	30 91 0f 03 	lds	r19, 0x030F
    1558:	23 2b       	or	r18, r19
    155a:	41 f4       	brne	.+16     	; 0x156c <malloc+0xd0>
    155c:	20 91 02 01 	lds	r18, 0x0102
    1560:	30 91 03 01 	lds	r19, 0x0103
    1564:	30 93 0f 03 	sts	0x030F, r19
    1568:	20 93 0e 03 	sts	0x030E, r18
    156c:	20 91 00 01 	lds	r18, 0x0100
    1570:	30 91 01 01 	lds	r19, 0x0101
    1574:	21 15       	cp	r18, r1
    1576:	31 05       	cpc	r19, r1
    1578:	41 f4       	brne	.+16     	; 0x158a <malloc+0xee>
    157a:	2d b7       	in	r18, 0x3d	; 61
    157c:	3e b7       	in	r19, 0x3e	; 62
    157e:	40 91 04 01 	lds	r20, 0x0104
    1582:	50 91 05 01 	lds	r21, 0x0105
    1586:	24 1b       	sub	r18, r20
    1588:	35 0b       	sbc	r19, r21
    158a:	e0 91 0e 03 	lds	r30, 0x030E
    158e:	f0 91 0f 03 	lds	r31, 0x030F
    1592:	e2 17       	cp	r30, r18
    1594:	f3 07       	cpc	r31, r19
    1596:	a0 f4       	brcc	.+40     	; 0x15c0 <malloc+0x124>
    1598:	2e 1b       	sub	r18, r30
    159a:	3f 0b       	sbc	r19, r31
    159c:	28 17       	cp	r18, r24
    159e:	39 07       	cpc	r19, r25
    15a0:	78 f0       	brcs	.+30     	; 0x15c0 <malloc+0x124>
    15a2:	ac 01       	movw	r20, r24
    15a4:	4e 5f       	subi	r20, 0xFE	; 254
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	24 17       	cp	r18, r20
    15aa:	35 07       	cpc	r19, r21
    15ac:	48 f0       	brcs	.+18     	; 0x15c0 <malloc+0x124>
    15ae:	4e 0f       	add	r20, r30
    15b0:	5f 1f       	adc	r21, r31
    15b2:	50 93 0f 03 	sts	0x030F, r21
    15b6:	40 93 0e 03 	sts	0x030E, r20
    15ba:	81 93       	st	Z+, r24
    15bc:	91 93       	st	Z+, r25
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <malloc+0x128>
    15c0:	e0 e0       	ldi	r30, 0x00	; 0
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	cf 01       	movw	r24, r30
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret

000015cc <free>:
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <free+0xa>
    15d4:	87 c0       	rjmp	.+270    	; 0x16e4 <free+0x118>
    15d6:	fc 01       	movw	r30, r24
    15d8:	32 97       	sbiw	r30, 0x02	; 2
    15da:	13 82       	std	Z+3, r1	; 0x03
    15dc:	12 82       	std	Z+2, r1	; 0x02
    15de:	c0 91 10 03 	lds	r28, 0x0310
    15e2:	d0 91 11 03 	lds	r29, 0x0311
    15e6:	20 97       	sbiw	r28, 0x00	; 0
    15e8:	81 f4       	brne	.+32     	; 0x160a <free+0x3e>
    15ea:	20 81       	ld	r18, Z
    15ec:	31 81       	ldd	r19, Z+1	; 0x01
    15ee:	28 0f       	add	r18, r24
    15f0:	39 1f       	adc	r19, r25
    15f2:	80 91 0e 03 	lds	r24, 0x030E
    15f6:	90 91 0f 03 	lds	r25, 0x030F
    15fa:	82 17       	cp	r24, r18
    15fc:	93 07       	cpc	r25, r19
    15fe:	79 f5       	brne	.+94     	; 0x165e <free+0x92>
    1600:	f0 93 0f 03 	sts	0x030F, r31
    1604:	e0 93 0e 03 	sts	0x030E, r30
    1608:	6d c0       	rjmp	.+218    	; 0x16e4 <free+0x118>
    160a:	de 01       	movw	r26, r28
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ae 17       	cp	r26, r30
    1612:	bf 07       	cpc	r27, r31
    1614:	50 f4       	brcc	.+20     	; 0x162a <free+0x5e>
    1616:	12 96       	adiw	r26, 0x02	; 2
    1618:	4d 91       	ld	r20, X+
    161a:	5c 91       	ld	r21, X
    161c:	13 97       	sbiw	r26, 0x03	; 3
    161e:	9d 01       	movw	r18, r26
    1620:	41 15       	cp	r20, r1
    1622:	51 05       	cpc	r21, r1
    1624:	09 f1       	breq	.+66     	; 0x1668 <free+0x9c>
    1626:	da 01       	movw	r26, r20
    1628:	f3 cf       	rjmp	.-26     	; 0x1610 <free+0x44>
    162a:	b3 83       	std	Z+3, r27	; 0x03
    162c:	a2 83       	std	Z+2, r26	; 0x02
    162e:	40 81       	ld	r20, Z
    1630:	51 81       	ldd	r21, Z+1	; 0x01
    1632:	84 0f       	add	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	8a 17       	cp	r24, r26
    1638:	9b 07       	cpc	r25, r27
    163a:	71 f4       	brne	.+28     	; 0x1658 <free+0x8c>
    163c:	8d 91       	ld	r24, X+
    163e:	9c 91       	ld	r25, X
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	84 0f       	add	r24, r20
    1644:	95 1f       	adc	r25, r21
    1646:	02 96       	adiw	r24, 0x02	; 2
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	12 96       	adiw	r26, 0x02	; 2
    164e:	8d 91       	ld	r24, X+
    1650:	9c 91       	ld	r25, X
    1652:	13 97       	sbiw	r26, 0x03	; 3
    1654:	93 83       	std	Z+3, r25	; 0x03
    1656:	82 83       	std	Z+2, r24	; 0x02
    1658:	21 15       	cp	r18, r1
    165a:	31 05       	cpc	r19, r1
    165c:	29 f4       	brne	.+10     	; 0x1668 <free+0x9c>
    165e:	f0 93 11 03 	sts	0x0311, r31
    1662:	e0 93 10 03 	sts	0x0310, r30
    1666:	3e c0       	rjmp	.+124    	; 0x16e4 <free+0x118>
    1668:	d9 01       	movw	r26, r18
    166a:	13 96       	adiw	r26, 0x03	; 3
    166c:	fc 93       	st	X, r31
    166e:	ee 93       	st	-X, r30
    1670:	12 97       	sbiw	r26, 0x02	; 2
    1672:	4d 91       	ld	r20, X+
    1674:	5d 91       	ld	r21, X+
    1676:	a4 0f       	add	r26, r20
    1678:	b5 1f       	adc	r27, r21
    167a:	ea 17       	cp	r30, r26
    167c:	fb 07       	cpc	r31, r27
    167e:	79 f4       	brne	.+30     	; 0x169e <free+0xd2>
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
    1684:	84 0f       	add	r24, r20
    1686:	95 1f       	adc	r25, r21
    1688:	02 96       	adiw	r24, 0x02	; 2
    168a:	d9 01       	movw	r26, r18
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	9c 93       	st	X, r25
    1690:	8e 93       	st	-X, r24
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	13 96       	adiw	r26, 0x03	; 3
    1698:	9c 93       	st	X, r25
    169a:	8e 93       	st	-X, r24
    169c:	12 97       	sbiw	r26, 0x02	; 2
    169e:	e0 e0       	ldi	r30, 0x00	; 0
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	9b 81       	ldd	r25, Y+3	; 0x03
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <free+0xe4>
    16aa:	fe 01       	movw	r30, r28
    16ac:	ec 01       	movw	r28, r24
    16ae:	f9 cf       	rjmp	.-14     	; 0x16a2 <free+0xd6>
    16b0:	ce 01       	movw	r24, r28
    16b2:	02 96       	adiw	r24, 0x02	; 2
    16b4:	28 81       	ld	r18, Y
    16b6:	39 81       	ldd	r19, Y+1	; 0x01
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	20 91 0e 03 	lds	r18, 0x030E
    16c0:	30 91 0f 03 	lds	r19, 0x030F
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	69 f4       	brne	.+26     	; 0x16e4 <free+0x118>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	29 f4       	brne	.+10     	; 0x16d8 <free+0x10c>
    16ce:	10 92 11 03 	sts	0x0311, r1
    16d2:	10 92 10 03 	sts	0x0310, r1
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <free+0x110>
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	d0 93 0f 03 	sts	0x030F, r29
    16e0:	c0 93 0e 03 	sts	0x030E, r28
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <memset>:
    16ea:	dc 01       	movw	r26, r24
    16ec:	01 c0       	rjmp	.+2      	; 0x16f0 <memset+0x6>
    16ee:	6d 93       	st	X+, r22
    16f0:	41 50       	subi	r20, 0x01	; 1
    16f2:	50 40       	sbci	r21, 0x00	; 0
    16f4:	e0 f7       	brcc	.-8      	; 0x16ee <memset+0x4>
    16f6:	08 95       	ret

000016f8 <strcmp>:
    16f8:	fb 01       	movw	r30, r22
    16fa:	dc 01       	movw	r26, r24
    16fc:	8d 91       	ld	r24, X+
    16fe:	01 90       	ld	r0, Z+
    1700:	80 19       	sub	r24, r0
    1702:	01 10       	cpse	r0, r1
    1704:	d9 f3       	breq	.-10     	; 0x16fc <strcmp+0x4>
    1706:	99 0b       	sbc	r25, r25
    1708:	08 95       	ret

0000170a <strcpy>:
    170a:	fb 01       	movw	r30, r22
    170c:	dc 01       	movw	r26, r24
    170e:	01 90       	ld	r0, Z+
    1710:	0d 92       	st	X+, r0
    1712:	00 20       	and	r0, r0
    1714:	e1 f7       	brne	.-8      	; 0x170e <strcpy+0x4>
    1716:	08 95       	ret

00001718 <vsnprintf>:
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2e 97       	sbiw	r28, 0x0e	; 14
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	8c 01       	movw	r16, r24
    1732:	ca 01       	movw	r24, r20
    1734:	46 e0       	ldi	r20, 0x06	; 6
    1736:	4c 83       	std	Y+4, r20	; 0x04
    1738:	1a 83       	std	Y+2, r17	; 0x02
    173a:	09 83       	std	Y+1, r16	; 0x01
    173c:	77 ff       	sbrs	r23, 7
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vsnprintf+0x2c>
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e8       	ldi	r23, 0x80	; 128
    1744:	61 50       	subi	r22, 0x01	; 1
    1746:	71 09       	sbc	r23, r1
    1748:	7e 83       	std	Y+6, r23	; 0x06
    174a:	6d 83       	std	Y+5, r22	; 0x05
    174c:	a9 01       	movw	r20, r18
    174e:	bc 01       	movw	r22, r24
    1750:	ce 01       	movw	r24, r28
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	19 d0       	rcall	.+50     	; 0x1788 <vfprintf>
    1756:	4d 81       	ldd	r20, Y+5	; 0x05
    1758:	5e 81       	ldd	r21, Y+6	; 0x06
    175a:	57 fd       	sbrc	r21, 7
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <vsnprintf+0x5a>
    175e:	2f 81       	ldd	r18, Y+7	; 0x07
    1760:	38 85       	ldd	r19, Y+8	; 0x08
    1762:	42 17       	cp	r20, r18
    1764:	53 07       	cpc	r21, r19
    1766:	0c f4       	brge	.+2      	; 0x176a <vsnprintf+0x52>
    1768:	9a 01       	movw	r18, r20
    176a:	f8 01       	movw	r30, r16
    176c:	e2 0f       	add	r30, r18
    176e:	f3 1f       	adc	r31, r19
    1770:	10 82       	st	Z, r1
    1772:	2e 96       	adiw	r28, 0x0e	; 14
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <vfprintf>:
    1788:	2f 92       	push	r2
    178a:	3f 92       	push	r3
    178c:	4f 92       	push	r4
    178e:	5f 92       	push	r5
    1790:	6f 92       	push	r6
    1792:	7f 92       	push	r7
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	2c 97       	sbiw	r28, 0x0c	; 12
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	7c 01       	movw	r14, r24
    17be:	6b 01       	movw	r12, r22
    17c0:	8a 01       	movw	r16, r20
    17c2:	fc 01       	movw	r30, r24
    17c4:	17 82       	std	Z+7, r1	; 0x07
    17c6:	16 82       	std	Z+6, r1	; 0x06
    17c8:	83 81       	ldd	r24, Z+3	; 0x03
    17ca:	81 ff       	sbrs	r24, 1
    17cc:	b0 c1       	rjmp	.+864    	; 0x1b2e <vfprintf+0x3a6>
    17ce:	ce 01       	movw	r24, r28
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	4c 01       	movw	r8, r24
    17d4:	f7 01       	movw	r30, r14
    17d6:	93 81       	ldd	r25, Z+3	; 0x03
    17d8:	f6 01       	movw	r30, r12
    17da:	93 fd       	sbrc	r25, 3
    17dc:	85 91       	lpm	r24, Z+
    17de:	93 ff       	sbrs	r25, 3
    17e0:	81 91       	ld	r24, Z+
    17e2:	6f 01       	movw	r12, r30
    17e4:	88 23       	and	r24, r24
    17e6:	09 f4       	brne	.+2      	; 0x17ea <vfprintf+0x62>
    17e8:	9e c1       	rjmp	.+828    	; 0x1b26 <vfprintf+0x39e>
    17ea:	85 32       	cpi	r24, 0x25	; 37
    17ec:	39 f4       	brne	.+14     	; 0x17fc <vfprintf+0x74>
    17ee:	93 fd       	sbrc	r25, 3
    17f0:	85 91       	lpm	r24, Z+
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	81 91       	ld	r24, Z+
    17f6:	6f 01       	movw	r12, r30
    17f8:	85 32       	cpi	r24, 0x25	; 37
    17fa:	21 f4       	brne	.+8      	; 0x1804 <vfprintf+0x7c>
    17fc:	b7 01       	movw	r22, r14
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	c7 d1       	rcall	.+910    	; 0x1b90 <fputc>
    1802:	e8 cf       	rjmp	.-48     	; 0x17d4 <vfprintf+0x4c>
    1804:	51 2c       	mov	r5, r1
    1806:	31 2c       	mov	r3, r1
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	20 32       	cpi	r18, 0x20	; 32
    180c:	a0 f4       	brcc	.+40     	; 0x1836 <vfprintf+0xae>
    180e:	8b 32       	cpi	r24, 0x2B	; 43
    1810:	69 f0       	breq	.+26     	; 0x182c <vfprintf+0xa4>
    1812:	30 f4       	brcc	.+12     	; 0x1820 <vfprintf+0x98>
    1814:	80 32       	cpi	r24, 0x20	; 32
    1816:	59 f0       	breq	.+22     	; 0x182e <vfprintf+0xa6>
    1818:	83 32       	cpi	r24, 0x23	; 35
    181a:	69 f4       	brne	.+26     	; 0x1836 <vfprintf+0xae>
    181c:	20 61       	ori	r18, 0x10	; 16
    181e:	2c c0       	rjmp	.+88     	; 0x1878 <vfprintf+0xf0>
    1820:	8d 32       	cpi	r24, 0x2D	; 45
    1822:	39 f0       	breq	.+14     	; 0x1832 <vfprintf+0xaa>
    1824:	80 33       	cpi	r24, 0x30	; 48
    1826:	39 f4       	brne	.+14     	; 0x1836 <vfprintf+0xae>
    1828:	21 60       	ori	r18, 0x01	; 1
    182a:	26 c0       	rjmp	.+76     	; 0x1878 <vfprintf+0xf0>
    182c:	22 60       	ori	r18, 0x02	; 2
    182e:	24 60       	ori	r18, 0x04	; 4
    1830:	23 c0       	rjmp	.+70     	; 0x1878 <vfprintf+0xf0>
    1832:	28 60       	ori	r18, 0x08	; 8
    1834:	21 c0       	rjmp	.+66     	; 0x1878 <vfprintf+0xf0>
    1836:	27 fd       	sbrc	r18, 7
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <vfprintf+0x100>
    183a:	30 ed       	ldi	r19, 0xD0	; 208
    183c:	38 0f       	add	r19, r24
    183e:	3a 30       	cpi	r19, 0x0A	; 10
    1840:	78 f4       	brcc	.+30     	; 0x1860 <vfprintf+0xd8>
    1842:	26 ff       	sbrs	r18, 6
    1844:	06 c0       	rjmp	.+12     	; 0x1852 <vfprintf+0xca>
    1846:	fa e0       	ldi	r31, 0x0A	; 10
    1848:	5f 9e       	mul	r5, r31
    184a:	30 0d       	add	r19, r0
    184c:	11 24       	eor	r1, r1
    184e:	53 2e       	mov	r5, r19
    1850:	13 c0       	rjmp	.+38     	; 0x1878 <vfprintf+0xf0>
    1852:	8a e0       	ldi	r24, 0x0A	; 10
    1854:	38 9e       	mul	r3, r24
    1856:	30 0d       	add	r19, r0
    1858:	11 24       	eor	r1, r1
    185a:	33 2e       	mov	r3, r19
    185c:	20 62       	ori	r18, 0x20	; 32
    185e:	0c c0       	rjmp	.+24     	; 0x1878 <vfprintf+0xf0>
    1860:	8e 32       	cpi	r24, 0x2E	; 46
    1862:	21 f4       	brne	.+8      	; 0x186c <vfprintf+0xe4>
    1864:	26 fd       	sbrc	r18, 6
    1866:	5f c1       	rjmp	.+702    	; 0x1b26 <vfprintf+0x39e>
    1868:	20 64       	ori	r18, 0x40	; 64
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0xf0>
    186c:	8c 36       	cpi	r24, 0x6C	; 108
    186e:	11 f4       	brne	.+4      	; 0x1874 <vfprintf+0xec>
    1870:	20 68       	ori	r18, 0x80	; 128
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0xf0>
    1874:	88 36       	cpi	r24, 0x68	; 104
    1876:	41 f4       	brne	.+16     	; 0x1888 <vfprintf+0x100>
    1878:	f6 01       	movw	r30, r12
    187a:	93 fd       	sbrc	r25, 3
    187c:	85 91       	lpm	r24, Z+
    187e:	93 ff       	sbrs	r25, 3
    1880:	81 91       	ld	r24, Z+
    1882:	6f 01       	movw	r12, r30
    1884:	81 11       	cpse	r24, r1
    1886:	c1 cf       	rjmp	.-126    	; 0x180a <vfprintf+0x82>
    1888:	98 2f       	mov	r25, r24
    188a:	9f 7d       	andi	r25, 0xDF	; 223
    188c:	95 54       	subi	r25, 0x45	; 69
    188e:	93 30       	cpi	r25, 0x03	; 3
    1890:	28 f4       	brcc	.+10     	; 0x189c <vfprintf+0x114>
    1892:	0c 5f       	subi	r16, 0xFC	; 252
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	ff e3       	ldi	r31, 0x3F	; 63
    1898:	f9 83       	std	Y+1, r31	; 0x01
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <vfprintf+0x12e>
    189c:	83 36       	cpi	r24, 0x63	; 99
    189e:	31 f0       	breq	.+12     	; 0x18ac <vfprintf+0x124>
    18a0:	83 37       	cpi	r24, 0x73	; 115
    18a2:	71 f0       	breq	.+28     	; 0x18c0 <vfprintf+0x138>
    18a4:	83 35       	cpi	r24, 0x53	; 83
    18a6:	09 f0       	breq	.+2      	; 0x18aa <vfprintf+0x122>
    18a8:	57 c0       	rjmp	.+174    	; 0x1958 <vfprintf+0x1d0>
    18aa:	21 c0       	rjmp	.+66     	; 0x18ee <vfprintf+0x166>
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 81       	ld	r24, Z
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	0e 5f       	subi	r16, 0xFE	; 254
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	44 24       	eor	r4, r4
    18b8:	43 94       	inc	r4
    18ba:	51 2c       	mov	r5, r1
    18bc:	54 01       	movw	r10, r8
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <vfprintf+0x160>
    18c0:	38 01       	movw	r6, r16
    18c2:	f2 e0       	ldi	r31, 0x02	; 2
    18c4:	6f 0e       	add	r6, r31
    18c6:	71 1c       	adc	r7, r1
    18c8:	f8 01       	movw	r30, r16
    18ca:	a0 80       	ld	r10, Z
    18cc:	b1 80       	ldd	r11, Z+1	; 0x01
    18ce:	26 ff       	sbrs	r18, 6
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <vfprintf+0x150>
    18d2:	65 2d       	mov	r22, r5
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x154>
    18d8:	6f ef       	ldi	r22, 0xFF	; 255
    18da:	7f ef       	ldi	r23, 0xFF	; 255
    18dc:	c5 01       	movw	r24, r10
    18de:	2c 87       	std	Y+12, r18	; 0x0c
    18e0:	4c d1       	rcall	.+664    	; 0x1b7a <strnlen>
    18e2:	2c 01       	movw	r4, r24
    18e4:	83 01       	movw	r16, r6
    18e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e8:	2f 77       	andi	r18, 0x7F	; 127
    18ea:	22 2e       	mov	r2, r18
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <vfprintf+0x192>
    18ee:	38 01       	movw	r6, r16
    18f0:	f2 e0       	ldi	r31, 0x02	; 2
    18f2:	6f 0e       	add	r6, r31
    18f4:	71 1c       	adc	r7, r1
    18f6:	f8 01       	movw	r30, r16
    18f8:	a0 80       	ld	r10, Z
    18fa:	b1 80       	ldd	r11, Z+1	; 0x01
    18fc:	26 ff       	sbrs	r18, 6
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <vfprintf+0x17e>
    1900:	65 2d       	mov	r22, r5
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x182>
    1906:	6f ef       	ldi	r22, 0xFF	; 255
    1908:	7f ef       	ldi	r23, 0xFF	; 255
    190a:	c5 01       	movw	r24, r10
    190c:	2c 87       	std	Y+12, r18	; 0x0c
    190e:	2a d1       	rcall	.+596    	; 0x1b64 <strnlen_P>
    1910:	2c 01       	movw	r4, r24
    1912:	2c 85       	ldd	r18, Y+12	; 0x0c
    1914:	20 68       	ori	r18, 0x80	; 128
    1916:	22 2e       	mov	r2, r18
    1918:	83 01       	movw	r16, r6
    191a:	23 fc       	sbrc	r2, 3
    191c:	19 c0       	rjmp	.+50     	; 0x1950 <vfprintf+0x1c8>
    191e:	83 2d       	mov	r24, r3
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	48 16       	cp	r4, r24
    1924:	59 06       	cpc	r5, r25
    1926:	a0 f4       	brcc	.+40     	; 0x1950 <vfprintf+0x1c8>
    1928:	b7 01       	movw	r22, r14
    192a:	80 e2       	ldi	r24, 0x20	; 32
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	30 d1       	rcall	.+608    	; 0x1b90 <fputc>
    1930:	3a 94       	dec	r3
    1932:	f5 cf       	rjmp	.-22     	; 0x191e <vfprintf+0x196>
    1934:	f5 01       	movw	r30, r10
    1936:	27 fc       	sbrc	r2, 7
    1938:	85 91       	lpm	r24, Z+
    193a:	27 fe       	sbrs	r2, 7
    193c:	81 91       	ld	r24, Z+
    193e:	5f 01       	movw	r10, r30
    1940:	b7 01       	movw	r22, r14
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	25 d1       	rcall	.+586    	; 0x1b90 <fputc>
    1946:	31 10       	cpse	r3, r1
    1948:	3a 94       	dec	r3
    194a:	f1 e0       	ldi	r31, 0x01	; 1
    194c:	4f 1a       	sub	r4, r31
    194e:	51 08       	sbc	r5, r1
    1950:	41 14       	cp	r4, r1
    1952:	51 04       	cpc	r5, r1
    1954:	79 f7       	brne	.-34     	; 0x1934 <vfprintf+0x1ac>
    1956:	de c0       	rjmp	.+444    	; 0x1b14 <vfprintf+0x38c>
    1958:	84 36       	cpi	r24, 0x64	; 100
    195a:	11 f0       	breq	.+4      	; 0x1960 <vfprintf+0x1d8>
    195c:	89 36       	cpi	r24, 0x69	; 105
    195e:	31 f5       	brne	.+76     	; 0x19ac <vfprintf+0x224>
    1960:	f8 01       	movw	r30, r16
    1962:	27 ff       	sbrs	r18, 7
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <vfprintf+0x1ec>
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	0c 5f       	subi	r16, 0xFC	; 252
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	08 c0       	rjmp	.+16     	; 0x1984 <vfprintf+0x1fc>
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	88 27       	eor	r24, r24
    197a:	77 fd       	sbrc	r23, 7
    197c:	80 95       	com	r24
    197e:	98 2f       	mov	r25, r24
    1980:	0e 5f       	subi	r16, 0xFE	; 254
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	2f 76       	andi	r18, 0x6F	; 111
    1986:	b2 2e       	mov	r11, r18
    1988:	97 ff       	sbrs	r25, 7
    198a:	09 c0       	rjmp	.+18     	; 0x199e <vfprintf+0x216>
    198c:	90 95       	com	r25
    198e:	80 95       	com	r24
    1990:	70 95       	com	r23
    1992:	61 95       	neg	r22
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	8f 4f       	sbci	r24, 0xFF	; 255
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	20 68       	ori	r18, 0x80	; 128
    199c:	b2 2e       	mov	r11, r18
    199e:	2a e0       	ldi	r18, 0x0A	; 10
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	a4 01       	movw	r20, r8
    19a4:	27 d1       	rcall	.+590    	; 0x1bf4 <__ultoa_invert>
    19a6:	a8 2e       	mov	r10, r24
    19a8:	a8 18       	sub	r10, r8
    19aa:	43 c0       	rjmp	.+134    	; 0x1a32 <vfprintf+0x2aa>
    19ac:	85 37       	cpi	r24, 0x75	; 117
    19ae:	29 f4       	brne	.+10     	; 0x19ba <vfprintf+0x232>
    19b0:	2f 7e       	andi	r18, 0xEF	; 239
    19b2:	b2 2e       	mov	r11, r18
    19b4:	2a e0       	ldi	r18, 0x0A	; 10
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	25 c0       	rjmp	.+74     	; 0x1a04 <vfprintf+0x27c>
    19ba:	f2 2f       	mov	r31, r18
    19bc:	f9 7f       	andi	r31, 0xF9	; 249
    19be:	bf 2e       	mov	r11, r31
    19c0:	8f 36       	cpi	r24, 0x6F	; 111
    19c2:	c1 f0       	breq	.+48     	; 0x19f4 <vfprintf+0x26c>
    19c4:	18 f4       	brcc	.+6      	; 0x19cc <vfprintf+0x244>
    19c6:	88 35       	cpi	r24, 0x58	; 88
    19c8:	79 f0       	breq	.+30     	; 0x19e8 <vfprintf+0x260>
    19ca:	ad c0       	rjmp	.+346    	; 0x1b26 <vfprintf+0x39e>
    19cc:	80 37       	cpi	r24, 0x70	; 112
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <vfprintf+0x24e>
    19d0:	88 37       	cpi	r24, 0x78	; 120
    19d2:	21 f0       	breq	.+8      	; 0x19dc <vfprintf+0x254>
    19d4:	a8 c0       	rjmp	.+336    	; 0x1b26 <vfprintf+0x39e>
    19d6:	2f 2f       	mov	r18, r31
    19d8:	20 61       	ori	r18, 0x10	; 16
    19da:	b2 2e       	mov	r11, r18
    19dc:	b4 fe       	sbrs	r11, 4
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <vfprintf+0x272>
    19e0:	8b 2d       	mov	r24, r11
    19e2:	84 60       	ori	r24, 0x04	; 4
    19e4:	b8 2e       	mov	r11, r24
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <vfprintf+0x272>
    19e8:	24 ff       	sbrs	r18, 4
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <vfprintf+0x278>
    19ec:	9f 2f       	mov	r25, r31
    19ee:	96 60       	ori	r25, 0x06	; 6
    19f0:	b9 2e       	mov	r11, r25
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <vfprintf+0x278>
    19f4:	28 e0       	ldi	r18, 0x08	; 8
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	05 c0       	rjmp	.+10     	; 0x1a04 <vfprintf+0x27c>
    19fa:	20 e1       	ldi	r18, 0x10	; 16
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <vfprintf+0x27c>
    1a00:	20 e1       	ldi	r18, 0x10	; 16
    1a02:	32 e0       	ldi	r19, 0x02	; 2
    1a04:	f8 01       	movw	r30, r16
    1a06:	b7 fe       	sbrs	r11, 7
    1a08:	07 c0       	rjmp	.+14     	; 0x1a18 <vfprintf+0x290>
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	0c 5f       	subi	r16, 0xFC	; 252
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	06 c0       	rjmp	.+12     	; 0x1a24 <vfprintf+0x29c>
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 5f       	subi	r16, 0xFE	; 254
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	a4 01       	movw	r20, r8
    1a26:	e6 d0       	rcall	.+460    	; 0x1bf4 <__ultoa_invert>
    1a28:	a8 2e       	mov	r10, r24
    1a2a:	a8 18       	sub	r10, r8
    1a2c:	fb 2d       	mov	r31, r11
    1a2e:	ff 77       	andi	r31, 0x7F	; 127
    1a30:	bf 2e       	mov	r11, r31
    1a32:	b6 fe       	sbrs	r11, 6
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <vfprintf+0x2c4>
    1a36:	2b 2d       	mov	r18, r11
    1a38:	2e 7f       	andi	r18, 0xFE	; 254
    1a3a:	a5 14       	cp	r10, r5
    1a3c:	50 f4       	brcc	.+20     	; 0x1a52 <vfprintf+0x2ca>
    1a3e:	b4 fe       	sbrs	r11, 4
    1a40:	0a c0       	rjmp	.+20     	; 0x1a56 <vfprintf+0x2ce>
    1a42:	b2 fc       	sbrc	r11, 2
    1a44:	08 c0       	rjmp	.+16     	; 0x1a56 <vfprintf+0x2ce>
    1a46:	2b 2d       	mov	r18, r11
    1a48:	2e 7e       	andi	r18, 0xEE	; 238
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <vfprintf+0x2ce>
    1a4c:	7a 2c       	mov	r7, r10
    1a4e:	2b 2d       	mov	r18, r11
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <vfprintf+0x2d0>
    1a52:	7a 2c       	mov	r7, r10
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <vfprintf+0x2d0>
    1a56:	75 2c       	mov	r7, r5
    1a58:	24 ff       	sbrs	r18, 4
    1a5a:	0d c0       	rjmp	.+26     	; 0x1a76 <vfprintf+0x2ee>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ea 0d       	add	r30, r10
    1a60:	f1 1d       	adc	r31, r1
    1a62:	80 81       	ld	r24, Z
    1a64:	80 33       	cpi	r24, 0x30	; 48
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <vfprintf+0x2e4>
    1a68:	29 7e       	andi	r18, 0xE9	; 233
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <vfprintf+0x2f6>
    1a6c:	22 ff       	sbrs	r18, 2
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <vfprintf+0x2f4>
    1a70:	73 94       	inc	r7
    1a72:	73 94       	inc	r7
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <vfprintf+0x2f6>
    1a76:	82 2f       	mov	r24, r18
    1a78:	86 78       	andi	r24, 0x86	; 134
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <vfprintf+0x2f6>
    1a7c:	73 94       	inc	r7
    1a7e:	23 fd       	sbrc	r18, 3
    1a80:	12 c0       	rjmp	.+36     	; 0x1aa6 <vfprintf+0x31e>
    1a82:	20 ff       	sbrs	r18, 0
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <vfprintf+0x30a>
    1a86:	5a 2c       	mov	r5, r10
    1a88:	73 14       	cp	r7, r3
    1a8a:	18 f4       	brcc	.+6      	; 0x1a92 <vfprintf+0x30a>
    1a8c:	53 0c       	add	r5, r3
    1a8e:	57 18       	sub	r5, r7
    1a90:	73 2c       	mov	r7, r3
    1a92:	73 14       	cp	r7, r3
    1a94:	60 f4       	brcc	.+24     	; 0x1aae <vfprintf+0x326>
    1a96:	b7 01       	movw	r22, r14
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	2c 87       	std	Y+12, r18	; 0x0c
    1a9e:	78 d0       	rcall	.+240    	; 0x1b90 <fputc>
    1aa0:	73 94       	inc	r7
    1aa2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa4:	f6 cf       	rjmp	.-20     	; 0x1a92 <vfprintf+0x30a>
    1aa6:	73 14       	cp	r7, r3
    1aa8:	10 f4       	brcc	.+4      	; 0x1aae <vfprintf+0x326>
    1aaa:	37 18       	sub	r3, r7
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <vfprintf+0x328>
    1aae:	31 2c       	mov	r3, r1
    1ab0:	24 ff       	sbrs	r18, 4
    1ab2:	11 c0       	rjmp	.+34     	; 0x1ad6 <vfprintf+0x34e>
    1ab4:	b7 01       	movw	r22, r14
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	2c 87       	std	Y+12, r18	; 0x0c
    1abc:	69 d0       	rcall	.+210    	; 0x1b90 <fputc>
    1abe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac0:	22 ff       	sbrs	r18, 2
    1ac2:	16 c0       	rjmp	.+44     	; 0x1af0 <vfprintf+0x368>
    1ac4:	21 ff       	sbrs	r18, 1
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <vfprintf+0x346>
    1ac8:	88 e5       	ldi	r24, 0x58	; 88
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x34a>
    1ace:	88 e7       	ldi	r24, 0x78	; 120
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	0c c0       	rjmp	.+24     	; 0x1aee <vfprintf+0x366>
    1ad6:	82 2f       	mov	r24, r18
    1ad8:	86 78       	andi	r24, 0x86	; 134
    1ada:	51 f0       	breq	.+20     	; 0x1af0 <vfprintf+0x368>
    1adc:	21 fd       	sbrc	r18, 1
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0x35c>
    1ae0:	80 e2       	ldi	r24, 0x20	; 32
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x35e>
    1ae4:	8b e2       	ldi	r24, 0x2B	; 43
    1ae6:	27 fd       	sbrc	r18, 7
    1ae8:	8d e2       	ldi	r24, 0x2D	; 45
    1aea:	b7 01       	movw	r22, r14
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	50 d0       	rcall	.+160    	; 0x1b90 <fputc>
    1af0:	a5 14       	cp	r10, r5
    1af2:	30 f4       	brcc	.+12     	; 0x1b00 <vfprintf+0x378>
    1af4:	b7 01       	movw	r22, r14
    1af6:	80 e3       	ldi	r24, 0x30	; 48
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	4a d0       	rcall	.+148    	; 0x1b90 <fputc>
    1afc:	5a 94       	dec	r5
    1afe:	f8 cf       	rjmp	.-16     	; 0x1af0 <vfprintf+0x368>
    1b00:	aa 94       	dec	r10
    1b02:	f4 01       	movw	r30, r8
    1b04:	ea 0d       	add	r30, r10
    1b06:	f1 1d       	adc	r31, r1
    1b08:	80 81       	ld	r24, Z
    1b0a:	b7 01       	movw	r22, r14
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	40 d0       	rcall	.+128    	; 0x1b90 <fputc>
    1b10:	a1 10       	cpse	r10, r1
    1b12:	f6 cf       	rjmp	.-20     	; 0x1b00 <vfprintf+0x378>
    1b14:	33 20       	and	r3, r3
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <vfprintf+0x392>
    1b18:	5d ce       	rjmp	.-838    	; 0x17d4 <vfprintf+0x4c>
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	80 e2       	ldi	r24, 0x20	; 32
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	37 d0       	rcall	.+110    	; 0x1b90 <fputc>
    1b22:	3a 94       	dec	r3
    1b24:	f7 cf       	rjmp	.-18     	; 0x1b14 <vfprintf+0x38c>
    1b26:	f7 01       	movw	r30, r14
    1b28:	86 81       	ldd	r24, Z+6	; 0x06
    1b2a:	97 81       	ldd	r25, Z+7	; 0x07
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <vfprintf+0x3aa>
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	2c 96       	adiw	r28, 0x0c	; 12
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	7f 90       	pop	r7
    1b58:	6f 90       	pop	r6
    1b5a:	5f 90       	pop	r5
    1b5c:	4f 90       	pop	r4
    1b5e:	3f 90       	pop	r3
    1b60:	2f 90       	pop	r2
    1b62:	08 95       	ret

00001b64 <strnlen_P>:
    1b64:	fc 01       	movw	r30, r24
    1b66:	05 90       	lpm	r0, Z+
    1b68:	61 50       	subi	r22, 0x01	; 1
    1b6a:	70 40       	sbci	r23, 0x00	; 0
    1b6c:	01 10       	cpse	r0, r1
    1b6e:	d8 f7       	brcc	.-10     	; 0x1b66 <strnlen_P+0x2>
    1b70:	80 95       	com	r24
    1b72:	90 95       	com	r25
    1b74:	8e 0f       	add	r24, r30
    1b76:	9f 1f       	adc	r25, r31
    1b78:	08 95       	ret

00001b7a <strnlen>:
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	61 50       	subi	r22, 0x01	; 1
    1b7e:	70 40       	sbci	r23, 0x00	; 0
    1b80:	01 90       	ld	r0, Z+
    1b82:	01 10       	cpse	r0, r1
    1b84:	d8 f7       	brcc	.-10     	; 0x1b7c <strnlen+0x2>
    1b86:	80 95       	com	r24
    1b88:	90 95       	com	r25
    1b8a:	8e 0f       	add	r24, r30
    1b8c:	9f 1f       	adc	r25, r31
    1b8e:	08 95       	ret

00001b90 <fputc>:
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	18 2f       	mov	r17, r24
    1b9a:	09 2f       	mov	r16, r25
    1b9c:	eb 01       	movw	r28, r22
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 fd       	sbrc	r24, 1
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <fputc+0x1a>
    1ba4:	8f ef       	ldi	r24, 0xFF	; 255
    1ba6:	9f ef       	ldi	r25, 0xFF	; 255
    1ba8:	20 c0       	rjmp	.+64     	; 0x1bea <fputc+0x5a>
    1baa:	82 ff       	sbrs	r24, 2
    1bac:	10 c0       	rjmp	.+32     	; 0x1bce <fputc+0x3e>
    1bae:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb0:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	42 17       	cp	r20, r18
    1bb8:	53 07       	cpc	r21, r19
    1bba:	7c f4       	brge	.+30     	; 0x1bda <fputc+0x4a>
    1bbc:	e8 81       	ld	r30, Y
    1bbe:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc0:	9f 01       	movw	r18, r30
    1bc2:	2f 5f       	subi	r18, 0xFF	; 255
    1bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc6:	39 83       	std	Y+1, r19	; 0x01
    1bc8:	28 83       	st	Y, r18
    1bca:	10 83       	st	Z, r17
    1bcc:	06 c0       	rjmp	.+12     	; 0x1bda <fputc+0x4a>
    1bce:	e8 85       	ldd	r30, Y+8	; 0x08
    1bd0:	f9 85       	ldd	r31, Y+9	; 0x09
    1bd2:	81 2f       	mov	r24, r17
    1bd4:	09 95       	icall
    1bd6:	89 2b       	or	r24, r25
    1bd8:	29 f7       	brne	.-54     	; 0x1ba4 <fputc+0x14>
    1bda:	2e 81       	ldd	r18, Y+6	; 0x06
    1bdc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bde:	2f 5f       	subi	r18, 0xFF	; 255
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	3f 83       	std	Y+7, r19	; 0x07
    1be4:	2e 83       	std	Y+6, r18	; 0x06
    1be6:	81 2f       	mov	r24, r17
    1be8:	90 2f       	mov	r25, r16
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	08 95       	ret

00001bf4 <__ultoa_invert>:
    1bf4:	fa 01       	movw	r30, r20
    1bf6:	aa 27       	eor	r26, r26
    1bf8:	28 30       	cpi	r18, 0x08	; 8
    1bfa:	51 f1       	breq	.+84     	; 0x1c50 <__ultoa_invert+0x5c>
    1bfc:	20 31       	cpi	r18, 0x10	; 16
    1bfe:	81 f1       	breq	.+96     	; 0x1c60 <__ultoa_invert+0x6c>
    1c00:	e8 94       	clt
    1c02:	6f 93       	push	r22
    1c04:	6e 7f       	andi	r22, 0xFE	; 254
    1c06:	6e 5f       	subi	r22, 0xFE	; 254
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	af 4f       	sbci	r26, 0xFF	; 255
    1c10:	b1 e0       	ldi	r27, 0x01	; 1
    1c12:	3e d0       	rcall	.+124    	; 0x1c90 <__ultoa_invert+0x9c>
    1c14:	b4 e0       	ldi	r27, 0x04	; 4
    1c16:	3c d0       	rcall	.+120    	; 0x1c90 <__ultoa_invert+0x9c>
    1c18:	67 0f       	add	r22, r23
    1c1a:	78 1f       	adc	r23, r24
    1c1c:	89 1f       	adc	r24, r25
    1c1e:	9a 1f       	adc	r25, r26
    1c20:	a1 1d       	adc	r26, r1
    1c22:	68 0f       	add	r22, r24
    1c24:	79 1f       	adc	r23, r25
    1c26:	8a 1f       	adc	r24, r26
    1c28:	91 1d       	adc	r25, r1
    1c2a:	a1 1d       	adc	r26, r1
    1c2c:	6a 0f       	add	r22, r26
    1c2e:	71 1d       	adc	r23, r1
    1c30:	81 1d       	adc	r24, r1
    1c32:	91 1d       	adc	r25, r1
    1c34:	a1 1d       	adc	r26, r1
    1c36:	20 d0       	rcall	.+64     	; 0x1c78 <__ultoa_invert+0x84>
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <__ultoa_invert+0x48>
    1c3a:	68 94       	set
    1c3c:	3f 91       	pop	r19
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	26 9f       	mul	r18, r22
    1c42:	11 24       	eor	r1, r1
    1c44:	30 19       	sub	r19, r0
    1c46:	30 5d       	subi	r19, 0xD0	; 208
    1c48:	31 93       	st	Z+, r19
    1c4a:	de f6       	brtc	.-74     	; 0x1c02 <__ultoa_invert+0xe>
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret
    1c50:	46 2f       	mov	r20, r22
    1c52:	47 70       	andi	r20, 0x07	; 7
    1c54:	40 5d       	subi	r20, 0xD0	; 208
    1c56:	41 93       	st	Z+, r20
    1c58:	b3 e0       	ldi	r27, 0x03	; 3
    1c5a:	0f d0       	rcall	.+30     	; 0x1c7a <__ultoa_invert+0x86>
    1c5c:	c9 f7       	brne	.-14     	; 0x1c50 <__ultoa_invert+0x5c>
    1c5e:	f6 cf       	rjmp	.-20     	; 0x1c4c <__ultoa_invert+0x58>
    1c60:	46 2f       	mov	r20, r22
    1c62:	4f 70       	andi	r20, 0x0F	; 15
    1c64:	40 5d       	subi	r20, 0xD0	; 208
    1c66:	4a 33       	cpi	r20, 0x3A	; 58
    1c68:	18 f0       	brcs	.+6      	; 0x1c70 <__ultoa_invert+0x7c>
    1c6a:	49 5d       	subi	r20, 0xD9	; 217
    1c6c:	31 fd       	sbrc	r19, 1
    1c6e:	40 52       	subi	r20, 0x20	; 32
    1c70:	41 93       	st	Z+, r20
    1c72:	02 d0       	rcall	.+4      	; 0x1c78 <__ultoa_invert+0x84>
    1c74:	a9 f7       	brne	.-22     	; 0x1c60 <__ultoa_invert+0x6c>
    1c76:	ea cf       	rjmp	.-44     	; 0x1c4c <__ultoa_invert+0x58>
    1c78:	b4 e0       	ldi	r27, 0x04	; 4
    1c7a:	a6 95       	lsr	r26
    1c7c:	97 95       	ror	r25
    1c7e:	87 95       	ror	r24
    1c80:	77 95       	ror	r23
    1c82:	67 95       	ror	r22
    1c84:	ba 95       	dec	r27
    1c86:	c9 f7       	brne	.-14     	; 0x1c7a <__ultoa_invert+0x86>
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 05       	cpc	r22, r1
    1c8c:	71 05       	cpc	r23, r1
    1c8e:	08 95       	ret
    1c90:	9b 01       	movw	r18, r22
    1c92:	ac 01       	movw	r20, r24
    1c94:	0a 2e       	mov	r0, r26
    1c96:	06 94       	lsr	r0
    1c98:	57 95       	ror	r21
    1c9a:	47 95       	ror	r20
    1c9c:	37 95       	ror	r19
    1c9e:	27 95       	ror	r18
    1ca0:	ba 95       	dec	r27
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__ultoa_invert+0xa2>
    1ca4:	62 0f       	add	r22, r18
    1ca6:	73 1f       	adc	r23, r19
    1ca8:	84 1f       	adc	r24, r20
    1caa:	95 1f       	adc	r25, r21
    1cac:	a0 1d       	adc	r26, r0
    1cae:	08 95       	ret

00001cb0 <_exit>:
    1cb0:	f8 94       	cli

00001cb2 <__stop_program>:
    1cb2:	ff cf       	rjmp	.-2      	; 0x1cb2 <__stop_program>

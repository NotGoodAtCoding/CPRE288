
Mars Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00001c00  00001c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800242  00800242  00001dd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000320  00000000  00000000  00001e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000311d  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f0e  00000000  00000000  0000526f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a26  00000000  00000000  0000617d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000908  00000000  00000000  00007ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6b  00000000  00000000  000084ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022e3  00000000  00000000  00009017  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000280  00000000  00000000  0000b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
       6:	00 00       	nop
       8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
       a:	00 00       	nop
       c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
       e:	00 00       	nop
      10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
      12:	00 00       	nop
      14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
      16:	00 00       	nop
      18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
      22:	00 00       	nop
      24:	f2 c6       	rjmp	.+3556   	; 0xe0a <__vector_9>
      26:	00 00       	nop
      28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c6       	rjmp	.+3224   	; 0xcc6 <__vector_11>
      2e:	00 00       	nop
      30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
      32:	00 00       	nop
      34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
      36:	00 00       	nop
      38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
      42:	00 00       	nop
      44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
      46:	00 00       	nop
      48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
      52:	00 00       	nop
      54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
      56:	00 00       	nop
      58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
      62:	00 00       	nop
      64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
      66:	00 00       	nop
      68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
      72:	00 00       	nop
      74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
      76:	00 00       	nop
      78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
      82:	00 00       	nop
      84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
      86:	00 00       	nop
      88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 a8       	ldd	r0, Z+53	; 0x35
      8e:	4c cd       	rjmp	.-1384   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
      90:	b2 d4       	rcall	.+2404   	; 0x9f6 <move+0x80>
      92:	4e b9       	out	0x0e, r20	; 14
      94:	38 36       	cpi	r19, 0x68	; 104
      96:	a9 02       	muls	r26, r25
      98:	0c 50       	subi	r16, 0x0C	; 12
      9a:	b9 91       	ld	r27, Y+
      9c:	86 88       	ldd	r8, Z+22	; 0x16
      9e:	08 3c       	cpi	r16, 0xC8	; 200
      a0:	a6 aa       	std	Z+54, r10	; 0x36
      a2:	aa 2a       	or	r10, r26
      a4:	be 00       	.word	0x00be	; ????
      a6:	00 00       	nop
      a8:	80 3f       	cpi	r24, 0xF0	; 240

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d0 e1       	ldi	r29, 0x10	; 16
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e0 e0       	ldi	r30, 0x00	; 0
      be:	fc e1       	ldi	r31, 0x1C	; 28
      c0:	00 e0       	ldi	r16, 0x00	; 0
      c2:	0b bf       	out	0x3b, r16	; 59
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
      c6:	07 90       	elpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a2 34       	cpi	r26, 0x42	; 66
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
      d0:	22 e0       	ldi	r18, 0x02	; 2
      d2:	a2 e4       	ldi	r26, 0x42	; 66
      d4:	b2 e0       	ldi	r27, 0x02	; 2
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	ae 39       	cpi	r26, 0x9E	; 158
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	e2 d3       	rcall	.+1988   	; 0x8a6 <main>
      e2:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <_exit>

000000e6 <__bad_interrupt>:
      e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <serial_init>:
	
	while ( !(UCSR0A & 0b10000000) ) {}
	
	/* Reads data from the receive buffer; clears the receive buffer */
	return UDR0;
}
      e8:	10 92 90 00 	sts	0x0090, r1
      ec:	82 e2       	ldi	r24, 0x22	; 34
      ee:	89 b9       	out	0x09, r24	; 9
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	8b b9       	out	0x0b, r24	; 11
      f4:	8e e0       	ldi	r24, 0x0E	; 14
      f6:	80 93 95 00 	sts	0x0095, r24
      fa:	88 e1       	ldi	r24, 0x18	; 24
      fc:	8a b9       	out	0x0a, r24	; 10
      fe:	08 95       	ret

00000100 <serial_putc>:

//Transmit Data over the Serial connection
void serial_putc(char data) {

	/* Wait for empty transmit buffer by checking the UDRE bit */
	while ((UCSR0A & 0b00100000) == 0){}
     100:	5d 9b       	sbis	0x0b, 5	; 11
     102:	fe cf       	rjmp	.-4      	; 0x100 <serial_putc>
	
	/* Put data into transmit buffer; sends the data */
	UDR0 = data;
     104:	8c b9       	out	0x0c, r24	; 12
     106:	08 95       	ret

00000108 <serial_puts>:
}

// Transmit a string of characters over the serial connection
void serial_puts(char* data){
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	c1 55       	subi	r28, 0x51	; 81
     11a:	d1 09       	sbc	r29, r1
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	8c 01       	movw	r16, r24
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
     128:	41 e5       	ldi	r20, 0x51	; 81
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	60 e2       	ldi	r22, 0x20	; 32
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	ce 01       	movw	r24, r28
     132:	01 96       	adiw	r24, 0x01	; 1
     134:	0e 94 1b 0b 	call	0x1636	; 0x1636 <memset>
	sprintf(buf, "%s", data);
     138:	b8 01       	movw	r22, r16
     13a:	ce 01       	movw	r24, r28
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strcpy>
     142:	8e 01       	movw	r16, r28
     144:	0f 5f       	subi	r16, 0xFF	; 255
     146:	1f 4f       	sbci	r17, 0xFF	; 255
     148:	7e 01       	movw	r14, r28
     14a:	82 e5       	ldi	r24, 0x52	; 82
     14c:	e8 0e       	add	r14, r24
     14e:	f1 1c       	adc	r15, r1
	for( ; i < 81; i++){
		serial_putc(buf[i]);
     150:	f8 01       	movw	r30, r16
     152:	81 91       	ld	r24, Z+
     154:	8f 01       	movw	r16, r30
     156:	d4 df       	rcall	.-88     	; 0x100 <serial_putc>
void serial_puts(char* data){
	int i = 0;
	char buf[81];
	memset(buf, ' ', sizeof(char) * 81);
	sprintf(buf, "%s", data);
	for( ; i < 81; i++){
     158:	0e 15       	cp	r16, r14
     15a:	1f 05       	cpc	r17, r15
     15c:	c9 f7       	brne	.-14     	; 0x150 <serial_puts+0x48>
		serial_putc(buf[i]);
	}
     15e:	cf 5a       	subi	r28, 0xAF	; 175
     160:	df 4f       	sbci	r29, 0xFF	; 255
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	ff 90       	pop	r15
     176:	ef 90       	pop	r14
     178:	08 95       	ret

0000017a <linearRegression>:
int index_to_cm(int index){
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
     17a:	bc 01       	movw	r22, r24
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
		if(table17[i] < value){
     17c:	40 91 06 01 	lds	r20, 0x0106
     180:	50 91 07 01 	lds	r21, 0x0107
     184:	48 17       	cp	r20, r24
     186:	59 07       	cpc	r21, r25
     188:	54 f0       	brlt	.+20     	; 0x19e <linearRegression+0x24>
     18a:	e8 e0       	ldi	r30, 0x08	; 8
     18c:	f1 e0       	ldi	r31, 0x01	; 1
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
     192:	41 91       	ld	r20, Z+
     194:	51 91       	ld	r21, Z+
     196:	46 17       	cp	r20, r22
     198:	57 07       	cpc	r21, r23
     19a:	5c f4       	brge	.+22     	; 0x1b2 <linearRegression+0x38>
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <linearRegression+0x28>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		if(table17[i] < value){
			lower = table17[i]; //Lower bound of table value
			upper = table17[i-1]; //Upper bound of table value
     1a2:	f9 01       	movw	r30, r18
     1a4:	ee 0f       	add	r30, r30
     1a6:	ff 1f       	adc	r31, r31
     1a8:	ec 5f       	subi	r30, 0xFC	; 252
     1aa:	fe 4f       	sbci	r31, 0xFE	; 254
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <linearRegression+0x4a>
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
	for(i=0; i<16; i++){
     1b2:	2f 5f       	subi	r18, 0xFF	; 255
     1b4:	3f 4f       	sbci	r19, 0xFF	; 255
     1b6:	20 31       	cpi	r18, 0x10	; 16
     1b8:	31 05       	cpc	r19, r1
     1ba:	59 f7       	brne	.-42     	; 0x192 <linearRegression+0x18>
	return (index+1) * 5;
}

// Plot a value from our recorded value table
int linearRegression(int value){
	int upper=0, lower=0, i;
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
     1c4:	84 1b       	sub	r24, r20
     1c6:	95 0b       	sbc	r25, r21
     1c8:	64 1b       	sub	r22, r20
     1ca:	75 0b       	sbc	r23, r21
     1cc:	0e 94 b3 09 	call	0x1366	; 0x1366 <__divmodhi4>
//IR tables - Num = robot num
int table17[]= {1023, 730, 570, 450, 390, 340, 300, 260, 240, 200, 180, 170, 160, 155, 150, 145};

// Convert the index of our table to a cm value
int index_to_cm(int index){
	return (index+1) * 5;
     1d0:	c9 01       	movw	r24, r18
     1d2:	88 0f       	add	r24, r24
     1d4:	99 1f       	adc	r25, r25
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
		}
	}
	//Return the cm representation of the upper bound (lower cm value)
	//plus the linear approximation of the position between the values
	return index_to_cm(i-1) + ((upper - lower) / (value - lower));
}
     1de:	86 0f       	add	r24, r22
     1e0:	97 1f       	adc	r25, r23
     1e2:	08 95       	ret

000001e4 <ADC_init>:

// Initialize the Infrared sensor
void ADC_init() {
	//Sets ADC Multiplexer 2.56V, Single Ended Input to ADC2
	ADMUX |= 0b11000010;
     1e4:	87 b1       	in	r24, 0x07	; 7
     1e6:	82 6c       	ori	r24, 0xC2	; 194
     1e8:	87 b9       	out	0x07, r24	; 7
	//Enable ADC Control, Start Conversion, Set prescalar to 128
	ADCSRA |= 0b11000111;
     1ea:	86 b1       	in	r24, 0x06	; 6
     1ec:	87 6c       	ori	r24, 0xC7	; 199
     1ee:	86 b9       	out	0x06, r24	; 6
     1f0:	08 95       	ret

000001f2 <ADC_read>:
}

// Read from the Infrared sensor
uint16_t ADC_read() {
	//ADC Start Conversion
	ADCSRA |=      0b11000000;
     1f2:	86 b1       	in	r24, 0x06	; 6
     1f4:	80 6c       	ori	r24, 0xC0	; 192
     1f6:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & 0b01000000){}
     1f8:	36 99       	sbic	0x06, 6	; 6
     1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <ADC_read+0x6>
	return linearRegression(ADC);
     1fc:	84 b1       	in	r24, 0x04	; 4
     1fe:	95 b1       	in	r25, 0x05	; 5
     200:	bc cf       	rjmp	.-136    	; 0x17a <linearRegression>
     202:	08 95       	ret

00000204 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
     204:	de 9a       	sbi	0x1b, 6	; 27
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	ea d5       	rcall	.+3028   	; 0xdde <wait_ms>
     20a:	de 98       	cbi	0x1b, 6	; 27
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	80 7f       	andi	r24, 0xF0	; 240
     210:	8b bb       	out	0x1b, r24	; 27
     212:	08 95       	ret

00000214 <lcd_command>:
     214:	cf 93       	push	r28
     216:	c8 2f       	mov	r28, r24
     218:	dc 98       	cbi	0x1b, 4	; 27
     21a:	8b b3       	in	r24, 0x1b	; 27
     21c:	9c 2f       	mov	r25, r28
     21e:	92 95       	swap	r25
     220:	9f 70       	andi	r25, 0x0F	; 15
     222:	89 2b       	or	r24, r25
     224:	8b bb       	out	0x1b, r24	; 27
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	ed df       	rcall	.-38     	; 0x204 <lcd_toggle_clear>
     22a:	8b b3       	in	r24, 0x1b	; 27
     22c:	cf 70       	andi	r28, 0x0F	; 15
     22e:	c8 2b       	or	r28, r24
     230:	cb bb       	out	0x1b, r28	; 27
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	e7 df       	rcall	.-50     	; 0x204 <lcd_toggle_clear>
     236:	dc 9a       	sbi	0x1b, 4	; 27
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <lcd_clear>:
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	ea df       	rcall	.-44     	; 0x214 <lcd_command>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	cc c5       	rjmp	.+2968   	; 0xdde <wait_ms>
     246:	08 95       	ret

00000248 <lcd_home_line1>:
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	e4 cf       	rjmp	.-56     	; 0x214 <lcd_command>
     24c:	08 95       	ret

0000024e <lcd_init>:
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	8a bb       	out	0x1a, r24	; 26
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	8b bb       	out	0x1b, r24	; 27
     256:	de 9a       	sbi	0x1b, 6	; 27
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	c0 d5       	rcall	.+2944   	; 0xdde <wait_ms>
     25e:	de 98       	cbi	0x1b, 6	; 27
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	bc d5       	rcall	.+2936   	; 0xdde <wait_ms>
     266:	de 9a       	sbi	0x1b, 6	; 27
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	b8 d5       	rcall	.+2928   	; 0xdde <wait_ms>
     26e:	de 98       	cbi	0x1b, 6	; 27
     270:	de 9a       	sbi	0x1b, 6	; 27
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	b3 d5       	rcall	.+2918   	; 0xdde <wait_ms>
     278:	de 98       	cbi	0x1b, 6	; 27
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	8b bb       	out	0x1b, r24	; 27
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	c1 df       	rcall	.-126    	; 0x204 <lcd_toggle_clear>
     282:	8b b3       	in	r24, 0x1b	; 27
     284:	8b bb       	out	0x1b, r24	; 27
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	bd df       	rcall	.-134    	; 0x204 <lcd_toggle_clear>
     28a:	8b b3       	in	r24, 0x1b	; 27
     28c:	8e 60       	ori	r24, 0x0E	; 14
     28e:	8b bb       	out	0x1b, r24	; 27
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	b8 df       	rcall	.-144    	; 0x204 <lcd_toggle_clear>
     294:	8b b3       	in	r24, 0x1b	; 27
     296:	8b bb       	out	0x1b, r24	; 27
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	b4 df       	rcall	.-152    	; 0x204 <lcd_toggle_clear>
     29c:	8b b3       	in	r24, 0x1b	; 27
     29e:	86 60       	ori	r24, 0x06	; 6
     2a0:	8b bb       	out	0x1b, r24	; 27
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	af df       	rcall	.-162    	; 0x204 <lcd_toggle_clear>
     2a6:	8b b3       	in	r24, 0x1b	; 27
     2a8:	8b bb       	out	0x1b, r24	; 27
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	ab df       	rcall	.-170    	; 0x204 <lcd_toggle_clear>
     2ae:	d8 9a       	sbi	0x1b, 0	; 27
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	a8 df       	rcall	.-176    	; 0x204 <lcd_toggle_clear>
     2b4:	dc 9a       	sbi	0x1b, 4	; 27
     2b6:	c8 cf       	rjmp	.-112    	; 0x248 <lcd_home_line1>
     2b8:	08 95       	ret

000002ba <lcd_home_line2>:
     2ba:	80 ec       	ldi	r24, 0xC0	; 192
     2bc:	ab cf       	rjmp	.-170    	; 0x214 <lcd_command>
     2be:	08 95       	ret

000002c0 <lcd_home_line3>:
     2c0:	84 e9       	ldi	r24, 0x94	; 148
     2c2:	a8 cf       	rjmp	.-176    	; 0x214 <lcd_command>
     2c4:	08 95       	ret

000002c6 <lcd_home_line4>:
     2c6:	84 ed       	ldi	r24, 0xD4	; 212
     2c8:	a5 cf       	rjmp	.-182    	; 0x214 <lcd_command>
     2ca:	08 95       	ret

000002cc <lcd_putc>:
     2cc:	cf 93       	push	r28
     2ce:	c8 2f       	mov	r28, r24
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	9c 2f       	mov	r25, r28
     2d4:	92 95       	swap	r25
     2d6:	9f 70       	andi	r25, 0x0F	; 15
     2d8:	89 2b       	or	r24, r25
     2da:	8b bb       	out	0x1b, r24	; 27
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	92 df       	rcall	.-220    	; 0x204 <lcd_toggle_clear>
     2e0:	8b b3       	in	r24, 0x1b	; 27
     2e2:	cf 70       	andi	r28, 0x0F	; 15
     2e4:	c8 2b       	or	r28, r24
     2e6:	cb bb       	out	0x1b, r28	; 27
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	8c df       	rcall	.-232    	; 0x204 <lcd_toggle_clear>
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	c1 55       	subi	r28, 0x51	; 81
     306:	d1 09       	sbc	r29, r1
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	fe 01       	movw	r30, r28
     314:	e4 5a       	subi	r30, 0xA4	; 164
     316:	ff 4f       	sbci	r31, 0xFF	; 255
     318:	41 91       	ld	r20, Z+
     31a:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     31c:	9f 01       	movw	r18, r30
     31e:	61 e5       	ldi	r22, 0x51	; 81
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	ce 01       	movw	r24, r28
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	0e 94 32 0b 	call	0x1664	; 0x1664 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	82 e4       	ldi	r24, 0x42	; 66
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	0e 94 22 0b 	call	0x1644	; 0x1644 <strcmp>
     338:	89 2b       	or	r24, r25
     33a:	09 f4       	brne	.+2      	; 0x33e <lprintf+0x4e>
     33c:	40 c0       	rjmp	.+128    	; 0x3be <lprintf+0xce>
		return;
	
	strcpy(lastbuffer, buffer);
     33e:	be 01       	movw	r22, r28
     340:	6f 5f       	subi	r22, 0xFF	; 255
     342:	7f 4f       	sbci	r23, 0xFF	; 255
     344:	82 e4       	ldi	r24, 0x42	; 66
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 2b 0b 	call	0x1656	; 0x1656 <strcpy>
	lcd_clear();
     34c:	77 df       	rcall	.-274    	; 0x23c <lcd_clear>
     34e:	9e 01       	movw	r18, r28
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     35a:	0f 2e       	mov	r0, r31
     35c:	f4 e1       	ldi	r31, 0x14	; 20
     35e:	ef 2e       	mov	r14, r31
     360:	f1 2c       	mov	r15, r1
     362:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     364:	24 c0       	rjmp	.+72     	; 0x3ae <lprintf+0xbe>
		if (*str == '\n') {
     366:	8a 30       	cpi	r24, 0x0A	; 10
     368:	49 f4       	brne	.+18     	; 0x37c <lprintf+0x8c>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     36a:	c8 01       	movw	r24, r16
     36c:	b7 01       	movw	r22, r14
     36e:	fb d7       	rcall	.+4086   	; 0x1366 <__divmodhi4>
     370:	f7 01       	movw	r30, r14
     372:	e8 1b       	sub	r30, r24
     374:	f9 0b       	sbc	r31, r25
     376:	0e 0f       	add	r16, r30
     378:	1f 1f       	adc	r17, r31
     37a:	03 c0       	rjmp	.+6      	; 0x382 <lprintf+0x92>
		} else {
			lcd_putc(*str);
     37c:	a7 df       	rcall	.-178    	; 0x2cc <lcd_putc>
			charnum++;
     37e:	0f 5f       	subi	r16, 0xFF	; 255
     380:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
     382:	c8 01       	movw	r24, r16
     384:	b7 01       	movw	r22, r14
     386:	ef d7       	rcall	.+4062   	; 0x1366 <__divmodhi4>
     388:	89 2b       	or	r24, r25
     38a:	89 f4       	brne	.+34     	; 0x3ae <lprintf+0xbe>
			switch (charnum / LCD_WIDTH) {
     38c:	c8 01       	movw	r24, r16
     38e:	b7 01       	movw	r22, r14
     390:	ea d7       	rcall	.+4052   	; 0x1366 <__divmodhi4>
     392:	62 30       	cpi	r22, 0x02	; 2
     394:	71 05       	cpc	r23, r1
     396:	41 f0       	breq	.+16     	; 0x3a8 <lprintf+0xb8>
     398:	63 30       	cpi	r22, 0x03	; 3
     39a:	71 05       	cpc	r23, r1
     39c:	39 f0       	breq	.+14     	; 0x3ac <lprintf+0xbc>
     39e:	61 30       	cpi	r22, 0x01	; 1
     3a0:	71 05       	cpc	r23, r1
     3a2:	29 f4       	brne	.+10     	; 0x3ae <lprintf+0xbe>
			case 1:
				lcd_home_line2();
     3a4:	8a df       	rcall	.-236    	; 0x2ba <lcd_home_line2>
				break;
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <lprintf+0xbe>
			case 2:
				lcd_home_line3();
     3a8:	8b df       	rcall	.-234    	; 0x2c0 <lcd_home_line3>
				break;
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <lprintf+0xbe>
			case 3:
				lcd_home_line4();
     3ac:	8c df       	rcall	.-232    	; 0x2c6 <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
     3ae:	f6 01       	movw	r30, r12
     3b0:	81 91       	ld	r24, Z+
     3b2:	6f 01       	movw	r12, r30
     3b4:	88 23       	and	r24, r24
     3b6:	19 f0       	breq	.+6      	; 0x3be <lprintf+0xce>
     3b8:	00 35       	cpi	r16, 0x50	; 80
     3ba:	11 05       	cpc	r17, r1
     3bc:	a4 f2       	brlt	.-88     	; 0x366 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
     3be:	cf 5a       	subi	r28, 0xAF	; 175
     3c0:	df 4f       	sbci	r29, 0xFF	; 255
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	08 95       	ret

000003de <deg_to_rad>:

#include "map.h"

//utility deg to rad
  double deg_to_rad(int degrees){
  	return (((double) degrees) * PI) / 180;
     3de:	bc 01       	movw	r22, r24
     3e0:	88 27       	eor	r24, r24
     3e2:	77 fd       	sbrc	r23, 7
     3e4:	80 95       	com	r24
     3e6:	98 2f       	mov	r25, r24
     3e8:	2e d6       	rcall	.+3164   	; 0x1046 <__floatsisf>
     3ea:	2b ed       	ldi	r18, 0xDB	; 219
     3ec:	3f e0       	ldi	r19, 0x0F	; 15
     3ee:	49 e4       	ldi	r20, 0x49	; 73
     3f0:	50 e4       	ldi	r21, 0x40	; 64
     3f2:	12 d7       	rcall	.+3620   	; 0x1218 <__mulsf3>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	44 e3       	ldi	r20, 0x34	; 52
     3fa:	53 e4       	ldi	r21, 0x43	; 67
     3fc:	89 c5       	rjmp	.+2834   	; 0xf10 <__divsf3>
  }
     3fe:	08 95       	ret

00000400 <init>:
			break;
		case TURN:
			turn(quantity, sensor_data);
			break;
		case WIN:
			winProcedure(sensor_data);
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	24 df       	rcall	.-440    	; 0x24e <lcd_init>
     406:	70 de       	rcall	.-800    	; 0xe8 <serial_init>
     408:	78 94       	sei
     40a:	ec de       	rcall	.-552    	; 0x1e4 <ADC_init>
     40c:	a7 d4       	rcall	.+2382   	; 0xd5c <timer1_init>
     40e:	2a d4       	rcall	.+2132   	; 0xc64 <timer3_init>
     410:	f9 d2       	rcall	.+1522   	; 0xa04 <oi_alloc>
     412:	ec 01       	movw	r28, r24
     414:	fb d3       	rcall	.+2038   	; 0xc0c <oi_init>
     416:	88 e2       	ldi	r24, 0x28	; 40
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	76 de       	rcall	.-788    	; 0x108 <serial_puts>
     41c:	ce 01       	movw	r24, r28
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <determineBoundryType>:
     424:	8e 3e       	cpi	r24, 0xEE	; 238
     426:	22 e0       	ldi	r18, 0x02	; 2
     428:	92 07       	cpc	r25, r18
     42a:	44 f0       	brlt	.+16     	; 0x43c <determineBoundryType+0x18>
     42c:	8e 5e       	subi	r24, 0xEE	; 238
     42e:	92 40       	sbci	r25, 0x02	; 2
     430:	8a 3f       	cpi	r24, 0xFA	; 250
     432:	91 05       	cpc	r25, r1
     434:	30 f4       	brcc	.+12     	; 0x442 <determineBoundryType+0x1e>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	08 95       	ret
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	08 95       	ret
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	08 95       	ret

00000448 <print>:
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	d8 2f       	mov	r29, r24
     44e:	c9 2f       	mov	r28, r25
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	4d df       	rcall	.-358    	; 0x2f0 <lprintf>
     456:	8d 2f       	mov	r24, r29
     458:	9c 2f       	mov	r25, r28
     45a:	56 de       	rcall	.-852    	; 0x108 <serial_puts>
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <slowFullScan>:
     466:	af 92       	push	r10
     468:	bf 92       	push	r11
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	81 e5       	ldi	r24, 0x51	; 81
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	e4 df       	rcall	.-56     	; 0x448 <print>
     480:	a1 2c       	mov	r10, r1
     482:	b1 2c       	mov	r11, r1
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	02 d4       	rcall	.+2052   	; 0xc90 <move_servo>
     48c:	b2 de       	rcall	.-668    	; 0x1f2 <ADC_read>
     48e:	8c 01       	movw	r16, r24
     490:	ce 01       	movw	r24, r28
     492:	a5 df       	rcall	.-182    	; 0x3de <deg_to_rad>
     494:	bc 01       	movw	r22, r24
     496:	88 27       	eor	r24, r24
     498:	77 fd       	sbrc	r23, 7
     49a:	80 95       	com	r24
     49c:	98 2f       	mov	r25, r24
     49e:	d3 d5       	rcall	.+2982   	; 0x1046 <__floatsisf>
     4a0:	34 d5       	rcall	.+2664   	; 0xf0a <cos>
     4a2:	6b 01       	movw	r12, r22
     4a4:	7c 01       	movw	r14, r24
     4a6:	b8 01       	movw	r22, r16
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ca d5       	rcall	.+2964   	; 0x1042 <__floatunsisf>
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	b2 d6       	rcall	.+3428   	; 0x1218 <__mulsf3>
     4b4:	95 d5       	rcall	.+2858   	; 0xfe0 <__fixsfsi>
     4b6:	9b 01       	movw	r18, r22
     4b8:	77 23       	and	r23, r23
     4ba:	24 f4       	brge	.+8      	; 0x4c4 <slowFullScan+0x5e>
     4bc:	22 27       	eor	r18, r18
     4be:	33 27       	eor	r19, r19
     4c0:	26 1b       	sub	r18, r22
     4c2:	37 0b       	sbc	r19, r23
     4c4:	20 31       	cpi	r18, 0x10	; 16
     4c6:	31 05       	cpc	r19, r1
     4c8:	2c f4       	brge	.+10     	; 0x4d4 <slowFullScan+0x6e>
     4ca:	8d e5       	ldi	r24, 0x5D	; 93
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	bc df       	rcall	.-136    	; 0x448 <print>
     4d0:	ac 2e       	mov	r10, r28
     4d2:	bd 2e       	mov	r11, r29
     4d4:	5d d4       	rcall	.+2234   	; 0xd90 <ping_read>
     4d6:	6b 01       	movw	r12, r22
     4d8:	7c 01       	movw	r14, r24
     4da:	ce 01       	movw	r24, r28
     4dc:	80 df       	rcall	.-256    	; 0x3de <deg_to_rad>
     4de:	bc 01       	movw	r22, r24
     4e0:	88 27       	eor	r24, r24
     4e2:	77 fd       	sbrc	r23, 7
     4e4:	80 95       	com	r24
     4e6:	98 2f       	mov	r25, r24
     4e8:	ae d5       	rcall	.+2908   	; 0x1046 <__floatsisf>
     4ea:	0f d5       	rcall	.+2590   	; 0xf0a <cos>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
     4f0:	c7 01       	movw	r24, r14
     4f2:	b6 01       	movw	r22, r12
     4f4:	91 d6       	rcall	.+3362   	; 0x1218 <__mulsf3>
     4f6:	74 d5       	rcall	.+2792   	; 0xfe0 <__fixsfsi>
     4f8:	9b 01       	movw	r18, r22
     4fa:	77 23       	and	r23, r23
     4fc:	24 f4       	brge	.+8      	; 0x506 <slowFullScan+0xa0>
     4fe:	22 27       	eor	r18, r18
     500:	33 27       	eor	r19, r19
     502:	26 1b       	sub	r18, r22
     504:	37 0b       	sbc	r19, r23
     506:	20 31       	cpi	r18, 0x10	; 16
     508:	31 05       	cpc	r19, r1
     50a:	1c f4       	brge	.+6      	; 0x512 <slowFullScan+0xac>
     50c:	8c e7       	ldi	r24, 0x7C	; 124
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	9b df       	rcall	.-202    	; 0x448 <print>
     512:	22 96       	adiw	r28, 0x02	; 2
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	62 d4       	rcall	.+2244   	; 0xdde <wait_ms>
     51a:	c6 3b       	cpi	r28, 0xB6	; 182
     51c:	d1 05       	cpc	r29, r1
     51e:	09 f0       	breq	.+2      	; 0x522 <slowFullScan+0xbc>
     520:	b3 cf       	rjmp	.-154    	; 0x488 <slowFullScan+0x22>
     522:	8a 2d       	mov	r24, r10
     524:	9b 2d       	mov	r25, r11
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	08 95       	ret

0000053c <rapidForwardScan>:
     53c:	4f 92       	push	r4
     53e:	5f 92       	push	r5
     540:	6f 92       	push	r6
     542:	7f 92       	push	r7
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	00 d0       	rcall	.+0      	; 0x55e <rapidForwardScan+0x22>
     55e:	00 d0       	rcall	.+0      	; 0x560 <rapidForwardScan+0x24>
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	0f 2e       	mov	r0, r31
     566:	41 2c       	mov	r4, r1
     568:	51 2c       	mov	r5, r1
     56a:	f8 ec       	ldi	r31, 0xC8	; 200
     56c:	6f 2e       	mov	r6, r31
     56e:	f2 e4       	ldi	r31, 0x42	; 66
     570:	7f 2e       	mov	r7, r31
     572:	f0 2d       	mov	r31, r0
     574:	53 01       	movw	r10, r6
     576:	42 01       	movw	r8, r4
     578:	0f 2e       	mov	r0, r31
     57a:	c1 2c       	mov	r12, r1
     57c:	d1 2c       	mov	r13, r1
     57e:	f4 e3       	ldi	r31, 0x34	; 52
     580:	ef 2e       	mov	r14, r31
     582:	f2 e4       	ldi	r31, 0x42	; 66
     584:	ff 2e       	mov	r15, r31
     586:	f0 2d       	mov	r31, r0
     588:	c7 01       	movw	r24, r14
     58a:	b6 01       	movw	r22, r12
     58c:	2e d5       	rcall	.+2652   	; 0xfea <__fixunssfsi>
     58e:	cb 01       	movw	r24, r22
     590:	7f d3       	rcall	.+1790   	; 0xc90 <move_servo>
     592:	fe d3       	rcall	.+2044   	; 0xd90 <ping_read>
     594:	69 83       	std	Y+1, r22	; 0x01
     596:	7a 83       	std	Y+2, r23	; 0x02
     598:	8b 83       	std	Y+3, r24	; 0x03
     59a:	9c 83       	std	Y+4, r25	; 0x04
     59c:	23 ec       	ldi	r18, 0xC3	; 195
     59e:	35 ef       	ldi	r19, 0xF5	; 245
     5a0:	48 e2       	ldi	r20, 0x28	; 40
     5a2:	5f e3       	ldi	r21, 0x3F	; 63
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	37 d6       	rcall	.+3182   	; 0x1218 <__mulsf3>
     5aa:	4b 01       	movw	r8, r22
     5ac:	5c 01       	movw	r10, r24
     5ae:	23 ec       	ldi	r18, 0xC3	; 195
     5b0:	35 ef       	ldi	r19, 0xF5	; 245
     5b2:	48 ea       	ldi	r20, 0xA8	; 168
     5b4:	5e e3       	ldi	r21, 0x3E	; 62
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	2c d6       	rcall	.+3160   	; 0x1218 <__mulsf3>
     5c0:	a5 01       	movw	r20, r10
     5c2:	94 01       	movw	r18, r8
     5c4:	3a d4       	rcall	.+2164   	; 0xe3a <__addsf3>
     5c6:	4b 01       	movw	r8, r22
     5c8:	5c 01       	movw	r10, r24
     5ca:	13 de       	rcall	.-986    	; 0x1f2 <ADC_read>
     5cc:	d6 dd       	rcall	.-1108   	; 0x17a <linearRegression>
     5ce:	8c 01       	movw	r16, r24
     5d0:	23 ec       	ldi	r18, 0xC3	; 195
     5d2:	35 ef       	ldi	r19, 0xF5	; 245
     5d4:	48 e2       	ldi	r20, 0x28	; 40
     5d6:	5f e3       	ldi	r21, 0x3F	; 63
     5d8:	c3 01       	movw	r24, r6
     5da:	b2 01       	movw	r22, r4
     5dc:	1d d6       	rcall	.+3130   	; 0x1218 <__mulsf3>
     5de:	2b 01       	movw	r4, r22
     5e0:	3c 01       	movw	r6, r24
     5e2:	b8 01       	movw	r22, r16
     5e4:	88 27       	eor	r24, r24
     5e6:	77 fd       	sbrc	r23, 7
     5e8:	80 95       	com	r24
     5ea:	98 2f       	mov	r25, r24
     5ec:	2c d5       	rcall	.+2648   	; 0x1046 <__floatsisf>
     5ee:	23 ec       	ldi	r18, 0xC3	; 195
     5f0:	35 ef       	ldi	r19, 0xF5	; 245
     5f2:	48 ea       	ldi	r20, 0xA8	; 168
     5f4:	5e e3       	ldi	r21, 0x3E	; 62
     5f6:	10 d6       	rcall	.+3104   	; 0x1218 <__mulsf3>
     5f8:	a3 01       	movw	r20, r6
     5fa:	92 01       	movw	r18, r4
     5fc:	1e d4       	rcall	.+2108   	; 0xe3a <__addsf3>
     5fe:	2b 01       	movw	r4, r22
     600:	3c 01       	movw	r6, r24
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	48 ec       	ldi	r20, 0xC8	; 200
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	c5 01       	movw	r24, r10
     60c:	b4 01       	movw	r22, r8
     60e:	79 d4       	rcall	.+2290   	; 0xf02 <__cmpsf2>
     610:	88 23       	and	r24, r24
     612:	4c f0       	brlt	.+18     	; 0x626 <rapidForwardScan+0xea>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	48 ec       	ldi	r20, 0xC8	; 200
     61a:	51 e4       	ldi	r21, 0x41	; 65
     61c:	c3 01       	movw	r24, r6
     61e:	b2 01       	movw	r22, r4
     620:	70 d4       	rcall	.+2272   	; 0xf02 <__cmpsf2>
     622:	88 23       	and	r24, r24
     624:	44 f4       	brge	.+16     	; 0x636 <rapidForwardScan+0xfa>
     626:	8a e8       	ldi	r24, 0x8A	; 138
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e df       	rcall	.-484    	; 0x448 <print>
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	d7 d4       	rcall	.+2478   	; 0xfe0 <__fixsfsi>
     632:	cb 01       	movw	r24, r22
     634:	13 c0       	rjmp	.+38     	; 0x65c <rapidForwardScan+0x120>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e4       	ldi	r21, 0x40	; 64
     63e:	c7 01       	movw	r24, r14
     640:	b6 01       	movw	r22, r12
     642:	fb d3       	rcall	.+2038   	; 0xe3a <__addsf3>
     644:	6b 01       	movw	r12, r22
     646:	7c 01       	movw	r14, r24
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	47 e0       	ldi	r20, 0x07	; 7
     64e:	53 e4       	ldi	r21, 0x43	; 67
     650:	58 d4       	rcall	.+2224   	; 0xf02 <__cmpsf2>
     652:	18 16       	cp	r1, r24
     654:	0c f0       	brlt	.+2      	; 0x658 <rapidForwardScan+0x11c>
     656:	98 cf       	rjmp	.-208    	; 0x588 <rapidForwardScan+0x4c>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	9f 90       	pop	r9
     67a:	8f 90       	pop	r8
     67c:	7f 90       	pop	r7
     67e:	6f 90       	pop	r6
     680:	5f 90       	pop	r5
     682:	4f 90       	pop	r4
     684:	08 95       	ret

00000686 <detectColoredBoundry>:
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
     698:	8c 8d       	ldd	r24, Y+28	; 0x1c
     69a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     69c:	c3 de       	rcall	.-634    	; 0x424 <determineBoundryType>
     69e:	8c 01       	movw	r16, r24
     6a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6a4:	bf de       	rcall	.-642    	; 0x424 <determineBoundryType>
     6a6:	6c 01       	movw	r12, r24
     6a8:	88 a1       	ldd	r24, Y+32	; 0x20
     6aa:	99 a1       	ldd	r25, Y+33	; 0x21
     6ac:	bb de       	rcall	.-650    	; 0x424 <determineBoundryType>
     6ae:	7c 01       	movw	r14, r24
     6b0:	8a a1       	ldd	r24, Y+34	; 0x22
     6b2:	9b a1       	ldd	r25, Y+35	; 0x23
     6b4:	b7 de       	rcall	.-658    	; 0x424 <determineBoundryType>
     6b6:	01 30       	cpi	r16, 0x01	; 1
     6b8:	11 05       	cpc	r17, r1
     6ba:	61 f0       	breq	.+24     	; 0x6d4 <detectColoredBoundry+0x4e>
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	e2 16       	cp	r14, r18
     6c0:	f1 04       	cpc	r15, r1
     6c2:	91 f0       	breq	.+36     	; 0x6e8 <detectColoredBoundry+0x62>
     6c4:	21 e0       	ldi	r18, 0x01	; 1
     6c6:	c2 16       	cp	r12, r18
     6c8:	d1 04       	cpc	r13, r1
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <detectColoredBoundry+0x62>
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	91 05       	cpc	r25, r1
     6d0:	f9 f4       	brne	.+62     	; 0x710 <detectColoredBoundry+0x8a>
     6d2:	14 c0       	rjmp	.+40     	; 0x6fc <detectColoredBoundry+0x76>
     6d4:	8d e9       	ldi	r24, 0x9D	; 157
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	b7 de       	rcall	.-658    	; 0x448 <print>
     6da:	be 01       	movw	r22, r28
     6dc:	80 eb       	ldi	r24, 0xB0	; 176
     6de:	9f ef       	ldi	r25, 0xFF	; 255
     6e0:	ec d0       	rcall	.+472    	; 0x8ba <turn>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	29 c0       	rjmp	.+82     	; 0x73a <detectColoredBoundry+0xb4>
     6e8:	85 eb       	ldi	r24, 0xB5	; 181
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	ad de       	rcall	.-678    	; 0x448 <print>
     6ee:	be 01       	movw	r22, r28
     6f0:	84 e6       	ldi	r24, 0x64	; 100
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	e2 d0       	rcall	.+452    	; 0x8ba <turn>
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	1f c0       	rjmp	.+62     	; 0x73a <detectColoredBoundry+0xb4>
     6fc:	8f ec       	ldi	r24, 0xCF	; 207
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	a3 de       	rcall	.-698    	; 0x448 <print>
     702:	be 01       	movw	r22, r28
     704:	80 e5       	ldi	r24, 0x50	; 80
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	d8 d0       	rcall	.+432    	; 0x8ba <turn>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	15 c0       	rjmp	.+42     	; 0x73a <detectColoredBoundry+0xb4>
     710:	02 30       	cpi	r16, 0x02	; 2
     712:	11 05       	cpc	r17, r1
     714:	51 f0       	breq	.+20     	; 0x72a <detectColoredBoundry+0xa4>
     716:	22 e0       	ldi	r18, 0x02	; 2
     718:	e2 16       	cp	r14, r18
     71a:	f1 04       	cpc	r15, r1
     71c:	31 f0       	breq	.+12     	; 0x72a <detectColoredBoundry+0xa4>
     71e:	22 e0       	ldi	r18, 0x02	; 2
     720:	c2 16       	cp	r12, r18
     722:	d1 04       	cpc	r13, r1
     724:	11 f0       	breq	.+4      	; 0x72a <detectColoredBoundry+0xa4>
     726:	02 97       	sbiw	r24, 0x02	; 2
     728:	31 f4       	brne	.+12     	; 0x736 <detectColoredBoundry+0xb0>
     72a:	87 ee       	ldi	r24, 0xE7	; 231
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	8c de       	rcall	.-744    	; 0x448 <print>
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <detectColoredBoundry+0xb4>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	08 95       	ret

0000074c <detectCrater>:
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
     752:	3e 8d       	ldd	r19, Y+30	; 0x1e
     754:	2f 8d       	ldd	r18, Y+31	; 0x1f
     756:	78 a1       	ldd	r23, Y+32	; 0x20
     758:	69 a1       	ldd	r22, Y+33	; 0x21
     75a:	4a a1       	ldd	r20, Y+34	; 0x22
     75c:	5b a1       	ldd	r21, Y+35	; 0x23
     75e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     760:	9d 8d       	ldd	r25, Y+29	; 0x1d
     762:	89 2b       	or	r24, r25
     764:	69 f0       	breq	.+26     	; 0x780 <detectCrater+0x34>
     766:	83 2f       	mov	r24, r19
     768:	92 2f       	mov	r25, r18
     76a:	27 2f       	mov	r18, r23
     76c:	36 2f       	mov	r19, r22
     76e:	45 2b       	or	r20, r21
     770:	59 f0       	breq	.+22     	; 0x788 <detectCrater+0x3c>
     772:	23 2b       	or	r18, r19
     774:	69 f0       	breq	.+26     	; 0x790 <detectCrater+0x44>
     776:	89 2b       	or	r24, r25
     778:	59 f0       	breq	.+22     	; 0x790 <detectCrater+0x44>
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	1d c0       	rjmp	.+58     	; 0x7ba <detectCrater+0x6e>
     780:	88 ef       	ldi	r24, 0xF8	; 248
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	61 de       	rcall	.-830    	; 0x448 <print>
     786:	0b c0       	rjmp	.+22     	; 0x79e <detectCrater+0x52>
     788:	89 2b       	or	r24, r25
     78a:	11 f0       	breq	.+4      	; 0x790 <detectCrater+0x44>
     78c:	23 2b       	or	r18, r19
     78e:	21 f4       	brne	.+8      	; 0x798 <detectCrater+0x4c>
     790:	8c e0       	ldi	r24, 0x0C	; 12
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	59 de       	rcall	.-846    	; 0x448 <print>
     796:	03 c0       	rjmp	.+6      	; 0x79e <detectCrater+0x52>
     798:	81 e2       	ldi	r24, 0x21	; 33
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	55 de       	rcall	.-854    	; 0x448 <print>
     79e:	9e 01       	movw	r18, r28
     7a0:	44 e6       	ldi	r20, 0x64	; 100
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	6c e9       	ldi	r22, 0x9C	; 156
     7a6:	7f ef       	ldi	r23, 0xFF	; 255
     7a8:	8c e9       	ldi	r24, 0x9C	; 156
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	e4 d0       	rcall	.+456    	; 0x976 <move>
     7ae:	be 01       	movw	r22, r28
     7b0:	89 e6       	ldi	r24, 0x69	; 105
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	82 d0       	rcall	.+260    	; 0x8ba <turn>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <moveCautiously>:
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	4c 01       	movw	r8, r24
     7de:	5b 01       	movw	r10, r22
     7e0:	18 16       	cp	r1, r24
     7e2:	19 06       	cpc	r1, r25
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <moveCautiously+0x28>
     7e6:	50 c0       	rjmp	.+160    	; 0x888 <moveCautiously+0xc8>
     7e8:	ee 24       	eor	r14, r14
     7ea:	ea 94       	dec	r14
     7ec:	fe 2c       	mov	r15, r14
     7ee:	0f ef       	ldi	r16, 0xFF	; 255
     7f0:	1f ef       	ldi	r17, 0xFF	; 255
     7f2:	cf ef       	ldi	r28, 0xFF	; 255
     7f4:	df ef       	ldi	r29, 0xFF	; 255
     7f6:	c1 2c       	mov	r12, r1
     7f8:	d1 2c       	mov	r13, r1
     7fa:	61 2c       	mov	r6, r1
     7fc:	71 2c       	mov	r7, r1
     7fe:	c5 36       	cpi	r28, 0x65	; 101
     800:	d1 05       	cpc	r29, r1
     802:	24 f4       	brge	.+8      	; 0x80c <moveCautiously+0x4c>
     804:	cf 3f       	cpi	r28, 0xFF	; 255
     806:	4f ef       	ldi	r20, 0xFF	; 255
     808:	d4 07       	cpc	r29, r20
     80a:	71 f4       	brne	.+28     	; 0x828 <moveCautiously+0x68>
     80c:	97 de       	rcall	.-722    	; 0x53c <rapidForwardScan>
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	49 f0       	breq	.+18     	; 0x824 <moveCautiously+0x64>
     812:	b5 01       	movw	r22, r10
     814:	2a e5       	ldi	r18, 0x5A	; 90
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	a9 01       	movw	r20, r18
     81a:	48 1b       	sub	r20, r24
     81c:	59 0b       	sbc	r21, r25
     81e:	ca 01       	movw	r24, r20
     820:	4c d0       	rcall	.+152    	; 0x8ba <turn>
     822:	32 c0       	rjmp	.+100    	; 0x888 <moveCautiously+0xc8>
     824:	c6 2d       	mov	r28, r6
     826:	d7 2d       	mov	r29, r7
     828:	0a 31       	cpi	r16, 0x1A	; 26
     82a:	11 05       	cpc	r17, r1
     82c:	24 f4       	brge	.+8      	; 0x836 <moveCautiously+0x76>
     82e:	0f 3f       	cpi	r16, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	14 07       	cpc	r17, r20
     834:	31 f4       	brne	.+12     	; 0x842 <moveCautiously+0x82>
     836:	c5 01       	movw	r24, r10
     838:	26 df       	rcall	.-436    	; 0x686 <detectColoredBoundry>
     83a:	89 2b       	or	r24, r25
     83c:	29 f5       	brne	.+74     	; 0x888 <moveCautiously+0xc8>
     83e:	06 2d       	mov	r16, r6
     840:	17 2d       	mov	r17, r7
     842:	5b e0       	ldi	r21, 0x0B	; 11
     844:	e5 16       	cp	r14, r21
     846:	f1 04       	cpc	r15, r1
     848:	24 f4       	brge	.+8      	; 0x852 <moveCautiously+0x92>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f8 06       	cpc	r15, r24
     850:	31 f4       	brne	.+12     	; 0x85e <moveCautiously+0x9e>
     852:	c5 01       	movw	r24, r10
     854:	7b df       	rcall	.-266    	; 0x74c <detectCrater>
     856:	89 2b       	or	r24, r25
     858:	b9 f4       	brne	.+46     	; 0x888 <moveCautiously+0xc8>
     85a:	e6 2c       	mov	r14, r6
     85c:	f7 2c       	mov	r15, r7
     85e:	95 01       	movw	r18, r10
     860:	4a e0       	ldi	r20, 0x0A	; 10
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	68 e7       	ldi	r22, 0x78	; 120
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	88 e7       	ldi	r24, 0x78	; 120
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	84 d0       	rcall	.+264    	; 0x976 <move>
     86e:	4a e0       	ldi	r20, 0x0A	; 10
     870:	c4 0e       	add	r12, r20
     872:	d1 1c       	adc	r13, r1
     874:	2a 96       	adiw	r28, 0x0a	; 10
     876:	06 5f       	subi	r16, 0xF6	; 246
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	5a e0       	ldi	r21, 0x0A	; 10
     87c:	e5 0e       	add	r14, r21
     87e:	f1 1c       	adc	r15, r1
     880:	c8 14       	cp	r12, r8
     882:	d9 04       	cpc	r13, r9
     884:	0c f4       	brge	.+2      	; 0x888 <moveCautiously+0xc8>
     886:	bb cf       	rjmp	.-138    	; 0x7fe <moveCautiously+0x3e>
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	6f 90       	pop	r6
     8a4:	08 95       	ret

000008a6 <main>:
// -- Position ourselves to move in the exact center of two posts
// -- Move straight through them. Detection does the rest

int main(void)
{
	oi_t * sensor_data = init();
     8a6:	ac dd       	rcall	.-1192   	; 0x400 <init>
     8a8:	ec 01       	movw	r28, r24
		
		print("Executing Command...");
		executeCommand(command, quantity, sensor_data);
		*/
		
		moveCautiously(450, sensor_data);
     8aa:	be 01       	movw	r22, r28
     8ac:	82 ec       	ldi	r24, 0xC2	; 194
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	87 df       	rcall	.-242    	; 0x7c0 <moveCautiously>
		slowFullScan();
     8b2:	d9 dd       	rcall	.-1102   	; 0x466 <slowFullScan>
		
		oi_update(sensor_data);
     8b4:	ce 01       	movw	r24, r28
     8b6:	ef d0       	rcall	.+478    	; 0xa96 <oi_update>
     8b8:	f8 cf       	rjmp	.-16     	; 0x8aa <main+0x4>

000008ba <turn>:
	
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
     8c8:	8b 01       	movw	r16, r22
	int currentDegrees = 0;
	
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
     8ca:	88 27       	eor	r24, r24
     8cc:	99 27       	eor	r25, r25
     8ce:	8c 1b       	sub	r24, r28
     8d0:	9d 0b       	sbc	r25, r29
     8d2:	23 e0       	ldi	r18, 0x03	; 3
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	b9 01       	movw	r22, r18
     8d8:	46 d5       	rcall	.+2700   	; 0x1366 <__divmodhi4>
     8da:	fb 01       	movw	r30, r22
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ce 01       	movw	r24, r28
     8e2:	b9 01       	movw	r22, r18
     8e4:	40 d5       	rcall	.+2688   	; 0x1366 <__divmodhi4>
     8e6:	cb 01       	movw	r24, r22
     8e8:	bf 01       	movw	r22, r30
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	b4 d0       	rcall	.+360    	; 0xa58 <oi_set_wheels>
	
	turnDegrees = abs(turnDegrees);
     8f0:	7e 01       	movw	r14, r28
     8f2:	dd 23       	and	r29, r29
     8f4:	24 f4       	brge	.+8      	; 0x8fe <turn+0x44>
     8f6:	ee 24       	eor	r14, r14
     8f8:	ff 24       	eor	r15, r15
     8fa:	ec 1a       	sub	r14, r28
     8fc:	fd 0a       	sbc	r15, r29

	while ( currentDegrees < turnDegrees ) {
     8fe:	1e 14       	cp	r1, r14
     900:	1f 04       	cpc	r1, r15
     902:	a4 f4       	brge	.+40     	; 0x92c <turn+0x72>
	oi_set_wheels(0,0);
}

// Turn turnDegree
void turn(int turnDegrees, oi_t * sensor_data){
	int currentDegrees = 0;
     904:	c0 e0       	ldi	r28, 0x00	; 0
     906:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
		wait_ms(40);
     908:	88 e2       	ldi	r24, 0x28	; 40
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	68 d2       	rcall	.+1232   	; 0xdde <wait_ms>
		oi_update(sensor_data);
     90e:	c8 01       	movw	r24, r16
     910:	c2 d0       	rcall	.+388    	; 0xa96 <oi_update>
		currentDegrees += abs(sensor_data->angle);
     912:	f8 01       	movw	r30, r16
     914:	26 85       	ldd	r18, Z+14	; 0x0e
     916:	37 85       	ldd	r19, Z+15	; 0x0f
     918:	33 23       	and	r19, r19
     91a:	1c f4       	brge	.+6      	; 0x922 <turn+0x68>
     91c:	31 95       	neg	r19
     91e:	21 95       	neg	r18
     920:	31 09       	sbc	r19, r1
     922:	c2 0f       	add	r28, r18
     924:	d3 1f       	adc	r29, r19
	
	oi_set_wheels((turnDegrees / 3) * 2,(-1 * turnDegrees / 3) * 2);
	
	turnDegrees = abs(turnDegrees);

	while ( currentDegrees < turnDegrees ) {
     926:	ce 15       	cp	r28, r14
     928:	df 05       	cpc	r29, r15
     92a:	74 f3       	brlt	.-36     	; 0x908 <turn+0x4e>
		wait_ms(40);
		oi_update(sensor_data);
		currentDegrees += abs(sensor_data->angle);
	}
	
	oi_set_wheels(0,0); //Stop
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	91 d0       	rcall	.+290    	; 0xa58 <oi_set_wheels>
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <detectCollision>:

// Detect and react to collision - TODO: Different collision detection subroutine?
int detectCollision(oi_t * sensor_data){
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
	int left_hit = sensor_data->bumper_left;
	int right_hit = sensor_data->bumper_right;
     94a:	88 81       	ld	r24, Y
     94c:	98 2f       	mov	r25, r24
     94e:	91 70       	andi	r25, 0x01	; 1
	
	if ( left_hit || right_hit ) {
     950:	81 fd       	sbrc	r24, 1
     952:	02 c0       	rjmp	.+4      	; 0x958 <detectCollision+0x14>
     954:	99 23       	and	r25, r25
     956:	51 f0       	breq	.+20     	; 0x96c <detectCollision+0x28>
		print("Collision!");
     958:	86 e3       	ldi	r24, 0x36	; 54
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	75 dd       	rcall	.-1302   	; 0x448 <print>
		//move(-100, -100, 150, sensor_data);
		turn(105, sensor_data);
     95e:	be 01       	movw	r22, r28
     960:	89 e6       	ldi	r24, 0x69	; 105
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	aa df       	rcall	.-172    	; 0x8ba <turn>
		return 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <detectCollision+0x2c>
	} else {
		return 0;
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	return 0;
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <move>:
#include <avr/io.h>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	7c 01       	movw	r14, r24
     98c:	5b 01       	movw	r10, r22
     98e:	ea 01       	movw	r28, r20
     990:	89 01       	movw	r16, r18
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
     992:	62 d0       	rcall	.+196    	; 0xa58 <oi_set_wheels>
	
	distance = abs(distance);
     994:	6e 01       	movw	r12, r28
     996:	dd 23       	and	r29, r29
     998:	24 f4       	brge	.+8      	; 0x9a2 <move+0x2c>
     99a:	cc 24       	eor	r12, r12
     99c:	dd 24       	eor	r13, r13
     99e:	cc 1a       	sub	r12, r28
     9a0:	dd 0a       	sbc	r13, r29
	
	while (sum < distance) {
     9a2:	1c 14       	cp	r1, r12
     9a4:	1d 04       	cpc	r1, r13
     9a6:	f4 f4       	brge	.+60     	; 0x9e4 <move+0x6e>

#endif /* AVR_IO */

// Move with right, left wheel speed for distance - TODO: Distance is in CM?
void move(int right, int left, int distance, oi_t *sensor_data){
	int sum = 0;
     9a8:	c0 e0       	ldi	r28, 0x00	; 0
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
		oi_update(sensor_data);
     9ac:	c8 01       	movw	r24, r16
     9ae:	73 d0       	rcall	.+230    	; 0xa96 <oi_update>

		if ( right > 0 && left > 0 ) {
     9b0:	1e 14       	cp	r1, r14
     9b2:	1f 04       	cpc	r1, r15
     9b4:	54 f4       	brge	.+20     	; 0x9ca <move+0x54>
     9b6:	1a 14       	cp	r1, r10
     9b8:	1b 04       	cpc	r1, r11
     9ba:	3c f4       	brge	.+14     	; 0x9ca <move+0x54>
			// Only reset the wheels if we stopped
			if ( detectCollision(sensor_data) ) {
     9bc:	c8 01       	movw	r24, r16
     9be:	c2 df       	rcall	.-124    	; 0x944 <detectCollision>
     9c0:	89 2b       	or	r24, r25
     9c2:	19 f0       	breq	.+6      	; 0x9ca <move+0x54>
				oi_set_wheels(right, left);
     9c4:	b5 01       	movw	r22, r10
     9c6:	c7 01       	movw	r24, r14
     9c8:	47 d0       	rcall	.+142    	; 0xa58 <oi_set_wheels>
			}
		}

		sum += abs(sensor_data->distance);
     9ca:	f8 01       	movw	r30, r16
     9cc:	44 85       	ldd	r20, Z+12	; 0x0c
     9ce:	55 85       	ldd	r21, Z+13	; 0x0d
     9d0:	55 23       	and	r21, r21
     9d2:	1c f4       	brge	.+6      	; 0x9da <move+0x64>
     9d4:	51 95       	neg	r21
     9d6:	41 95       	neg	r20
     9d8:	51 09       	sbc	r21, r1
     9da:	c4 0f       	add	r28, r20
     9dc:	d5 1f       	adc	r29, r21
	int sum = 0;
	oi_set_wheels(right, left); // move forward; full speed
	
	distance = abs(distance);
	
	while (sum < distance) {
     9de:	cc 15       	cp	r28, r12
     9e0:	dd 05       	cpc	r29, r13
     9e2:	24 f3       	brlt	.-56     	; 0x9ac <move+0x36>
		}

		sum += abs(sensor_data->distance);
	}
	
	oi_set_wheels(0,0);
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	35 d0       	rcall	.+106    	; 0xa58 <oi_set_wheels>
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	08 95       	ret

00000a04 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     a04:	64 e3       	ldi	r22, 0x34	; 52
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	d3 c4       	rjmp	.+2470   	; 0x13b4 <calloc>
     a0e:	08 95       	ret

00000a10 <oi_byte_tx>:
     a10:	eb e9       	ldi	r30, 0x9B	; 155
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	90 81       	ld	r25, Z
     a16:	95 ff       	sbrs	r25, 5
     a18:	fd cf       	rjmp	.-6      	; 0xa14 <oi_byte_tx+0x4>
     a1a:	80 93 9c 00 	sts	0x009C, r24
     a1e:	08 95       	ret

00000a20 <oi_set_leds>:
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	08 2f       	mov	r16, r24
     a2a:	16 2f       	mov	r17, r22
     a2c:	d4 2f       	mov	r29, r20
     a2e:	c2 2f       	mov	r28, r18
     a30:	8b e8       	ldi	r24, 0x8B	; 139
     a32:	ee df       	rcall	.-36     	; 0xa10 <oi_byte_tx>
     a34:	11 23       	and	r17, r17
     a36:	29 f0       	breq	.+10     	; 0xa42 <oi_set_leds+0x22>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	01 11       	cpse	r16, r1
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <oi_set_leds+0x24>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <oi_set_leds+0x24>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	e5 df       	rcall	.-54     	; 0xa10 <oi_byte_tx>
     a46:	8d 2f       	mov	r24, r29
     a48:	e3 df       	rcall	.-58     	; 0xa10 <oi_byte_tx>
     a4a:	8c 2f       	mov	r24, r28
     a4c:	e1 df       	rcall	.-62     	; 0xa10 <oi_byte_tx>
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <oi_set_wheels>:
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	18 2f       	mov	r17, r24
     a62:	09 2f       	mov	r16, r25
     a64:	c6 2f       	mov	r28, r22
     a66:	d7 2f       	mov	r29, r23
     a68:	81 e9       	ldi	r24, 0x91	; 145
     a6a:	d2 df       	rcall	.-92     	; 0xa10 <oi_byte_tx>
     a6c:	80 2f       	mov	r24, r16
     a6e:	d0 df       	rcall	.-96     	; 0xa10 <oi_byte_tx>
     a70:	81 2f       	mov	r24, r17
     a72:	ce df       	rcall	.-100    	; 0xa10 <oi_byte_tx>
     a74:	8d 2f       	mov	r24, r29
     a76:	cc df       	rcall	.-104    	; 0xa10 <oi_byte_tx>
     a78:	8c 2f       	mov	r24, r28
     a7a:	ca df       	rcall	.-108    	; 0xa10 <oi_byte_tx>
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     a86:	eb e9       	ldi	r30, 0x9B	; 155
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	88 23       	and	r24, r24
     a8e:	ec f7       	brge	.-6      	; 0xa8a <oi_byte_rx+0x4>

	return UDR1;
     a90:	80 91 9c 00 	lds	r24, 0x009C
     a94:	08 95       	ret

00000a96 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     aa4:	80 91 9b 00 	lds	r24, 0x009B
     aa8:	88 23       	and	r24, r24
     aaa:	44 f4       	brge	.+16     	; 0xabc <oi_update+0x26>
		i = UDR1;
     aac:	ac e9       	ldi	r26, 0x9C	; 156
     aae:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ab0:	eb e9       	ldi	r30, 0x9B	; 155
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     ab4:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     ab6:	80 81       	ld	r24, Z
     ab8:	88 23       	and	r24, r24
     aba:	e4 f3       	brlt	.-8      	; 0xab4 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     abc:	8e e8       	ldi	r24, 0x8E	; 142
     abe:	a8 df       	rcall	.-176    	; 0xa10 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	a6 df       	rcall	.-180    	; 0xa10 <oi_byte_tx>
     ac4:	e7 01       	movw	r28, r14
     ac6:	87 01       	movw	r16, r14
     ac8:	0c 5c       	subi	r16, 0xCC	; 204
     aca:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     acc:	dc df       	rcall	.-72     	; 0xa86 <oi_byte_rx>
     ace:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     ad0:	c0 17       	cp	r28, r16
     ad2:	d1 07       	cpc	r29, r17
     ad4:	d9 f7       	brne	.-10     	; 0xacc <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     ad6:	f7 01       	movw	r30, r14
     ad8:	84 85       	ldd	r24, Z+12	; 0x0c
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	98 2f       	mov	r25, r24
     ade:	88 27       	eor	r24, r24
     ae0:	25 85       	ldd	r18, Z+13	; 0x0d
     ae2:	82 0f       	add	r24, r18
     ae4:	91 1d       	adc	r25, r1
     ae6:	95 87       	std	Z+13, r25	; 0x0d
     ae8:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     aea:	86 85       	ldd	r24, Z+14	; 0x0e
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	98 2f       	mov	r25, r24
     af0:	88 27       	eor	r24, r24
     af2:	27 85       	ldd	r18, Z+15	; 0x0f
     af4:	82 0f       	add	r24, r18
     af6:	91 1d       	adc	r25, r1
     af8:	97 87       	std	Z+15, r25	; 0x0f
     afa:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     afc:	81 89       	ldd	r24, Z+17	; 0x11
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	98 2f       	mov	r25, r24
     b02:	88 27       	eor	r24, r24
     b04:	22 89       	ldd	r18, Z+18	; 0x12
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	92 8b       	std	Z+18, r25	; 0x12
     b0c:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     b0e:	83 89       	ldd	r24, Z+19	; 0x13
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	98 2f       	mov	r25, r24
     b14:	88 27       	eor	r24, r24
     b16:	24 89       	ldd	r18, Z+20	; 0x14
     b18:	82 0f       	add	r24, r18
     b1a:	91 1d       	adc	r25, r1
     b1c:	94 8b       	std	Z+20, r25	; 0x14
     b1e:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     b20:	86 89       	ldd	r24, Z+22	; 0x16
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	98 2f       	mov	r25, r24
     b26:	88 27       	eor	r24, r24
     b28:	27 89       	ldd	r18, Z+23	; 0x17
     b2a:	82 0f       	add	r24, r18
     b2c:	91 1d       	adc	r25, r1
     b2e:	97 8b       	std	Z+23, r25	; 0x17
     b30:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     b32:	80 8d       	ldd	r24, Z+24	; 0x18
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	98 2f       	mov	r25, r24
     b38:	88 27       	eor	r24, r24
     b3a:	21 8d       	ldd	r18, Z+25	; 0x19
     b3c:	82 0f       	add	r24, r18
     b3e:	91 1d       	adc	r25, r1
     b40:	91 8f       	std	Z+25, r25	; 0x19
     b42:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     b44:	82 8d       	ldd	r24, Z+26	; 0x1a
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	98 2f       	mov	r25, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	23 8d       	ldd	r18, Z+27	; 0x1b
     b4e:	82 0f       	add	r24, r18
     b50:	91 1d       	adc	r25, r1
     b52:	93 8f       	std	Z+27, r25	; 0x1b
     b54:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     b56:	84 8d       	ldd	r24, Z+28	; 0x1c
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	98 2f       	mov	r25, r24
     b5c:	88 27       	eor	r24, r24
     b5e:	25 8d       	ldd	r18, Z+29	; 0x1d
     b60:	82 0f       	add	r24, r18
     b62:	91 1d       	adc	r25, r1
     b64:	95 8f       	std	Z+29, r25	; 0x1d
     b66:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     b68:	86 8d       	ldd	r24, Z+30	; 0x1e
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	98 2f       	mov	r25, r24
     b6e:	88 27       	eor	r24, r24
     b70:	27 8d       	ldd	r18, Z+31	; 0x1f
     b72:	82 0f       	add	r24, r18
     b74:	91 1d       	adc	r25, r1
     b76:	97 8f       	std	Z+31, r25	; 0x1f
     b78:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     b7a:	80 a1       	ldd	r24, Z+32	; 0x20
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	98 2f       	mov	r25, r24
     b80:	88 27       	eor	r24, r24
     b82:	21 a1       	ldd	r18, Z+33	; 0x21
     b84:	82 0f       	add	r24, r18
     b86:	91 1d       	adc	r25, r1
     b88:	91 a3       	std	Z+33, r25	; 0x21
     b8a:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     b8c:	82 a1       	ldd	r24, Z+34	; 0x22
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	98 2f       	mov	r25, r24
     b92:	88 27       	eor	r24, r24
     b94:	23 a1       	ldd	r18, Z+35	; 0x23
     b96:	82 0f       	add	r24, r18
     b98:	91 1d       	adc	r25, r1
     b9a:	93 a3       	std	Z+35, r25	; 0x23
     b9c:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     b9e:	82 a5       	ldd	r24, Z+42	; 0x2a
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	21 a5       	ldd	r18, Z+41	; 0x29
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	32 2f       	mov	r19, r18
     ba8:	22 27       	eor	r18, r18
     baa:	28 0f       	add	r18, r24
     bac:	39 1f       	adc	r19, r25
     bae:	36 a3       	std	Z+38, r19	; 0x26
     bb0:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     bb2:	20 a9       	ldd	r18, Z+48	; 0x30
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	32 2f       	mov	r19, r18
     bb8:	22 27       	eor	r18, r18
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	95 a7       	std	Z+45, r25	; 0x2d
     bc0:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     bc2:	82 a9       	ldd	r24, Z+50	; 0x32
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	98 2f       	mov	r25, r24
     bc8:	88 27       	eor	r24, r24
     bca:	23 a9       	ldd	r18, Z+51	; 0x33
     bcc:	82 0f       	add	r24, r18
     bce:	91 1d       	adc	r25, r1
     bd0:	97 a7       	std	Z+47, r25	; 0x2f
     bd2:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     bd4:	84 a9       	ldd	r24, Z+52	; 0x34
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	98 2f       	mov	r25, r24
     bda:	88 27       	eor	r24, r24
     bdc:	25 a9       	ldd	r18, Z+53	; 0x35
     bde:	82 0f       	add	r24, r18
     be0:	91 1d       	adc	r25, r1
     be2:	91 ab       	std	Z+49, r25	; 0x31
     be4:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     be6:	86 a9       	ldd	r24, Z+54	; 0x36
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	98 2f       	mov	r25, r24
     bec:	88 27       	eor	r24, r24
     bee:	27 a9       	ldd	r18, Z+55	; 0x37
     bf0:	82 0f       	add	r24, r18
     bf2:	91 1d       	adc	r25, r1
     bf4:	93 ab       	std	Z+51, r25	; 0x33
     bf6:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     bf8:	83 e2       	ldi	r24, 0x23	; 35
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	f0 d0       	rcall	.+480    	; 0xdde <wait_ms>
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	08 95       	ret

00000c0c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     c16:	09 e9       	ldi	r16, 0x99	; 153
     c18:	10 e0       	ldi	r17, 0x00	; 0
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	f8 01       	movw	r30, r16
     c1e:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     c20:	88 e1       	ldi	r24, 0x18	; 24
     c22:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     c26:	86 e0       	ldi	r24, 0x06	; 6
     c28:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     c2c:	80 e8       	ldi	r24, 0x80	; 128
     c2e:	f0 de       	rcall	.-544    	; 0xa10 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     c30:	81 e8       	ldi	r24, 0x81	; 129
     c32:	ee de       	rcall	.-548    	; 0xa10 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     c34:	88 e0       	ldi	r24, 0x08	; 8
     c36:	ec de       	rcall	.-552    	; 0xa10 <oi_byte_tx>
	wait_ms(100);
     c38:	84 e6       	ldi	r24, 0x64	; 100
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	d0 d0       	rcall	.+416    	; 0xdde <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     c3e:	81 e2       	ldi	r24, 0x21	; 33
     c40:	f8 01       	movw	r30, r16
     c42:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     c44:	84 e8       	ldi	r24, 0x84	; 132
     c46:	e4 de       	rcall	.-568    	; 0xa10 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     c48:	2f ef       	ldi	r18, 0xFF	; 255
     c4a:	47 e0       	ldi	r20, 0x07	; 7
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	e7 de       	rcall	.-562    	; 0xa20 <oi_set_leds>
	
	oi_update(self);
     c52:	ce 01       	movw	r24, r28
     c54:	20 df       	rcall	.-448    	; 0xa96 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     c56:	ce 01       	movw	r24, r28
     c58:	1e df       	rcall	.-452    	; 0xa96 <oi_update>
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <timer3_init>:
#define DEGREE_MULTIPLIER 20.5
#define DEGREE_OFFSET 700

// Initialize timer for Serve sensor
void timer3_init() {
	TCCR3A = 0b00100011; //OCRA for top, compare on B
     c64:	83 e2       	ldi	r24, 0x23	; 35
     c66:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b00011010; //ocra for top, 8 prescalar
     c6a:	8a e1       	ldi	r24, 0x1A	; 26
     c6c:	80 93 8a 00 	sts	0x008A, r24
	OCR3A = TOP; // set top
     c70:	88 ef       	ldi	r24, 0xF8	; 248
     c72:	97 ea       	ldi	r25, 0xA7	; 167
     c74:	90 93 87 00 	sts	0x0087, r25
     c78:	80 93 86 00 	sts	0x0086, r24
	OCR3B = pulse_width; // set initial pulse width
     c7c:	80 91 26 01 	lds	r24, 0x0126
     c80:	90 91 27 01 	lds	r25, 0x0127
     c84:	90 93 85 00 	sts	0x0085, r25
     c88:	80 93 84 00 	sts	0x0084, r24
	DDRE |= _BV(4);
     c8c:	14 9a       	sbi	0x02, 4	; 2
     c8e:	08 95       	ret

00000c90 <move_servo>:
}

// Move servo to angle degree
void move_servo(unsigned degree) {
	pulse_width = DEGREE_MULTIPLIER * degree + DEGREE_OFFSET; // calculate pulse width in cycles
     c90:	bc 01       	movw	r22, r24
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	d5 d1       	rcall	.+938    	; 0x1042 <__floatunsisf>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	44 ea       	ldi	r20, 0xA4	; 164
     c9e:	51 e4       	ldi	r21, 0x41	; 65
     ca0:	bb d2       	rcall	.+1398   	; 0x1218 <__mulsf3>
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	4f e2       	ldi	r20, 0x2F	; 47
     ca8:	54 e4       	ldi	r21, 0x44	; 68
     caa:	c7 d0       	rcall	.+398    	; 0xe3a <__addsf3>
     cac:	9e d1       	rcall	.+828    	; 0xfea <__fixunssfsi>
     cae:	70 93 27 01 	sts	0x0127, r23
     cb2:	60 93 26 01 	sts	0x0126, r22
	OCR3B = pulse_width; // set pulse width
     cb6:	70 93 85 00 	sts	0x0085, r23
     cba:	60 93 84 00 	sts	0x0084, r22
	wait_ms(30);
     cbe:	8e e1       	ldi	r24, 0x1E	; 30
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	8d c0       	rjmp	.+282    	; 0xdde <wait_ms>
     cc4:	08 95       	ret

00000cc6 <__vector_11>:
volatile enum {RISING, FALLING, DONE} state;
volatile unsigned rising_time = 0;
volatile unsigned falling_time = 0;

// ISR for edge processing
ISR(TIMER1_CAPT_vect){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
	//state = DONE;
	if ( state == RISING ) {
     cd4:	80 91 97 02 	lds	r24, 0x0297
     cd8:	81 11       	cpse	r24, r1
     cda:	0d c0       	rjmp	.+26     	; 0xcf6 <__vector_11+0x30>
		rising_time = ICR1;
     cdc:	86 b5       	in	r24, 0x26	; 38
     cde:	97 b5       	in	r25, 0x27	; 39
     ce0:	90 93 96 02 	sts	0x0296, r25
     ce4:	80 93 95 02 	sts	0x0295, r24
		TCCR1B &= 0b10111111; //Wait for falling edge
     ce8:	8e b5       	in	r24, 0x2e	; 46
     cea:	8f 7b       	andi	r24, 0xBF	; 191
     cec:	8e bd       	out	0x2e, r24	; 46
		state = FALLING;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	80 93 97 02 	sts	0x0297, r24
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <__vector_11+0x4a>
		} else if ( state == FALLING) {
     cf6:	80 91 97 02 	lds	r24, 0x0297
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	49 f4       	brne	.+18     	; 0xd10 <__vector_11+0x4a>
		falling_time = ICR1;
     cfe:	86 b5       	in	r24, 0x26	; 38
     d00:	97 b5       	in	r25, 0x27	; 39
     d02:	90 93 94 02 	sts	0x0294, r25
     d06:	80 93 93 02 	sts	0x0293, r24
		state = DONE;
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	80 93 97 02 	sts	0x0297, r24
	}
}
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <time_to_dist>:

// Convert time difference to a distance in cm
float time_to_dist(){
	float timeDifference = (falling_time - rising_time) / 2; //one way distance
     d1e:	60 91 93 02 	lds	r22, 0x0293
     d22:	70 91 94 02 	lds	r23, 0x0294
     d26:	80 91 95 02 	lds	r24, 0x0295
     d2a:	90 91 96 02 	lds	r25, 0x0296
     d2e:	68 1b       	sub	r22, r24
     d30:	79 0b       	sbc	r23, r25
     d32:	76 95       	lsr	r23
     d34:	67 95       	ror	r22
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	83 d1       	rcall	.+774    	; 0x1042 <__floatunsisf>
	timeDifference = timeDifference / 15625; //Clock cycles per second with prescalar
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	34 e2       	ldi	r19, 0x24	; 36
     d40:	44 e7       	ldi	r20, 0x74	; 116
     d42:	56 e4       	ldi	r21, 0x46	; 70
     d44:	e5 d0       	rcall	.+458    	; 0xf10 <__divsf3>
	timeDifference = timeDifference * 340; //Seconds difference * 340 m/s (speed of sound) --> meters
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	4a ea       	ldi	r20, 0xAA	; 170
     d4c:	53 e4       	ldi	r21, 0x43	; 67
     d4e:	64 d2       	rcall	.+1224   	; 0x1218 <__mulsf3>
	timeDifference = timeDifference * 100; //meters --> cm
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	48 ec       	ldi	r20, 0xC8	; 200
     d56:	52 e4       	ldi	r21, 0x42	; 66
     d58:	5f c2       	rjmp	.+1214   	; 0x1218 <__mulsf3>
	return timeDifference;
}
     d5a:	08 95       	ret

00000d5c <timer1_init>:

// Initialize timer1 for Sonar distance reading
void timer1_init(){
	TCCR1A =  0b00000000; //Set to input capture
     d5c:	1f bc       	out	0x2f, r1	; 47
	TCCR1C &= 0b00000000; //Sets output compare a,b,c to 0
     d5e:	ea e7       	ldi	r30, 0x7A	; 122
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	10 82       	st	Z, r1
	TIFR |=  0b00100000;
     d66:	86 b7       	in	r24, 0x36	; 54
     d68:	80 62       	ori	r24, 0x20	; 32
     d6a:	86 bf       	out	0x36, r24	; 54
	TIMSK |=  0b00100000; //Enable ic interrupt, overflow interrupt
     d6c:	87 b7       	in	r24, 0x37	; 55
     d6e:	80 62       	ori	r24, 0x20	; 32
     d70:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000101; //Noise cancel, select rising edge, choose 1024 prescalar
     d72:	85 ec       	ldi	r24, 0xC5	; 197
     d74:	8e bd       	out	0x2e, r24	; 46
     d76:	08 95       	ret

00000d78 <timer1_stop>:
}

// Stop timer 1 for Sonar distance reading
void timer1_stop() {
	TIMSK &= 0b11011011; //Disabling ic interrupt for Timer1
     d78:	87 b7       	in	r24, 0x37	; 55
     d7a:	8b 7d       	andi	r24, 0xDB	; 219
     d7c:	87 bf       	out	0x37, r24	; 55
     d7e:	08 95       	ret

00000d80 <send_pulse>:
}

// Send a Sonar pulse for Sonar distance reading
void send_pulse(){
	DDRD |= 0x10; //Enable output to SONAR
     d80:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10; //Output to pin 4 (SONAR) - i.e, pulse
     d82:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1); //Wait 1 ms
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2a d0       	rcall	.+84     	; 0xdde <wait_ms>
	PORTD &= 0xEF; //Set pin 4 to 0 (Clear value)
     d8a:	94 98       	cbi	0x12, 4	; 18
	DDRD &= 0xEF; //Enable input from pin 4 (SONAR)
     d8c:	8c 98       	cbi	0x11, 4	; 17
     d8e:	08 95       	ret

00000d90 <ping_read>:
}

// Leverage sonar sensor for a CM distance
float ping_read(){
	state = RISING;
     d90:	10 92 97 02 	sts	0x0297, r1
	
	//Disable timer 1, clear flag
	timer1_stop();
     d94:	f1 df       	rcall	.-30     	; 0xd78 <timer1_stop>
	
	//Send sonar pulse and prepare for input
	send_pulse();
     d96:	f4 df       	rcall	.-24     	; 0xd80 <send_pulse>
	
	//Enable interrupt
	timer1_init();
     d98:	e1 df       	rcall	.-62     	; 0xd5c <timer1_init>
	
	while ( state != DONE) {} //Busy wait for reading
     d9a:	80 91 97 02 	lds	r24, 0x0297
     d9e:	82 30       	cpi	r24, 0x02	; 2
     da0:	e1 f7       	brne	.-8      	; 0xd9a <ping_read+0xa>
	
	//Return difference
	return time_to_dist();
     da2:	bd cf       	rjmp	.-134    	; 0xd1e <time_to_dist>
     da4:	08 95       	ret

00000da6 <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
     da6:	10 92 99 02 	sts	0x0299, r1
     daa:	10 92 98 02 	sts	0x0298, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
     dae:	81 11       	cpse	r24, r1
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     db2:	8b e0       	ldi	r24, 0x0B	; 11
     db4:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     db6:	87 b7       	in	r24, 0x37	; 55
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	87 bf       	out	0x37, r24	; 55
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	29 f4       	brne	.+10     	; 0xdcc <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     dc6:	87 b7       	in	r24, 0x37	; 55
     dc8:	80 68       	ori	r24, 0x80	; 128
     dca:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     dcc:	78 94       	sei
     dce:	08 95       	ret

00000dd0 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     dd0:	87 b7       	in	r24, 0x37	; 55
     dd2:	8f 77       	andi	r24, 0x7F	; 127
     dd4:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     dd6:	85 b5       	in	r24, 0x25	; 37
     dd8:	8f 77       	andi	r24, 0x7F	; 127
     dda:	85 bd       	out	0x25, r24	; 37
     ddc:	08 95       	ret

00000dde <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     de4:	8a ef       	ldi	r24, 0xFA	; 250
     de6:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     de8:	10 92 99 02 	sts	0x0299, r1
     dec:	10 92 98 02 	sts	0x0298, r1
	timer2_start(0);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	d9 df       	rcall	.-78     	; 0xda6 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     df4:	20 91 98 02 	lds	r18, 0x0298
     df8:	30 91 99 02 	lds	r19, 0x0299
     dfc:	2c 17       	cp	r18, r28
     dfe:	3d 07       	cpc	r19, r29
     e00:	c8 f3       	brcs	.-14     	; 0xdf4 <wait_ms+0x16>

	timer2_stop();
     e02:	e6 df       	rcall	.-52     	; 0xdd0 <timer2_stop>
}
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
	timer2_tick++;
     e18:	80 91 98 02 	lds	r24, 0x0298
     e1c:	90 91 99 02 	lds	r25, 0x0299
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	90 93 99 02 	sts	0x0299, r25
     e26:	80 93 98 02 	sts	0x0298, r24
}
     e2a:	9f 91       	pop	r25
     e2c:	8f 91       	pop	r24
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <__subsf3>:
     e38:	50 58       	subi	r21, 0x80	; 128

00000e3a <__addsf3>:
     e3a:	bb 27       	eor	r27, r27
     e3c:	aa 27       	eor	r26, r26
     e3e:	0e d0       	rcall	.+28     	; 0xe5c <__addsf3x>
     e40:	a0 c1       	rjmp	.+832    	; 0x1182 <__fp_round>
     e42:	69 d1       	rcall	.+722    	; 0x1116 <__fp_pscA>
     e44:	30 f0       	brcs	.+12     	; 0xe52 <__addsf3+0x18>
     e46:	6e d1       	rcall	.+732    	; 0x1124 <__fp_pscB>
     e48:	20 f0       	brcs	.+8      	; 0xe52 <__addsf3+0x18>
     e4a:	31 f4       	brne	.+12     	; 0xe58 <__addsf3+0x1e>
     e4c:	9f 3f       	cpi	r25, 0xFF	; 255
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__addsf3+0x1a>
     e50:	1e f4       	brtc	.+6      	; 0xe58 <__addsf3+0x1e>
     e52:	5e c1       	rjmp	.+700    	; 0x1110 <__fp_nan>
     e54:	0e f4       	brtc	.+2      	; 0xe58 <__addsf3+0x1e>
     e56:	e0 95       	com	r30
     e58:	e7 fb       	bst	r30, 7
     e5a:	54 c1       	rjmp	.+680    	; 0x1104 <__fp_inf>

00000e5c <__addsf3x>:
     e5c:	e9 2f       	mov	r30, r25
     e5e:	b3 d1       	rcall	.+870    	; 0x11c6 <__fp_split3>
     e60:	80 f3       	brcs	.-32     	; 0xe42 <__addsf3+0x8>
     e62:	ba 17       	cp	r27, r26
     e64:	62 07       	cpc	r22, r18
     e66:	73 07       	cpc	r23, r19
     e68:	84 07       	cpc	r24, r20
     e6a:	95 07       	cpc	r25, r21
     e6c:	18 f0       	brcs	.+6      	; 0xe74 <__addsf3x+0x18>
     e6e:	71 f4       	brne	.+28     	; 0xe8c <__addsf3x+0x30>
     e70:	9e f5       	brtc	.+102    	; 0xed8 <__addsf3x+0x7c>
     e72:	cb c1       	rjmp	.+918    	; 0x120a <__fp_zero>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3x+0x1c>
     e76:	e0 95       	com	r30
     e78:	0b 2e       	mov	r0, r27
     e7a:	ba 2f       	mov	r27, r26
     e7c:	a0 2d       	mov	r26, r0
     e7e:	0b 01       	movw	r0, r22
     e80:	b9 01       	movw	r22, r18
     e82:	90 01       	movw	r18, r0
     e84:	0c 01       	movw	r0, r24
     e86:	ca 01       	movw	r24, r20
     e88:	a0 01       	movw	r20, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	ff 27       	eor	r31, r31
     e8e:	59 1b       	sub	r21, r25
     e90:	99 f0       	breq	.+38     	; 0xeb8 <__addsf3x+0x5c>
     e92:	59 3f       	cpi	r21, 0xF9	; 249
     e94:	50 f4       	brcc	.+20     	; 0xeaa <__addsf3x+0x4e>
     e96:	50 3e       	cpi	r21, 0xE0	; 224
     e98:	68 f1       	brcs	.+90     	; 0xef4 <__addsf3x+0x98>
     e9a:	1a 16       	cp	r1, r26
     e9c:	f0 40       	sbci	r31, 0x00	; 0
     e9e:	a2 2f       	mov	r26, r18
     ea0:	23 2f       	mov	r18, r19
     ea2:	34 2f       	mov	r19, r20
     ea4:	44 27       	eor	r20, r20
     ea6:	58 5f       	subi	r21, 0xF8	; 248
     ea8:	f3 cf       	rjmp	.-26     	; 0xe90 <__addsf3x+0x34>
     eaa:	46 95       	lsr	r20
     eac:	37 95       	ror	r19
     eae:	27 95       	ror	r18
     eb0:	a7 95       	ror	r26
     eb2:	f0 40       	sbci	r31, 0x00	; 0
     eb4:	53 95       	inc	r21
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__addsf3x+0x4e>
     eb8:	7e f4       	brtc	.+30     	; 0xed8 <__addsf3x+0x7c>
     eba:	1f 16       	cp	r1, r31
     ebc:	ba 0b       	sbc	r27, r26
     ebe:	62 0b       	sbc	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	ba f0       	brmi	.+46     	; 0xef4 <__addsf3x+0x98>
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	a1 f0       	breq	.+40     	; 0xef2 <__addsf3x+0x96>
     eca:	ff 0f       	add	r31, r31
     ecc:	bb 1f       	adc	r27, r27
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	c2 f7       	brpl	.-16     	; 0xec6 <__addsf3x+0x6a>
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <__addsf3x+0x98>
     ed8:	ba 0f       	add	r27, r26
     eda:	62 1f       	adc	r22, r18
     edc:	73 1f       	adc	r23, r19
     ede:	84 1f       	adc	r24, r20
     ee0:	48 f4       	brcc	.+18     	; 0xef4 <__addsf3x+0x98>
     ee2:	87 95       	ror	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b7 95       	ror	r27
     eea:	f7 95       	ror	r31
     eec:	9e 3f       	cpi	r25, 0xFE	; 254
     eee:	08 f0       	brcs	.+2      	; 0xef2 <__addsf3x+0x96>
     ef0:	b3 cf       	rjmp	.-154    	; 0xe58 <__addsf3+0x1e>
     ef2:	93 95       	inc	r25
     ef4:	88 0f       	add	r24, r24
     ef6:	08 f0       	brcs	.+2      	; 0xefa <__addsf3x+0x9e>
     ef8:	99 27       	eor	r25, r25
     efa:	ee 0f       	add	r30, r30
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	08 95       	ret

00000f02 <__cmpsf2>:
     f02:	dc d0       	rcall	.+440    	; 0x10bc <__fp_cmp>
     f04:	08 f4       	brcc	.+2      	; 0xf08 <__cmpsf2+0x6>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	08 95       	ret

00000f0a <cos>:
     f0a:	14 d1       	rcall	.+552    	; 0x1134 <__fp_rempio2>
     f0c:	e3 95       	inc	r30
     f0e:	4a c1       	rjmp	.+660    	; 0x11a4 <__fp_sinus>

00000f10 <__divsf3>:
     f10:	0c d0       	rcall	.+24     	; 0xf2a <__divsf3x>
     f12:	37 c1       	rjmp	.+622    	; 0x1182 <__fp_round>
     f14:	07 d1       	rcall	.+526    	; 0x1124 <__fp_pscB>
     f16:	40 f0       	brcs	.+16     	; 0xf28 <__divsf3+0x18>
     f18:	fe d0       	rcall	.+508    	; 0x1116 <__fp_pscA>
     f1a:	30 f0       	brcs	.+12     	; 0xf28 <__divsf3+0x18>
     f1c:	21 f4       	brne	.+8      	; 0xf26 <__divsf3+0x16>
     f1e:	5f 3f       	cpi	r21, 0xFF	; 255
     f20:	19 f0       	breq	.+6      	; 0xf28 <__divsf3+0x18>
     f22:	f0 c0       	rjmp	.+480    	; 0x1104 <__fp_inf>
     f24:	51 11       	cpse	r21, r1
     f26:	72 c1       	rjmp	.+740    	; 0x120c <__fp_szero>
     f28:	f3 c0       	rjmp	.+486    	; 0x1110 <__fp_nan>

00000f2a <__divsf3x>:
     f2a:	4d d1       	rcall	.+666    	; 0x11c6 <__fp_split3>
     f2c:	98 f3       	brcs	.-26     	; 0xf14 <__divsf3+0x4>

00000f2e <__divsf3_pse>:
     f2e:	99 23       	and	r25, r25
     f30:	c9 f3       	breq	.-14     	; 0xf24 <__divsf3+0x14>
     f32:	55 23       	and	r21, r21
     f34:	b1 f3       	breq	.-20     	; 0xf22 <__divsf3+0x12>
     f36:	95 1b       	sub	r25, r21
     f38:	55 0b       	sbc	r21, r21
     f3a:	bb 27       	eor	r27, r27
     f3c:	aa 27       	eor	r26, r26
     f3e:	62 17       	cp	r22, r18
     f40:	73 07       	cpc	r23, r19
     f42:	84 07       	cpc	r24, r20
     f44:	38 f0       	brcs	.+14     	; 0xf54 <__divsf3_pse+0x26>
     f46:	9f 5f       	subi	r25, 0xFF	; 255
     f48:	5f 4f       	sbci	r21, 0xFF	; 255
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	44 1f       	adc	r20, r20
     f50:	aa 1f       	adc	r26, r26
     f52:	a9 f3       	breq	.-22     	; 0xf3e <__divsf3_pse+0x10>
     f54:	33 d0       	rcall	.+102    	; 0xfbc <__divsf3_pse+0x8e>
     f56:	0e 2e       	mov	r0, r30
     f58:	3a f0       	brmi	.+14     	; 0xf68 <__divsf3_pse+0x3a>
     f5a:	e0 e8       	ldi	r30, 0x80	; 128
     f5c:	30 d0       	rcall	.+96     	; 0xfbe <__divsf3_pse+0x90>
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	e6 95       	lsr	r30
     f64:	00 1c       	adc	r0, r0
     f66:	ca f7       	brpl	.-14     	; 0xf5a <__divsf3_pse+0x2c>
     f68:	29 d0       	rcall	.+82     	; 0xfbc <__divsf3_pse+0x8e>
     f6a:	fe 2f       	mov	r31, r30
     f6c:	27 d0       	rcall	.+78     	; 0xfbc <__divsf3_pse+0x8e>
     f6e:	66 0f       	add	r22, r22
     f70:	77 1f       	adc	r23, r23
     f72:	88 1f       	adc	r24, r24
     f74:	bb 1f       	adc	r27, r27
     f76:	26 17       	cp	r18, r22
     f78:	37 07       	cpc	r19, r23
     f7a:	48 07       	cpc	r20, r24
     f7c:	ab 07       	cpc	r26, r27
     f7e:	b0 e8       	ldi	r27, 0x80	; 128
     f80:	09 f0       	breq	.+2      	; 0xf84 <__divsf3_pse+0x56>
     f82:	bb 0b       	sbc	r27, r27
     f84:	80 2d       	mov	r24, r0
     f86:	bf 01       	movw	r22, r30
     f88:	ff 27       	eor	r31, r31
     f8a:	93 58       	subi	r25, 0x83	; 131
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255
     f8e:	2a f0       	brmi	.+10     	; 0xf9a <__divsf3_pse+0x6c>
     f90:	9e 3f       	cpi	r25, 0xFE	; 254
     f92:	51 05       	cpc	r21, r1
     f94:	68 f0       	brcs	.+26     	; 0xfb0 <__divsf3_pse+0x82>
     f96:	b6 c0       	rjmp	.+364    	; 0x1104 <__fp_inf>
     f98:	39 c1       	rjmp	.+626    	; 0x120c <__fp_szero>
     f9a:	5f 3f       	cpi	r21, 0xFF	; 255
     f9c:	ec f3       	brlt	.-6      	; 0xf98 <__divsf3_pse+0x6a>
     f9e:	98 3e       	cpi	r25, 0xE8	; 232
     fa0:	dc f3       	brlt	.-10     	; 0xf98 <__divsf3_pse+0x6a>
     fa2:	86 95       	lsr	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f7 95       	ror	r31
     fac:	9f 5f       	subi	r25, 0xFF	; 255
     fae:	c9 f7       	brne	.-14     	; 0xfa2 <__divsf3_pse+0x74>
     fb0:	88 0f       	add	r24, r24
     fb2:	91 1d       	adc	r25, r1
     fb4:	96 95       	lsr	r25
     fb6:	87 95       	ror	r24
     fb8:	97 f9       	bld	r25, 7
     fba:	08 95       	ret
     fbc:	e1 e0       	ldi	r30, 0x01	; 1
     fbe:	66 0f       	add	r22, r22
     fc0:	77 1f       	adc	r23, r23
     fc2:	88 1f       	adc	r24, r24
     fc4:	bb 1f       	adc	r27, r27
     fc6:	62 17       	cp	r22, r18
     fc8:	73 07       	cpc	r23, r19
     fca:	84 07       	cpc	r24, r20
     fcc:	ba 07       	cpc	r27, r26
     fce:	20 f0       	brcs	.+8      	; 0xfd8 <__divsf3_pse+0xaa>
     fd0:	62 1b       	sub	r22, r18
     fd2:	73 0b       	sbc	r23, r19
     fd4:	84 0b       	sbc	r24, r20
     fd6:	ba 0b       	sbc	r27, r26
     fd8:	ee 1f       	adc	r30, r30
     fda:	88 f7       	brcc	.-30     	; 0xfbe <__divsf3_pse+0x90>
     fdc:	e0 95       	com	r30
     fde:	08 95       	ret

00000fe0 <__fixsfsi>:
     fe0:	04 d0       	rcall	.+8      	; 0xfea <__fixunssfsi>
     fe2:	68 94       	set
     fe4:	b1 11       	cpse	r27, r1
     fe6:	12 c1       	rjmp	.+548    	; 0x120c <__fp_szero>
     fe8:	08 95       	ret

00000fea <__fixunssfsi>:
     fea:	f5 d0       	rcall	.+490    	; 0x11d6 <__fp_splitA>
     fec:	88 f0       	brcs	.+34     	; 0x1010 <__fixunssfsi+0x26>
     fee:	9f 57       	subi	r25, 0x7F	; 127
     ff0:	90 f0       	brcs	.+36     	; 0x1016 <__fixunssfsi+0x2c>
     ff2:	b9 2f       	mov	r27, r25
     ff4:	99 27       	eor	r25, r25
     ff6:	b7 51       	subi	r27, 0x17	; 23
     ff8:	a0 f0       	brcs	.+40     	; 0x1022 <__fixunssfsi+0x38>
     ffa:	d1 f0       	breq	.+52     	; 0x1030 <__fixunssfsi+0x46>
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	1a f0       	brmi	.+6      	; 0x100c <__fixunssfsi+0x22>
    1006:	ba 95       	dec	r27
    1008:	c9 f7       	brne	.-14     	; 0xffc <__fixunssfsi+0x12>
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <__fixunssfsi+0x46>
    100c:	b1 30       	cpi	r27, 0x01	; 1
    100e:	81 f0       	breq	.+32     	; 0x1030 <__fixunssfsi+0x46>
    1010:	fc d0       	rcall	.+504    	; 0x120a <__fp_zero>
    1012:	b1 e0       	ldi	r27, 0x01	; 1
    1014:	08 95       	ret
    1016:	f9 c0       	rjmp	.+498    	; 0x120a <__fp_zero>
    1018:	67 2f       	mov	r22, r23
    101a:	78 2f       	mov	r23, r24
    101c:	88 27       	eor	r24, r24
    101e:	b8 5f       	subi	r27, 0xF8	; 248
    1020:	39 f0       	breq	.+14     	; 0x1030 <__fixunssfsi+0x46>
    1022:	b9 3f       	cpi	r27, 0xF9	; 249
    1024:	cc f3       	brlt	.-14     	; 0x1018 <__fixunssfsi+0x2e>
    1026:	86 95       	lsr	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b3 95       	inc	r27
    102e:	d9 f7       	brne	.-10     	; 0x1026 <__fixunssfsi+0x3c>
    1030:	3e f4       	brtc	.+14     	; 0x1040 <__fixunssfsi+0x56>
    1032:	90 95       	com	r25
    1034:	80 95       	com	r24
    1036:	70 95       	com	r23
    1038:	61 95       	neg	r22
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	08 95       	ret

00001042 <__floatunsisf>:
    1042:	e8 94       	clt
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <__floatsisf+0x12>

00001046 <__floatsisf>:
    1046:	97 fb       	bst	r25, 7
    1048:	3e f4       	brtc	.+14     	; 0x1058 <__floatsisf+0x12>
    104a:	90 95       	com	r25
    104c:	80 95       	com	r24
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	99 23       	and	r25, r25
    105a:	a9 f0       	breq	.+42     	; 0x1086 <__floatsisf+0x40>
    105c:	f9 2f       	mov	r31, r25
    105e:	96 e9       	ldi	r25, 0x96	; 150
    1060:	bb 27       	eor	r27, r27
    1062:	93 95       	inc	r25
    1064:	f6 95       	lsr	r31
    1066:	87 95       	ror	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b7 95       	ror	r27
    106e:	f1 11       	cpse	r31, r1
    1070:	f8 cf       	rjmp	.-16     	; 0x1062 <__floatsisf+0x1c>
    1072:	fa f4       	brpl	.+62     	; 0x10b2 <__floatsisf+0x6c>
    1074:	bb 0f       	add	r27, r27
    1076:	11 f4       	brne	.+4      	; 0x107c <__floatsisf+0x36>
    1078:	60 ff       	sbrs	r22, 0
    107a:	1b c0       	rjmp	.+54     	; 0x10b2 <__floatsisf+0x6c>
    107c:	6f 5f       	subi	r22, 0xFF	; 255
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	8f 4f       	sbci	r24, 0xFF	; 255
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <__floatsisf+0x6c>
    1086:	88 23       	and	r24, r24
    1088:	11 f0       	breq	.+4      	; 0x108e <__floatsisf+0x48>
    108a:	96 e9       	ldi	r25, 0x96	; 150
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <__floatsisf+0x6a>
    108e:	77 23       	and	r23, r23
    1090:	21 f0       	breq	.+8      	; 0x109a <__floatsisf+0x54>
    1092:	9e e8       	ldi	r25, 0x8E	; 142
    1094:	87 2f       	mov	r24, r23
    1096:	76 2f       	mov	r23, r22
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__floatsisf+0x5e>
    109a:	66 23       	and	r22, r22
    109c:	71 f0       	breq	.+28     	; 0x10ba <__floatsisf+0x74>
    109e:	96 e8       	ldi	r25, 0x86	; 134
    10a0:	86 2f       	mov	r24, r22
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	2a f0       	brmi	.+10     	; 0x10b2 <__floatsisf+0x6c>
    10a8:	9a 95       	dec	r25
    10aa:	66 0f       	add	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	88 1f       	adc	r24, r24
    10b0:	da f7       	brpl	.-10     	; 0x10a8 <__floatsisf+0x62>
    10b2:	88 0f       	add	r24, r24
    10b4:	96 95       	lsr	r25
    10b6:	87 95       	ror	r24
    10b8:	97 f9       	bld	r25, 7
    10ba:	08 95       	ret

000010bc <__fp_cmp>:
    10bc:	99 0f       	add	r25, r25
    10be:	00 08       	sbc	r0, r0
    10c0:	55 0f       	add	r21, r21
    10c2:	aa 0b       	sbc	r26, r26
    10c4:	e0 e8       	ldi	r30, 0x80	; 128
    10c6:	fe ef       	ldi	r31, 0xFE	; 254
    10c8:	16 16       	cp	r1, r22
    10ca:	17 06       	cpc	r1, r23
    10cc:	e8 07       	cpc	r30, r24
    10ce:	f9 07       	cpc	r31, r25
    10d0:	c0 f0       	brcs	.+48     	; 0x1102 <__stack+0x3>
    10d2:	12 16       	cp	r1, r18
    10d4:	13 06       	cpc	r1, r19
    10d6:	e4 07       	cpc	r30, r20
    10d8:	f5 07       	cpc	r31, r21
    10da:	98 f0       	brcs	.+38     	; 0x1102 <__stack+0x3>
    10dc:	62 1b       	sub	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	95 0b       	sbc	r25, r21
    10e4:	39 f4       	brne	.+14     	; 0x10f4 <__fp_cmp+0x38>
    10e6:	0a 26       	eor	r0, r26
    10e8:	61 f0       	breq	.+24     	; 0x1102 <__stack+0x3>
    10ea:	23 2b       	or	r18, r19
    10ec:	24 2b       	or	r18, r20
    10ee:	25 2b       	or	r18, r21
    10f0:	21 f4       	brne	.+8      	; 0x10fa <__fp_cmp+0x3e>
    10f2:	08 95       	ret
    10f4:	0a 26       	eor	r0, r26
    10f6:	09 f4       	brne	.+2      	; 0x10fa <__fp_cmp+0x3e>
    10f8:	a1 40       	sbci	r26, 0x01	; 1
    10fa:	a6 95       	lsr	r26
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	81 1d       	adc	r24, r1
    1100:	81 1d       	adc	r24, r1
    1102:	08 95       	ret

00001104 <__fp_inf>:
    1104:	97 f9       	bld	r25, 7
    1106:	9f 67       	ori	r25, 0x7F	; 127
    1108:	80 e8       	ldi	r24, 0x80	; 128
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	08 95       	ret

00001110 <__fp_nan>:
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	80 ec       	ldi	r24, 0xC0	; 192
    1114:	08 95       	ret

00001116 <__fp_pscA>:
    1116:	00 24       	eor	r0, r0
    1118:	0a 94       	dec	r0
    111a:	16 16       	cp	r1, r22
    111c:	17 06       	cpc	r1, r23
    111e:	18 06       	cpc	r1, r24
    1120:	09 06       	cpc	r0, r25
    1122:	08 95       	ret

00001124 <__fp_pscB>:
    1124:	00 24       	eor	r0, r0
    1126:	0a 94       	dec	r0
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	05 06       	cpc	r0, r21
    1130:	08 95       	ret
    1132:	ee cf       	rjmp	.-36     	; 0x1110 <__fp_nan>

00001134 <__fp_rempio2>:
    1134:	50 d0       	rcall	.+160    	; 0x11d6 <__fp_splitA>
    1136:	e8 f3       	brcs	.-6      	; 0x1132 <__fp_pscB+0xe>
    1138:	e8 94       	clt
    113a:	e0 e0       	ldi	r30, 0x00	; 0
    113c:	bb 27       	eor	r27, r27
    113e:	9f 57       	subi	r25, 0x7F	; 127
    1140:	f0 f0       	brcs	.+60     	; 0x117e <__fp_rempio2+0x4a>
    1142:	2a ed       	ldi	r18, 0xDA	; 218
    1144:	3f e0       	ldi	r19, 0x0F	; 15
    1146:	49 ec       	ldi	r20, 0xC9	; 201
    1148:	06 c0       	rjmp	.+12     	; 0x1156 <__fp_rempio2+0x22>
    114a:	ee 0f       	add	r30, r30
    114c:	bb 0f       	add	r27, r27
    114e:	66 1f       	adc	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	88 1f       	adc	r24, r24
    1154:	28 f0       	brcs	.+10     	; 0x1160 <__fp_rempio2+0x2c>
    1156:	b2 3a       	cpi	r27, 0xA2	; 162
    1158:	62 07       	cpc	r22, r18
    115a:	73 07       	cpc	r23, r19
    115c:	84 07       	cpc	r24, r20
    115e:	28 f0       	brcs	.+10     	; 0x116a <__fp_rempio2+0x36>
    1160:	b2 5a       	subi	r27, 0xA2	; 162
    1162:	62 0b       	sbc	r22, r18
    1164:	73 0b       	sbc	r23, r19
    1166:	84 0b       	sbc	r24, r20
    1168:	e3 95       	inc	r30
    116a:	9a 95       	dec	r25
    116c:	72 f7       	brpl	.-36     	; 0x114a <__fp_rempio2+0x16>
    116e:	80 38       	cpi	r24, 0x80	; 128
    1170:	30 f4       	brcc	.+12     	; 0x117e <__fp_rempio2+0x4a>
    1172:	9a 95       	dec	r25
    1174:	bb 0f       	add	r27, r27
    1176:	66 1f       	adc	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	d2 f7       	brpl	.-12     	; 0x1172 <__fp_rempio2+0x3e>
    117e:	90 48       	sbci	r25, 0x80	; 128
    1180:	b0 c0       	rjmp	.+352    	; 0x12e2 <__fp_mpack_finite>

00001182 <__fp_round>:
    1182:	09 2e       	mov	r0, r25
    1184:	03 94       	inc	r0
    1186:	00 0c       	add	r0, r0
    1188:	11 f4       	brne	.+4      	; 0x118e <__fp_round+0xc>
    118a:	88 23       	and	r24, r24
    118c:	52 f0       	brmi	.+20     	; 0x11a2 <__fp_round+0x20>
    118e:	bb 0f       	add	r27, r27
    1190:	40 f4       	brcc	.+16     	; 0x11a2 <__fp_round+0x20>
    1192:	bf 2b       	or	r27, r31
    1194:	11 f4       	brne	.+4      	; 0x119a <__fp_round+0x18>
    1196:	60 ff       	sbrs	r22, 0
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <__fp_round+0x20>
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	08 95       	ret

000011a4 <__fp_sinus>:
    11a4:	ef 93       	push	r30
    11a6:	e0 ff       	sbrs	r30, 0
    11a8:	06 c0       	rjmp	.+12     	; 0x11b6 <__fp_sinus+0x12>
    11aa:	a2 ea       	ldi	r26, 0xA2	; 162
    11ac:	2a ed       	ldi	r18, 0xDA	; 218
    11ae:	3f e0       	ldi	r19, 0x0F	; 15
    11b0:	49 ec       	ldi	r20, 0xC9	; 201
    11b2:	5f eb       	ldi	r21, 0xBF	; 191
    11b4:	53 de       	rcall	.-858    	; 0xe5c <__addsf3x>
    11b6:	e5 df       	rcall	.-54     	; 0x1182 <__fp_round>
    11b8:	0f 90       	pop	r0
    11ba:	03 94       	inc	r0
    11bc:	01 fc       	sbrc	r0, 1
    11be:	90 58       	subi	r25, 0x80	; 128
    11c0:	ec e8       	ldi	r30, 0x8C	; 140
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	9a c0       	rjmp	.+308    	; 0x12fa <__fp_powsodd>

000011c6 <__fp_split3>:
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	90 58       	subi	r25, 0x80	; 128
    11ca:	44 0f       	add	r20, r20
    11cc:	55 1f       	adc	r21, r21
    11ce:	59 f0       	breq	.+22     	; 0x11e6 <__fp_splitA+0x10>
    11d0:	5f 3f       	cpi	r21, 0xFF	; 255
    11d2:	71 f0       	breq	.+28     	; 0x11f0 <__fp_splitA+0x1a>
    11d4:	47 95       	ror	r20

000011d6 <__fp_splitA>:
    11d6:	88 0f       	add	r24, r24
    11d8:	97 fb       	bst	r25, 7
    11da:	99 1f       	adc	r25, r25
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <__fp_splitA+0x20>
    11de:	9f 3f       	cpi	r25, 0xFF	; 255
    11e0:	79 f0       	breq	.+30     	; 0x1200 <__fp_splitA+0x2a>
    11e2:	87 95       	ror	r24
    11e4:	08 95       	ret
    11e6:	12 16       	cp	r1, r18
    11e8:	13 06       	cpc	r1, r19
    11ea:	14 06       	cpc	r1, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	f2 cf       	rjmp	.-28     	; 0x11d4 <__fp_split3+0xe>
    11f0:	46 95       	lsr	r20
    11f2:	f1 df       	rcall	.-30     	; 0x11d6 <__fp_splitA>
    11f4:	08 c0       	rjmp	.+16     	; 0x1206 <__fp_splitA+0x30>
    11f6:	16 16       	cp	r1, r22
    11f8:	17 06       	cpc	r1, r23
    11fa:	18 06       	cpc	r1, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	f1 cf       	rjmp	.-30     	; 0x11e2 <__fp_splitA+0xc>
    1200:	86 95       	lsr	r24
    1202:	71 05       	cpc	r23, r1
    1204:	61 05       	cpc	r22, r1
    1206:	08 94       	sec
    1208:	08 95       	ret

0000120a <__fp_zero>:
    120a:	e8 94       	clt

0000120c <__fp_szero>:
    120c:	bb 27       	eor	r27, r27
    120e:	66 27       	eor	r22, r22
    1210:	77 27       	eor	r23, r23
    1212:	cb 01       	movw	r24, r22
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__mulsf3>:
    1218:	0b d0       	rcall	.+22     	; 0x1230 <__mulsf3x>
    121a:	b3 cf       	rjmp	.-154    	; 0x1182 <__fp_round>
    121c:	7c df       	rcall	.-264    	; 0x1116 <__fp_pscA>
    121e:	28 f0       	brcs	.+10     	; 0x122a <__mulsf3+0x12>
    1220:	81 df       	rcall	.-254    	; 0x1124 <__fp_pscB>
    1222:	18 f0       	brcs	.+6      	; 0x122a <__mulsf3+0x12>
    1224:	95 23       	and	r25, r21
    1226:	09 f0       	breq	.+2      	; 0x122a <__mulsf3+0x12>
    1228:	6d cf       	rjmp	.-294    	; 0x1104 <__fp_inf>
    122a:	72 cf       	rjmp	.-284    	; 0x1110 <__fp_nan>
    122c:	11 24       	eor	r1, r1
    122e:	ee cf       	rjmp	.-36     	; 0x120c <__fp_szero>

00001230 <__mulsf3x>:
    1230:	ca df       	rcall	.-108    	; 0x11c6 <__fp_split3>
    1232:	a0 f3       	brcs	.-24     	; 0x121c <__mulsf3+0x4>

00001234 <__mulsf3_pse>:
    1234:	95 9f       	mul	r25, r21
    1236:	d1 f3       	breq	.-12     	; 0x122c <__mulsf3+0x14>
    1238:	95 0f       	add	r25, r21
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	55 1f       	adc	r21, r21
    123e:	62 9f       	mul	r22, r18
    1240:	f0 01       	movw	r30, r0
    1242:	72 9f       	mul	r23, r18
    1244:	bb 27       	eor	r27, r27
    1246:	f0 0d       	add	r31, r0
    1248:	b1 1d       	adc	r27, r1
    124a:	63 9f       	mul	r22, r19
    124c:	aa 27       	eor	r26, r26
    124e:	f0 0d       	add	r31, r0
    1250:	b1 1d       	adc	r27, r1
    1252:	aa 1f       	adc	r26, r26
    1254:	64 9f       	mul	r22, r20
    1256:	66 27       	eor	r22, r22
    1258:	b0 0d       	add	r27, r0
    125a:	a1 1d       	adc	r26, r1
    125c:	66 1f       	adc	r22, r22
    125e:	82 9f       	mul	r24, r18
    1260:	22 27       	eor	r18, r18
    1262:	b0 0d       	add	r27, r0
    1264:	a1 1d       	adc	r26, r1
    1266:	62 1f       	adc	r22, r18
    1268:	73 9f       	mul	r23, r19
    126a:	b0 0d       	add	r27, r0
    126c:	a1 1d       	adc	r26, r1
    126e:	62 1f       	adc	r22, r18
    1270:	83 9f       	mul	r24, r19
    1272:	a0 0d       	add	r26, r0
    1274:	61 1d       	adc	r22, r1
    1276:	22 1f       	adc	r18, r18
    1278:	74 9f       	mul	r23, r20
    127a:	33 27       	eor	r19, r19
    127c:	a0 0d       	add	r26, r0
    127e:	61 1d       	adc	r22, r1
    1280:	23 1f       	adc	r18, r19
    1282:	84 9f       	mul	r24, r20
    1284:	60 0d       	add	r22, r0
    1286:	21 1d       	adc	r18, r1
    1288:	82 2f       	mov	r24, r18
    128a:	76 2f       	mov	r23, r22
    128c:	6a 2f       	mov	r22, r26
    128e:	11 24       	eor	r1, r1
    1290:	9f 57       	subi	r25, 0x7F	; 127
    1292:	50 40       	sbci	r21, 0x00	; 0
    1294:	8a f0       	brmi	.+34     	; 0x12b8 <__mulsf3_pse+0x84>
    1296:	e1 f0       	breq	.+56     	; 0x12d0 <__mulsf3_pse+0x9c>
    1298:	88 23       	and	r24, r24
    129a:	4a f0       	brmi	.+18     	; 0x12ae <__mulsf3_pse+0x7a>
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	bb 1f       	adc	r27, r27
    12a2:	66 1f       	adc	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	88 1f       	adc	r24, r24
    12a8:	91 50       	subi	r25, 0x01	; 1
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	a9 f7       	brne	.-22     	; 0x1298 <__mulsf3_pse+0x64>
    12ae:	9e 3f       	cpi	r25, 0xFE	; 254
    12b0:	51 05       	cpc	r21, r1
    12b2:	70 f0       	brcs	.+28     	; 0x12d0 <__mulsf3_pse+0x9c>
    12b4:	27 cf       	rjmp	.-434    	; 0x1104 <__fp_inf>
    12b6:	aa cf       	rjmp	.-172    	; 0x120c <__fp_szero>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	ec f3       	brlt	.-6      	; 0x12b6 <__mulsf3_pse+0x82>
    12bc:	98 3e       	cpi	r25, 0xE8	; 232
    12be:	dc f3       	brlt	.-10     	; 0x12b6 <__mulsf3_pse+0x82>
    12c0:	86 95       	lsr	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	e7 95       	ror	r30
    12cc:	9f 5f       	subi	r25, 0xFF	; 255
    12ce:	c1 f7       	brne	.-16     	; 0x12c0 <__mulsf3_pse+0x8c>
    12d0:	fe 2b       	or	r31, r30
    12d2:	88 0f       	add	r24, r24
    12d4:	91 1d       	adc	r25, r1
    12d6:	96 95       	lsr	r25
    12d8:	87 95       	ror	r24
    12da:	97 f9       	bld	r25, 7
    12dc:	08 95       	ret

000012de <__fp_mpack>:
    12de:	9f 3f       	cpi	r25, 0xFF	; 255
    12e0:	31 f0       	breq	.+12     	; 0x12ee <__fp_mpack_finite+0xc>

000012e2 <__fp_mpack_finite>:
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	20 f4       	brcc	.+8      	; 0x12ee <__fp_mpack_finite+0xc>
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	b7 95       	ror	r27
    12ee:	88 0f       	add	r24, r24
    12f0:	91 1d       	adc	r25, r1
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret

000012fa <__fp_powsodd>:
    12fa:	9f 93       	push	r25
    12fc:	8f 93       	push	r24
    12fe:	7f 93       	push	r23
    1300:	6f 93       	push	r22
    1302:	ff 93       	push	r31
    1304:	ef 93       	push	r30
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	86 df       	rcall	.-244    	; 0x1218 <__mulsf3>
    130c:	ef 91       	pop	r30
    130e:	ff 91       	pop	r31
    1310:	05 d0       	rcall	.+10     	; 0x131c <__fp_powser>
    1312:	2f 91       	pop	r18
    1314:	3f 91       	pop	r19
    1316:	4f 91       	pop	r20
    1318:	5f 91       	pop	r21
    131a:	7e cf       	rjmp	.-260    	; 0x1218 <__mulsf3>

0000131c <__fp_powser>:
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	1f 93       	push	r17
    1322:	0f 93       	push	r16
    1324:	ff 92       	push	r15
    1326:	ef 92       	push	r14
    1328:	df 92       	push	r13
    132a:	7b 01       	movw	r14, r22
    132c:	8c 01       	movw	r16, r24
    132e:	68 94       	set
    1330:	05 c0       	rjmp	.+10     	; 0x133c <__fp_powser+0x20>
    1332:	da 2e       	mov	r13, r26
    1334:	ef 01       	movw	r28, r30
    1336:	7c df       	rcall	.-264    	; 0x1230 <__mulsf3x>
    1338:	fe 01       	movw	r30, r28
    133a:	e8 94       	clt
    133c:	a5 91       	lpm	r26, Z+
    133e:	25 91       	lpm	r18, Z+
    1340:	35 91       	lpm	r19, Z+
    1342:	45 91       	lpm	r20, Z+
    1344:	55 91       	lpm	r21, Z+
    1346:	ae f3       	brts	.-22     	; 0x1332 <__fp_powser+0x16>
    1348:	ef 01       	movw	r28, r30
    134a:	88 dd       	rcall	.-1264   	; 0xe5c <__addsf3x>
    134c:	fe 01       	movw	r30, r28
    134e:	97 01       	movw	r18, r14
    1350:	a8 01       	movw	r20, r16
    1352:	da 94       	dec	r13
    1354:	79 f7       	brne	.-34     	; 0x1334 <__fp_powser+0x18>
    1356:	df 90       	pop	r13
    1358:	ef 90       	pop	r14
    135a:	ff 90       	pop	r15
    135c:	0f 91       	pop	r16
    135e:	1f 91       	pop	r17
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <__divmodhi4>:
    1366:	97 fb       	bst	r25, 7
    1368:	07 2e       	mov	r0, r23
    136a:	16 f4       	brtc	.+4      	; 0x1370 <__divmodhi4+0xa>
    136c:	00 94       	com	r0
    136e:	06 d0       	rcall	.+12     	; 0x137c <__divmodhi4_neg1>
    1370:	77 fd       	sbrc	r23, 7
    1372:	08 d0       	rcall	.+16     	; 0x1384 <__divmodhi4_neg2>
    1374:	0b d0       	rcall	.+22     	; 0x138c <__udivmodhi4>
    1376:	07 fc       	sbrc	r0, 7
    1378:	05 d0       	rcall	.+10     	; 0x1384 <__divmodhi4_neg2>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__divmodhi4_exit>

0000137c <__divmodhi4_neg1>:
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__divmodhi4_neg2>:
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255

0000138a <__divmodhi4_exit>:
    138a:	08 95       	ret

0000138c <__udivmodhi4>:
    138c:	aa 1b       	sub	r26, r26
    138e:	bb 1b       	sub	r27, r27
    1390:	51 e1       	ldi	r21, 0x11	; 17
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <__udivmodhi4_ep>

00001394 <__udivmodhi4_loop>:
    1394:	aa 1f       	adc	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	a6 17       	cp	r26, r22
    139a:	b7 07       	cpc	r27, r23
    139c:	10 f0       	brcs	.+4      	; 0x13a2 <__udivmodhi4_ep>
    139e:	a6 1b       	sub	r26, r22
    13a0:	b7 0b       	sbc	r27, r23

000013a2 <__udivmodhi4_ep>:
    13a2:	88 1f       	adc	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	5a 95       	dec	r21
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__udivmodhi4_loop>
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	08 95       	ret

000013b4 <calloc>:
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	86 9f       	mul	r24, r22
    13be:	80 01       	movw	r16, r0
    13c0:	87 9f       	mul	r24, r23
    13c2:	10 0d       	add	r17, r0
    13c4:	96 9f       	mul	r25, r22
    13c6:	10 0d       	add	r17, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	c8 01       	movw	r24, r16
    13cc:	0d d0       	rcall	.+26     	; 0x13e8 <malloc>
    13ce:	ec 01       	movw	r28, r24
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	21 f0       	breq	.+8      	; 0x13dc <calloc+0x28>
    13d4:	a8 01       	movw	r20, r16
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	2d d1       	rcall	.+602    	; 0x1636 <memset>
    13dc:	ce 01       	movw	r24, r28
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <malloc>:
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	91 05       	cpc	r25, r1
    13f0:	10 f4       	brcc	.+4      	; 0x13f6 <malloc+0xe>
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	e0 91 9c 02 	lds	r30, 0x029C
    13fa:	f0 91 9d 02 	lds	r31, 0x029D
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f1       	breq	.+78     	; 0x1458 <malloc+0x70>
    140a:	40 81       	ld	r20, Z
    140c:	51 81       	ldd	r21, Z+1	; 0x01
    140e:	48 17       	cp	r20, r24
    1410:	59 07       	cpc	r21, r25
    1412:	b8 f0       	brcs	.+46     	; 0x1442 <malloc+0x5a>
    1414:	48 17       	cp	r20, r24
    1416:	59 07       	cpc	r21, r25
    1418:	71 f4       	brne	.+28     	; 0x1436 <malloc+0x4e>
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	10 97       	sbiw	r26, 0x00	; 0
    1420:	29 f0       	breq	.+10     	; 0x142c <malloc+0x44>
    1422:	13 96       	adiw	r26, 0x03	; 3
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	12 97       	sbiw	r26, 0x02	; 2
    142a:	2c c0       	rjmp	.+88     	; 0x1484 <malloc+0x9c>
    142c:	90 93 9d 02 	sts	0x029D, r25
    1430:	80 93 9c 02 	sts	0x029C, r24
    1434:	27 c0       	rjmp	.+78     	; 0x1484 <malloc+0x9c>
    1436:	21 15       	cp	r18, r1
    1438:	31 05       	cpc	r19, r1
    143a:	31 f0       	breq	.+12     	; 0x1448 <malloc+0x60>
    143c:	42 17       	cp	r20, r18
    143e:	53 07       	cpc	r21, r19
    1440:	18 f0       	brcs	.+6      	; 0x1448 <malloc+0x60>
    1442:	a9 01       	movw	r20, r18
    1444:	db 01       	movw	r26, r22
    1446:	01 c0       	rjmp	.+2      	; 0x144a <malloc+0x62>
    1448:	ef 01       	movw	r28, r30
    144a:	9a 01       	movw	r18, r20
    144c:	bd 01       	movw	r22, r26
    144e:	df 01       	movw	r26, r30
    1450:	02 80       	ldd	r0, Z+2	; 0x02
    1452:	f3 81       	ldd	r31, Z+3	; 0x03
    1454:	e0 2d       	mov	r30, r0
    1456:	d7 cf       	rjmp	.-82     	; 0x1406 <malloc+0x1e>
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	f9 f0       	breq	.+62     	; 0x149c <malloc+0xb4>
    145e:	28 1b       	sub	r18, r24
    1460:	39 0b       	sbc	r19, r25
    1462:	24 30       	cpi	r18, 0x04	; 4
    1464:	31 05       	cpc	r19, r1
    1466:	80 f4       	brcc	.+32     	; 0x1488 <malloc+0xa0>
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	61 15       	cp	r22, r1
    146e:	71 05       	cpc	r23, r1
    1470:	21 f0       	breq	.+8      	; 0x147a <malloc+0x92>
    1472:	fb 01       	movw	r30, r22
    1474:	93 83       	std	Z+3, r25	; 0x03
    1476:	82 83       	std	Z+2, r24	; 0x02
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <malloc+0x9a>
    147a:	90 93 9d 02 	sts	0x029D, r25
    147e:	80 93 9c 02 	sts	0x029C, r24
    1482:	fe 01       	movw	r30, r28
    1484:	32 96       	adiw	r30, 0x02	; 2
    1486:	44 c0       	rjmp	.+136    	; 0x1510 <malloc+0x128>
    1488:	fe 01       	movw	r30, r28
    148a:	e2 0f       	add	r30, r18
    148c:	f3 1f       	adc	r31, r19
    148e:	81 93       	st	Z+, r24
    1490:	91 93       	st	Z+, r25
    1492:	22 50       	subi	r18, 0x02	; 2
    1494:	31 09       	sbc	r19, r1
    1496:	39 83       	std	Y+1, r19	; 0x01
    1498:	28 83       	st	Y, r18
    149a:	3a c0       	rjmp	.+116    	; 0x1510 <malloc+0x128>
    149c:	20 91 9a 02 	lds	r18, 0x029A
    14a0:	30 91 9b 02 	lds	r19, 0x029B
    14a4:	23 2b       	or	r18, r19
    14a6:	41 f4       	brne	.+16     	; 0x14b8 <malloc+0xd0>
    14a8:	20 91 02 01 	lds	r18, 0x0102
    14ac:	30 91 03 01 	lds	r19, 0x0103
    14b0:	30 93 9b 02 	sts	0x029B, r19
    14b4:	20 93 9a 02 	sts	0x029A, r18
    14b8:	20 91 00 01 	lds	r18, 0x0100
    14bc:	30 91 01 01 	lds	r19, 0x0101
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	41 f4       	brne	.+16     	; 0x14d6 <malloc+0xee>
    14c6:	2d b7       	in	r18, 0x3d	; 61
    14c8:	3e b7       	in	r19, 0x3e	; 62
    14ca:	40 91 04 01 	lds	r20, 0x0104
    14ce:	50 91 05 01 	lds	r21, 0x0105
    14d2:	24 1b       	sub	r18, r20
    14d4:	35 0b       	sbc	r19, r21
    14d6:	e0 91 9a 02 	lds	r30, 0x029A
    14da:	f0 91 9b 02 	lds	r31, 0x029B
    14de:	e2 17       	cp	r30, r18
    14e0:	f3 07       	cpc	r31, r19
    14e2:	a0 f4       	brcc	.+40     	; 0x150c <malloc+0x124>
    14e4:	2e 1b       	sub	r18, r30
    14e6:	3f 0b       	sbc	r19, r31
    14e8:	28 17       	cp	r18, r24
    14ea:	39 07       	cpc	r19, r25
    14ec:	78 f0       	brcs	.+30     	; 0x150c <malloc+0x124>
    14ee:	ac 01       	movw	r20, r24
    14f0:	4e 5f       	subi	r20, 0xFE	; 254
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	24 17       	cp	r18, r20
    14f6:	35 07       	cpc	r19, r21
    14f8:	48 f0       	brcs	.+18     	; 0x150c <malloc+0x124>
    14fa:	4e 0f       	add	r20, r30
    14fc:	5f 1f       	adc	r21, r31
    14fe:	50 93 9b 02 	sts	0x029B, r21
    1502:	40 93 9a 02 	sts	0x029A, r20
    1506:	81 93       	st	Z+, r24
    1508:	91 93       	st	Z+, r25
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <malloc+0x128>
    150c:	e0 e0       	ldi	r30, 0x00	; 0
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	cf 01       	movw	r24, r30
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <free>:
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	09 f4       	brne	.+2      	; 0x1522 <free+0xa>
    1520:	87 c0       	rjmp	.+270    	; 0x1630 <free+0x118>
    1522:	fc 01       	movw	r30, r24
    1524:	32 97       	sbiw	r30, 0x02	; 2
    1526:	13 82       	std	Z+3, r1	; 0x03
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	c0 91 9c 02 	lds	r28, 0x029C
    152e:	d0 91 9d 02 	lds	r29, 0x029D
    1532:	20 97       	sbiw	r28, 0x00	; 0
    1534:	81 f4       	brne	.+32     	; 0x1556 <free+0x3e>
    1536:	20 81       	ld	r18, Z
    1538:	31 81       	ldd	r19, Z+1	; 0x01
    153a:	28 0f       	add	r18, r24
    153c:	39 1f       	adc	r19, r25
    153e:	80 91 9a 02 	lds	r24, 0x029A
    1542:	90 91 9b 02 	lds	r25, 0x029B
    1546:	82 17       	cp	r24, r18
    1548:	93 07       	cpc	r25, r19
    154a:	79 f5       	brne	.+94     	; 0x15aa <free+0x92>
    154c:	f0 93 9b 02 	sts	0x029B, r31
    1550:	e0 93 9a 02 	sts	0x029A, r30
    1554:	6d c0       	rjmp	.+218    	; 0x1630 <free+0x118>
    1556:	de 01       	movw	r26, r28
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	ae 17       	cp	r26, r30
    155e:	bf 07       	cpc	r27, r31
    1560:	50 f4       	brcc	.+20     	; 0x1576 <free+0x5e>
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	4d 91       	ld	r20, X+
    1566:	5c 91       	ld	r21, X
    1568:	13 97       	sbiw	r26, 0x03	; 3
    156a:	9d 01       	movw	r18, r26
    156c:	41 15       	cp	r20, r1
    156e:	51 05       	cpc	r21, r1
    1570:	09 f1       	breq	.+66     	; 0x15b4 <free+0x9c>
    1572:	da 01       	movw	r26, r20
    1574:	f3 cf       	rjmp	.-26     	; 0x155c <free+0x44>
    1576:	b3 83       	std	Z+3, r27	; 0x03
    1578:	a2 83       	std	Z+2, r26	; 0x02
    157a:	40 81       	ld	r20, Z
    157c:	51 81       	ldd	r21, Z+1	; 0x01
    157e:	84 0f       	add	r24, r20
    1580:	95 1f       	adc	r25, r21
    1582:	8a 17       	cp	r24, r26
    1584:	9b 07       	cpc	r25, r27
    1586:	71 f4       	brne	.+28     	; 0x15a4 <free+0x8c>
    1588:	8d 91       	ld	r24, X+
    158a:	9c 91       	ld	r25, X
    158c:	11 97       	sbiw	r26, 0x01	; 1
    158e:	84 0f       	add	r24, r20
    1590:	95 1f       	adc	r25, r21
    1592:	02 96       	adiw	r24, 0x02	; 2
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	8d 91       	ld	r24, X+
    159c:	9c 91       	ld	r25, X
    159e:	13 97       	sbiw	r26, 0x03	; 3
    15a0:	93 83       	std	Z+3, r25	; 0x03
    15a2:	82 83       	std	Z+2, r24	; 0x02
    15a4:	21 15       	cp	r18, r1
    15a6:	31 05       	cpc	r19, r1
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <free+0x9c>
    15aa:	f0 93 9d 02 	sts	0x029D, r31
    15ae:	e0 93 9c 02 	sts	0x029C, r30
    15b2:	3e c0       	rjmp	.+124    	; 0x1630 <free+0x118>
    15b4:	d9 01       	movw	r26, r18
    15b6:	13 96       	adiw	r26, 0x03	; 3
    15b8:	fc 93       	st	X, r31
    15ba:	ee 93       	st	-X, r30
    15bc:	12 97       	sbiw	r26, 0x02	; 2
    15be:	4d 91       	ld	r20, X+
    15c0:	5d 91       	ld	r21, X+
    15c2:	a4 0f       	add	r26, r20
    15c4:	b5 1f       	adc	r27, r21
    15c6:	ea 17       	cp	r30, r26
    15c8:	fb 07       	cpc	r31, r27
    15ca:	79 f4       	brne	.+30     	; 0x15ea <free+0xd2>
    15cc:	80 81       	ld	r24, Z
    15ce:	91 81       	ldd	r25, Z+1	; 0x01
    15d0:	84 0f       	add	r24, r20
    15d2:	95 1f       	adc	r25, r21
    15d4:	02 96       	adiw	r24, 0x02	; 2
    15d6:	d9 01       	movw	r26, r18
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	9c 93       	st	X, r25
    15dc:	8e 93       	st	-X, r24
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	9c 93       	st	X, r25
    15e6:	8e 93       	st	-X, r24
    15e8:	12 97       	sbiw	r26, 0x02	; 2
    15ea:	e0 e0       	ldi	r30, 0x00	; 0
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	9b 81       	ldd	r25, Y+3	; 0x03
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	19 f0       	breq	.+6      	; 0x15fc <free+0xe4>
    15f6:	fe 01       	movw	r30, r28
    15f8:	ec 01       	movw	r28, r24
    15fa:	f9 cf       	rjmp	.-14     	; 0x15ee <free+0xd6>
    15fc:	ce 01       	movw	r24, r28
    15fe:	02 96       	adiw	r24, 0x02	; 2
    1600:	28 81       	ld	r18, Y
    1602:	39 81       	ldd	r19, Y+1	; 0x01
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	20 91 9a 02 	lds	r18, 0x029A
    160c:	30 91 9b 02 	lds	r19, 0x029B
    1610:	28 17       	cp	r18, r24
    1612:	39 07       	cpc	r19, r25
    1614:	69 f4       	brne	.+26     	; 0x1630 <free+0x118>
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	29 f4       	brne	.+10     	; 0x1624 <free+0x10c>
    161a:	10 92 9d 02 	sts	0x029D, r1
    161e:	10 92 9c 02 	sts	0x029C, r1
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <free+0x110>
    1624:	13 82       	std	Z+3, r1	; 0x03
    1626:	12 82       	std	Z+2, r1	; 0x02
    1628:	d0 93 9b 02 	sts	0x029B, r29
    162c:	c0 93 9a 02 	sts	0x029A, r28
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <memset>:
    1636:	dc 01       	movw	r26, r24
    1638:	01 c0       	rjmp	.+2      	; 0x163c <memset+0x6>
    163a:	6d 93       	st	X+, r22
    163c:	41 50       	subi	r20, 0x01	; 1
    163e:	50 40       	sbci	r21, 0x00	; 0
    1640:	e0 f7       	brcc	.-8      	; 0x163a <memset+0x4>
    1642:	08 95       	ret

00001644 <strcmp>:
    1644:	fb 01       	movw	r30, r22
    1646:	dc 01       	movw	r26, r24
    1648:	8d 91       	ld	r24, X+
    164a:	01 90       	ld	r0, Z+
    164c:	80 19       	sub	r24, r0
    164e:	01 10       	cpse	r0, r1
    1650:	d9 f3       	breq	.-10     	; 0x1648 <strcmp+0x4>
    1652:	99 0b       	sbc	r25, r25
    1654:	08 95       	ret

00001656 <strcpy>:
    1656:	fb 01       	movw	r30, r22
    1658:	dc 01       	movw	r26, r24
    165a:	01 90       	ld	r0, Z+
    165c:	0d 92       	st	X+, r0
    165e:	00 20       	and	r0, r0
    1660:	e1 f7       	brne	.-8      	; 0x165a <strcpy+0x4>
    1662:	08 95       	ret

00001664 <vsnprintf>:
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	2e 97       	sbiw	r28, 0x0e	; 14
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	8c 01       	movw	r16, r24
    167e:	ca 01       	movw	r24, r20
    1680:	46 e0       	ldi	r20, 0x06	; 6
    1682:	4c 83       	std	Y+4, r20	; 0x04
    1684:	1a 83       	std	Y+2, r17	; 0x02
    1686:	09 83       	std	Y+1, r16	; 0x01
    1688:	77 ff       	sbrs	r23, 7
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vsnprintf+0x2c>
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e8       	ldi	r23, 0x80	; 128
    1690:	61 50       	subi	r22, 0x01	; 1
    1692:	71 09       	sbc	r23, r1
    1694:	7e 83       	std	Y+6, r23	; 0x06
    1696:	6d 83       	std	Y+5, r22	; 0x05
    1698:	a9 01       	movw	r20, r18
    169a:	bc 01       	movw	r22, r24
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	19 d0       	rcall	.+50     	; 0x16d4 <vfprintf>
    16a2:	4d 81       	ldd	r20, Y+5	; 0x05
    16a4:	5e 81       	ldd	r21, Y+6	; 0x06
    16a6:	57 fd       	sbrc	r21, 7
    16a8:	0a c0       	rjmp	.+20     	; 0x16be <vsnprintf+0x5a>
    16aa:	2f 81       	ldd	r18, Y+7	; 0x07
    16ac:	38 85       	ldd	r19, Y+8	; 0x08
    16ae:	42 17       	cp	r20, r18
    16b0:	53 07       	cpc	r21, r19
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <vsnprintf+0x52>
    16b4:	9a 01       	movw	r18, r20
    16b6:	f8 01       	movw	r30, r16
    16b8:	e2 0f       	add	r30, r18
    16ba:	f3 1f       	adc	r31, r19
    16bc:	10 82       	st	Z, r1
    16be:	2e 96       	adiw	r28, 0x0e	; 14
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	08 95       	ret

000016d4 <vfprintf>:
    16d4:	2f 92       	push	r2
    16d6:	3f 92       	push	r3
    16d8:	4f 92       	push	r4
    16da:	5f 92       	push	r5
    16dc:	6f 92       	push	r6
    16de:	7f 92       	push	r7
    16e0:	8f 92       	push	r8
    16e2:	9f 92       	push	r9
    16e4:	af 92       	push	r10
    16e6:	bf 92       	push	r11
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	2c 97       	sbiw	r28, 0x0c	; 12
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	7c 01       	movw	r14, r24
    170a:	6b 01       	movw	r12, r22
    170c:	8a 01       	movw	r16, r20
    170e:	fc 01       	movw	r30, r24
    1710:	17 82       	std	Z+7, r1	; 0x07
    1712:	16 82       	std	Z+6, r1	; 0x06
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	81 ff       	sbrs	r24, 1
    1718:	b0 c1       	rjmp	.+864    	; 0x1a7a <vfprintf+0x3a6>
    171a:	ce 01       	movw	r24, r28
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	4c 01       	movw	r8, r24
    1720:	f7 01       	movw	r30, r14
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	f6 01       	movw	r30, r12
    1726:	93 fd       	sbrc	r25, 3
    1728:	85 91       	lpm	r24, Z+
    172a:	93 ff       	sbrs	r25, 3
    172c:	81 91       	ld	r24, Z+
    172e:	6f 01       	movw	r12, r30
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <vfprintf+0x62>
    1734:	9e c1       	rjmp	.+828    	; 0x1a72 <vfprintf+0x39e>
    1736:	85 32       	cpi	r24, 0x25	; 37
    1738:	39 f4       	brne	.+14     	; 0x1748 <vfprintf+0x74>
    173a:	93 fd       	sbrc	r25, 3
    173c:	85 91       	lpm	r24, Z+
    173e:	93 ff       	sbrs	r25, 3
    1740:	81 91       	ld	r24, Z+
    1742:	6f 01       	movw	r12, r30
    1744:	85 32       	cpi	r24, 0x25	; 37
    1746:	21 f4       	brne	.+8      	; 0x1750 <vfprintf+0x7c>
    1748:	b7 01       	movw	r22, r14
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	c7 d1       	rcall	.+910    	; 0x1adc <fputc>
    174e:	e8 cf       	rjmp	.-48     	; 0x1720 <vfprintf+0x4c>
    1750:	51 2c       	mov	r5, r1
    1752:	31 2c       	mov	r3, r1
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	20 32       	cpi	r18, 0x20	; 32
    1758:	a0 f4       	brcc	.+40     	; 0x1782 <vfprintf+0xae>
    175a:	8b 32       	cpi	r24, 0x2B	; 43
    175c:	69 f0       	breq	.+26     	; 0x1778 <vfprintf+0xa4>
    175e:	30 f4       	brcc	.+12     	; 0x176c <vfprintf+0x98>
    1760:	80 32       	cpi	r24, 0x20	; 32
    1762:	59 f0       	breq	.+22     	; 0x177a <vfprintf+0xa6>
    1764:	83 32       	cpi	r24, 0x23	; 35
    1766:	69 f4       	brne	.+26     	; 0x1782 <vfprintf+0xae>
    1768:	20 61       	ori	r18, 0x10	; 16
    176a:	2c c0       	rjmp	.+88     	; 0x17c4 <vfprintf+0xf0>
    176c:	8d 32       	cpi	r24, 0x2D	; 45
    176e:	39 f0       	breq	.+14     	; 0x177e <vfprintf+0xaa>
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	39 f4       	brne	.+14     	; 0x1782 <vfprintf+0xae>
    1774:	21 60       	ori	r18, 0x01	; 1
    1776:	26 c0       	rjmp	.+76     	; 0x17c4 <vfprintf+0xf0>
    1778:	22 60       	ori	r18, 0x02	; 2
    177a:	24 60       	ori	r18, 0x04	; 4
    177c:	23 c0       	rjmp	.+70     	; 0x17c4 <vfprintf+0xf0>
    177e:	28 60       	ori	r18, 0x08	; 8
    1780:	21 c0       	rjmp	.+66     	; 0x17c4 <vfprintf+0xf0>
    1782:	27 fd       	sbrc	r18, 7
    1784:	27 c0       	rjmp	.+78     	; 0x17d4 <vfprintf+0x100>
    1786:	30 ed       	ldi	r19, 0xD0	; 208
    1788:	38 0f       	add	r19, r24
    178a:	3a 30       	cpi	r19, 0x0A	; 10
    178c:	78 f4       	brcc	.+30     	; 0x17ac <vfprintf+0xd8>
    178e:	26 ff       	sbrs	r18, 6
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0xca>
    1792:	fa e0       	ldi	r31, 0x0A	; 10
    1794:	5f 9e       	mul	r5, r31
    1796:	30 0d       	add	r19, r0
    1798:	11 24       	eor	r1, r1
    179a:	53 2e       	mov	r5, r19
    179c:	13 c0       	rjmp	.+38     	; 0x17c4 <vfprintf+0xf0>
    179e:	8a e0       	ldi	r24, 0x0A	; 10
    17a0:	38 9e       	mul	r3, r24
    17a2:	30 0d       	add	r19, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	33 2e       	mov	r3, r19
    17a8:	20 62       	ori	r18, 0x20	; 32
    17aa:	0c c0       	rjmp	.+24     	; 0x17c4 <vfprintf+0xf0>
    17ac:	8e 32       	cpi	r24, 0x2E	; 46
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <vfprintf+0xe4>
    17b0:	26 fd       	sbrc	r18, 6
    17b2:	5f c1       	rjmp	.+702    	; 0x1a72 <vfprintf+0x39e>
    17b4:	20 64       	ori	r18, 0x40	; 64
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0xf0>
    17b8:	8c 36       	cpi	r24, 0x6C	; 108
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <vfprintf+0xec>
    17bc:	20 68       	ori	r18, 0x80	; 128
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <vfprintf+0xf0>
    17c0:	88 36       	cpi	r24, 0x68	; 104
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <vfprintf+0x100>
    17c4:	f6 01       	movw	r30, r12
    17c6:	93 fd       	sbrc	r25, 3
    17c8:	85 91       	lpm	r24, Z+
    17ca:	93 ff       	sbrs	r25, 3
    17cc:	81 91       	ld	r24, Z+
    17ce:	6f 01       	movw	r12, r30
    17d0:	81 11       	cpse	r24, r1
    17d2:	c1 cf       	rjmp	.-126    	; 0x1756 <vfprintf+0x82>
    17d4:	98 2f       	mov	r25, r24
    17d6:	9f 7d       	andi	r25, 0xDF	; 223
    17d8:	95 54       	subi	r25, 0x45	; 69
    17da:	93 30       	cpi	r25, 0x03	; 3
    17dc:	28 f4       	brcc	.+10     	; 0x17e8 <vfprintf+0x114>
    17de:	0c 5f       	subi	r16, 0xFC	; 252
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	ff e3       	ldi	r31, 0x3F	; 63
    17e4:	f9 83       	std	Y+1, r31	; 0x01
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <vfprintf+0x12e>
    17e8:	83 36       	cpi	r24, 0x63	; 99
    17ea:	31 f0       	breq	.+12     	; 0x17f8 <vfprintf+0x124>
    17ec:	83 37       	cpi	r24, 0x73	; 115
    17ee:	71 f0       	breq	.+28     	; 0x180c <vfprintf+0x138>
    17f0:	83 35       	cpi	r24, 0x53	; 83
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <vfprintf+0x122>
    17f4:	57 c0       	rjmp	.+174    	; 0x18a4 <vfprintf+0x1d0>
    17f6:	21 c0       	rjmp	.+66     	; 0x183a <vfprintf+0x166>
    17f8:	f8 01       	movw	r30, r16
    17fa:	80 81       	ld	r24, Z
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	0e 5f       	subi	r16, 0xFE	; 254
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	44 24       	eor	r4, r4
    1804:	43 94       	inc	r4
    1806:	51 2c       	mov	r5, r1
    1808:	54 01       	movw	r10, r8
    180a:	14 c0       	rjmp	.+40     	; 0x1834 <vfprintf+0x160>
    180c:	38 01       	movw	r6, r16
    180e:	f2 e0       	ldi	r31, 0x02	; 2
    1810:	6f 0e       	add	r6, r31
    1812:	71 1c       	adc	r7, r1
    1814:	f8 01       	movw	r30, r16
    1816:	a0 80       	ld	r10, Z
    1818:	b1 80       	ldd	r11, Z+1	; 0x01
    181a:	26 ff       	sbrs	r18, 6
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <vfprintf+0x150>
    181e:	65 2d       	mov	r22, r5
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x154>
    1824:	6f ef       	ldi	r22, 0xFF	; 255
    1826:	7f ef       	ldi	r23, 0xFF	; 255
    1828:	c5 01       	movw	r24, r10
    182a:	2c 87       	std	Y+12, r18	; 0x0c
    182c:	4c d1       	rcall	.+664    	; 0x1ac6 <strnlen>
    182e:	2c 01       	movw	r4, r24
    1830:	83 01       	movw	r16, r6
    1832:	2c 85       	ldd	r18, Y+12	; 0x0c
    1834:	2f 77       	andi	r18, 0x7F	; 127
    1836:	22 2e       	mov	r2, r18
    1838:	16 c0       	rjmp	.+44     	; 0x1866 <vfprintf+0x192>
    183a:	38 01       	movw	r6, r16
    183c:	f2 e0       	ldi	r31, 0x02	; 2
    183e:	6f 0e       	add	r6, r31
    1840:	71 1c       	adc	r7, r1
    1842:	f8 01       	movw	r30, r16
    1844:	a0 80       	ld	r10, Z
    1846:	b1 80       	ldd	r11, Z+1	; 0x01
    1848:	26 ff       	sbrs	r18, 6
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <vfprintf+0x17e>
    184c:	65 2d       	mov	r22, r5
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x182>
    1852:	6f ef       	ldi	r22, 0xFF	; 255
    1854:	7f ef       	ldi	r23, 0xFF	; 255
    1856:	c5 01       	movw	r24, r10
    1858:	2c 87       	std	Y+12, r18	; 0x0c
    185a:	2a d1       	rcall	.+596    	; 0x1ab0 <strnlen_P>
    185c:	2c 01       	movw	r4, r24
    185e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1860:	20 68       	ori	r18, 0x80	; 128
    1862:	22 2e       	mov	r2, r18
    1864:	83 01       	movw	r16, r6
    1866:	23 fc       	sbrc	r2, 3
    1868:	19 c0       	rjmp	.+50     	; 0x189c <vfprintf+0x1c8>
    186a:	83 2d       	mov	r24, r3
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	48 16       	cp	r4, r24
    1870:	59 06       	cpc	r5, r25
    1872:	a0 f4       	brcc	.+40     	; 0x189c <vfprintf+0x1c8>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e2       	ldi	r24, 0x20	; 32
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	30 d1       	rcall	.+608    	; 0x1adc <fputc>
    187c:	3a 94       	dec	r3
    187e:	f5 cf       	rjmp	.-22     	; 0x186a <vfprintf+0x196>
    1880:	f5 01       	movw	r30, r10
    1882:	27 fc       	sbrc	r2, 7
    1884:	85 91       	lpm	r24, Z+
    1886:	27 fe       	sbrs	r2, 7
    1888:	81 91       	ld	r24, Z+
    188a:	5f 01       	movw	r10, r30
    188c:	b7 01       	movw	r22, r14
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	25 d1       	rcall	.+586    	; 0x1adc <fputc>
    1892:	31 10       	cpse	r3, r1
    1894:	3a 94       	dec	r3
    1896:	f1 e0       	ldi	r31, 0x01	; 1
    1898:	4f 1a       	sub	r4, r31
    189a:	51 08       	sbc	r5, r1
    189c:	41 14       	cp	r4, r1
    189e:	51 04       	cpc	r5, r1
    18a0:	79 f7       	brne	.-34     	; 0x1880 <vfprintf+0x1ac>
    18a2:	de c0       	rjmp	.+444    	; 0x1a60 <vfprintf+0x38c>
    18a4:	84 36       	cpi	r24, 0x64	; 100
    18a6:	11 f0       	breq	.+4      	; 0x18ac <vfprintf+0x1d8>
    18a8:	89 36       	cpi	r24, 0x69	; 105
    18aa:	31 f5       	brne	.+76     	; 0x18f8 <vfprintf+0x224>
    18ac:	f8 01       	movw	r30, r16
    18ae:	27 ff       	sbrs	r18, 7
    18b0:	07 c0       	rjmp	.+14     	; 0x18c0 <vfprintf+0x1ec>
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	0c 5f       	subi	r16, 0xFC	; 252
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <vfprintf+0x1fc>
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	88 27       	eor	r24, r24
    18c6:	77 fd       	sbrc	r23, 7
    18c8:	80 95       	com	r24
    18ca:	98 2f       	mov	r25, r24
    18cc:	0e 5f       	subi	r16, 0xFE	; 254
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	2f 76       	andi	r18, 0x6F	; 111
    18d2:	b2 2e       	mov	r11, r18
    18d4:	97 ff       	sbrs	r25, 7
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <vfprintf+0x216>
    18d8:	90 95       	com	r25
    18da:	80 95       	com	r24
    18dc:	70 95       	com	r23
    18de:	61 95       	neg	r22
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	8f 4f       	sbci	r24, 0xFF	; 255
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	20 68       	ori	r18, 0x80	; 128
    18e8:	b2 2e       	mov	r11, r18
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	a4 01       	movw	r20, r8
    18f0:	27 d1       	rcall	.+590    	; 0x1b40 <__ultoa_invert>
    18f2:	a8 2e       	mov	r10, r24
    18f4:	a8 18       	sub	r10, r8
    18f6:	43 c0       	rjmp	.+134    	; 0x197e <vfprintf+0x2aa>
    18f8:	85 37       	cpi	r24, 0x75	; 117
    18fa:	29 f4       	brne	.+10     	; 0x1906 <vfprintf+0x232>
    18fc:	2f 7e       	andi	r18, 0xEF	; 239
    18fe:	b2 2e       	mov	r11, r18
    1900:	2a e0       	ldi	r18, 0x0A	; 10
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	25 c0       	rjmp	.+74     	; 0x1950 <vfprintf+0x27c>
    1906:	f2 2f       	mov	r31, r18
    1908:	f9 7f       	andi	r31, 0xF9	; 249
    190a:	bf 2e       	mov	r11, r31
    190c:	8f 36       	cpi	r24, 0x6F	; 111
    190e:	c1 f0       	breq	.+48     	; 0x1940 <vfprintf+0x26c>
    1910:	18 f4       	brcc	.+6      	; 0x1918 <vfprintf+0x244>
    1912:	88 35       	cpi	r24, 0x58	; 88
    1914:	79 f0       	breq	.+30     	; 0x1934 <vfprintf+0x260>
    1916:	ad c0       	rjmp	.+346    	; 0x1a72 <vfprintf+0x39e>
    1918:	80 37       	cpi	r24, 0x70	; 112
    191a:	19 f0       	breq	.+6      	; 0x1922 <vfprintf+0x24e>
    191c:	88 37       	cpi	r24, 0x78	; 120
    191e:	21 f0       	breq	.+8      	; 0x1928 <vfprintf+0x254>
    1920:	a8 c0       	rjmp	.+336    	; 0x1a72 <vfprintf+0x39e>
    1922:	2f 2f       	mov	r18, r31
    1924:	20 61       	ori	r18, 0x10	; 16
    1926:	b2 2e       	mov	r11, r18
    1928:	b4 fe       	sbrs	r11, 4
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <vfprintf+0x272>
    192c:	8b 2d       	mov	r24, r11
    192e:	84 60       	ori	r24, 0x04	; 4
    1930:	b8 2e       	mov	r11, r24
    1932:	09 c0       	rjmp	.+18     	; 0x1946 <vfprintf+0x272>
    1934:	24 ff       	sbrs	r18, 4
    1936:	0a c0       	rjmp	.+20     	; 0x194c <vfprintf+0x278>
    1938:	9f 2f       	mov	r25, r31
    193a:	96 60       	ori	r25, 0x06	; 6
    193c:	b9 2e       	mov	r11, r25
    193e:	06 c0       	rjmp	.+12     	; 0x194c <vfprintf+0x278>
    1940:	28 e0       	ldi	r18, 0x08	; 8
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	05 c0       	rjmp	.+10     	; 0x1950 <vfprintf+0x27c>
    1946:	20 e1       	ldi	r18, 0x10	; 16
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <vfprintf+0x27c>
    194c:	20 e1       	ldi	r18, 0x10	; 16
    194e:	32 e0       	ldi	r19, 0x02	; 2
    1950:	f8 01       	movw	r30, r16
    1952:	b7 fe       	sbrs	r11, 7
    1954:	07 c0       	rjmp	.+14     	; 0x1964 <vfprintf+0x290>
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	0c 5f       	subi	r16, 0xFC	; 252
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <vfprintf+0x29c>
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 5f       	subi	r16, 0xFE	; 254
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	a4 01       	movw	r20, r8
    1972:	e6 d0       	rcall	.+460    	; 0x1b40 <__ultoa_invert>
    1974:	a8 2e       	mov	r10, r24
    1976:	a8 18       	sub	r10, r8
    1978:	fb 2d       	mov	r31, r11
    197a:	ff 77       	andi	r31, 0x7F	; 127
    197c:	bf 2e       	mov	r11, r31
    197e:	b6 fe       	sbrs	r11, 6
    1980:	0b c0       	rjmp	.+22     	; 0x1998 <vfprintf+0x2c4>
    1982:	2b 2d       	mov	r18, r11
    1984:	2e 7f       	andi	r18, 0xFE	; 254
    1986:	a5 14       	cp	r10, r5
    1988:	50 f4       	brcc	.+20     	; 0x199e <vfprintf+0x2ca>
    198a:	b4 fe       	sbrs	r11, 4
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <vfprintf+0x2ce>
    198e:	b2 fc       	sbrc	r11, 2
    1990:	08 c0       	rjmp	.+16     	; 0x19a2 <vfprintf+0x2ce>
    1992:	2b 2d       	mov	r18, r11
    1994:	2e 7e       	andi	r18, 0xEE	; 238
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <vfprintf+0x2ce>
    1998:	7a 2c       	mov	r7, r10
    199a:	2b 2d       	mov	r18, r11
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <vfprintf+0x2d0>
    199e:	7a 2c       	mov	r7, r10
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <vfprintf+0x2d0>
    19a2:	75 2c       	mov	r7, r5
    19a4:	24 ff       	sbrs	r18, 4
    19a6:	0d c0       	rjmp	.+26     	; 0x19c2 <vfprintf+0x2ee>
    19a8:	fe 01       	movw	r30, r28
    19aa:	ea 0d       	add	r30, r10
    19ac:	f1 1d       	adc	r31, r1
    19ae:	80 81       	ld	r24, Z
    19b0:	80 33       	cpi	r24, 0x30	; 48
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <vfprintf+0x2e4>
    19b4:	29 7e       	andi	r18, 0xE9	; 233
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x2f6>
    19b8:	22 ff       	sbrs	r18, 2
    19ba:	06 c0       	rjmp	.+12     	; 0x19c8 <vfprintf+0x2f4>
    19bc:	73 94       	inc	r7
    19be:	73 94       	inc	r7
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <vfprintf+0x2f6>
    19c2:	82 2f       	mov	r24, r18
    19c4:	86 78       	andi	r24, 0x86	; 134
    19c6:	09 f0       	breq	.+2      	; 0x19ca <vfprintf+0x2f6>
    19c8:	73 94       	inc	r7
    19ca:	23 fd       	sbrc	r18, 3
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <vfprintf+0x31e>
    19ce:	20 ff       	sbrs	r18, 0
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <vfprintf+0x30a>
    19d2:	5a 2c       	mov	r5, r10
    19d4:	73 14       	cp	r7, r3
    19d6:	18 f4       	brcc	.+6      	; 0x19de <vfprintf+0x30a>
    19d8:	53 0c       	add	r5, r3
    19da:	57 18       	sub	r5, r7
    19dc:	73 2c       	mov	r7, r3
    19de:	73 14       	cp	r7, r3
    19e0:	60 f4       	brcc	.+24     	; 0x19fa <vfprintf+0x326>
    19e2:	b7 01       	movw	r22, r14
    19e4:	80 e2       	ldi	r24, 0x20	; 32
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	2c 87       	std	Y+12, r18	; 0x0c
    19ea:	78 d0       	rcall	.+240    	; 0x1adc <fputc>
    19ec:	73 94       	inc	r7
    19ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    19f0:	f6 cf       	rjmp	.-20     	; 0x19de <vfprintf+0x30a>
    19f2:	73 14       	cp	r7, r3
    19f4:	10 f4       	brcc	.+4      	; 0x19fa <vfprintf+0x326>
    19f6:	37 18       	sub	r3, r7
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <vfprintf+0x328>
    19fa:	31 2c       	mov	r3, r1
    19fc:	24 ff       	sbrs	r18, 4
    19fe:	11 c0       	rjmp	.+34     	; 0x1a22 <vfprintf+0x34e>
    1a00:	b7 01       	movw	r22, r14
    1a02:	80 e3       	ldi	r24, 0x30	; 48
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	2c 87       	std	Y+12, r18	; 0x0c
    1a08:	69 d0       	rcall	.+210    	; 0x1adc <fputc>
    1a0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a0c:	22 ff       	sbrs	r18, 2
    1a0e:	16 c0       	rjmp	.+44     	; 0x1a3c <vfprintf+0x368>
    1a10:	21 ff       	sbrs	r18, 1
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <vfprintf+0x346>
    1a14:	88 e5       	ldi	r24, 0x58	; 88
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x34a>
    1a1a:	88 e7       	ldi	r24, 0x78	; 120
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	b7 01       	movw	r22, r14
    1a20:	0c c0       	rjmp	.+24     	; 0x1a3a <vfprintf+0x366>
    1a22:	82 2f       	mov	r24, r18
    1a24:	86 78       	andi	r24, 0x86	; 134
    1a26:	51 f0       	breq	.+20     	; 0x1a3c <vfprintf+0x368>
    1a28:	21 fd       	sbrc	r18, 1
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vfprintf+0x35c>
    1a2c:	80 e2       	ldi	r24, 0x20	; 32
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <vfprintf+0x35e>
    1a30:	8b e2       	ldi	r24, 0x2B	; 43
    1a32:	27 fd       	sbrc	r18, 7
    1a34:	8d e2       	ldi	r24, 0x2D	; 45
    1a36:	b7 01       	movw	r22, r14
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	50 d0       	rcall	.+160    	; 0x1adc <fputc>
    1a3c:	a5 14       	cp	r10, r5
    1a3e:	30 f4       	brcc	.+12     	; 0x1a4c <vfprintf+0x378>
    1a40:	b7 01       	movw	r22, r14
    1a42:	80 e3       	ldi	r24, 0x30	; 48
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	4a d0       	rcall	.+148    	; 0x1adc <fputc>
    1a48:	5a 94       	dec	r5
    1a4a:	f8 cf       	rjmp	.-16     	; 0x1a3c <vfprintf+0x368>
    1a4c:	aa 94       	dec	r10
    1a4e:	f4 01       	movw	r30, r8
    1a50:	ea 0d       	add	r30, r10
    1a52:	f1 1d       	adc	r31, r1
    1a54:	80 81       	ld	r24, Z
    1a56:	b7 01       	movw	r22, r14
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	40 d0       	rcall	.+128    	; 0x1adc <fputc>
    1a5c:	a1 10       	cpse	r10, r1
    1a5e:	f6 cf       	rjmp	.-20     	; 0x1a4c <vfprintf+0x378>
    1a60:	33 20       	and	r3, r3
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <vfprintf+0x392>
    1a64:	5d ce       	rjmp	.-838    	; 0x1720 <vfprintf+0x4c>
    1a66:	b7 01       	movw	r22, r14
    1a68:	80 e2       	ldi	r24, 0x20	; 32
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	37 d0       	rcall	.+110    	; 0x1adc <fputc>
    1a6e:	3a 94       	dec	r3
    1a70:	f7 cf       	rjmp	.-18     	; 0x1a60 <vfprintf+0x38c>
    1a72:	f7 01       	movw	r30, r14
    1a74:	86 81       	ldd	r24, Z+6	; 0x06
    1a76:	97 81       	ldd	r25, Z+7	; 0x07
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfprintf+0x3aa>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	9f ef       	ldi	r25, 0xFF	; 255
    1a7e:	2c 96       	adiw	r28, 0x0c	; 12
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	7f 90       	pop	r7
    1aa4:	6f 90       	pop	r6
    1aa6:	5f 90       	pop	r5
    1aa8:	4f 90       	pop	r4
    1aaa:	3f 90       	pop	r3
    1aac:	2f 90       	pop	r2
    1aae:	08 95       	ret

00001ab0 <strnlen_P>:
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	05 90       	lpm	r0, Z+
    1ab4:	61 50       	subi	r22, 0x01	; 1
    1ab6:	70 40       	sbci	r23, 0x00	; 0
    1ab8:	01 10       	cpse	r0, r1
    1aba:	d8 f7       	brcc	.-10     	; 0x1ab2 <strnlen_P+0x2>
    1abc:	80 95       	com	r24
    1abe:	90 95       	com	r25
    1ac0:	8e 0f       	add	r24, r30
    1ac2:	9f 1f       	adc	r25, r31
    1ac4:	08 95       	ret

00001ac6 <strnlen>:
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	61 50       	subi	r22, 0x01	; 1
    1aca:	70 40       	sbci	r23, 0x00	; 0
    1acc:	01 90       	ld	r0, Z+
    1ace:	01 10       	cpse	r0, r1
    1ad0:	d8 f7       	brcc	.-10     	; 0x1ac8 <strnlen+0x2>
    1ad2:	80 95       	com	r24
    1ad4:	90 95       	com	r25
    1ad6:	8e 0f       	add	r24, r30
    1ad8:	9f 1f       	adc	r25, r31
    1ada:	08 95       	ret

00001adc <fputc>:
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	18 2f       	mov	r17, r24
    1ae6:	09 2f       	mov	r16, r25
    1ae8:	eb 01       	movw	r28, r22
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	81 fd       	sbrc	r24, 1
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <fputc+0x1a>
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	20 c0       	rjmp	.+64     	; 0x1b36 <fputc+0x5a>
    1af6:	82 ff       	sbrs	r24, 2
    1af8:	10 c0       	rjmp	.+32     	; 0x1b1a <fputc+0x3e>
    1afa:	4e 81       	ldd	r20, Y+6	; 0x06
    1afc:	5f 81       	ldd	r21, Y+7	; 0x07
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	42 17       	cp	r20, r18
    1b04:	53 07       	cpc	r21, r19
    1b06:	7c f4       	brge	.+30     	; 0x1b26 <fputc+0x4a>
    1b08:	e8 81       	ld	r30, Y
    1b0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0c:	9f 01       	movw	r18, r30
    1b0e:	2f 5f       	subi	r18, 0xFF	; 255
    1b10:	3f 4f       	sbci	r19, 0xFF	; 255
    1b12:	39 83       	std	Y+1, r19	; 0x01
    1b14:	28 83       	st	Y, r18
    1b16:	10 83       	st	Z, r17
    1b18:	06 c0       	rjmp	.+12     	; 0x1b26 <fputc+0x4a>
    1b1a:	e8 85       	ldd	r30, Y+8	; 0x08
    1b1c:	f9 85       	ldd	r31, Y+9	; 0x09
    1b1e:	81 2f       	mov	r24, r17
    1b20:	09 95       	icall
    1b22:	89 2b       	or	r24, r25
    1b24:	29 f7       	brne	.-54     	; 0x1af0 <fputc+0x14>
    1b26:	2e 81       	ldd	r18, Y+6	; 0x06
    1b28:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2a:	2f 5f       	subi	r18, 0xFF	; 255
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2e:	3f 83       	std	Y+7, r19	; 0x07
    1b30:	2e 83       	std	Y+6, r18	; 0x06
    1b32:	81 2f       	mov	r24, r17
    1b34:	90 2f       	mov	r25, r16
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	08 95       	ret

00001b40 <__ultoa_invert>:
    1b40:	fa 01       	movw	r30, r20
    1b42:	aa 27       	eor	r26, r26
    1b44:	28 30       	cpi	r18, 0x08	; 8
    1b46:	51 f1       	breq	.+84     	; 0x1b9c <__ultoa_invert+0x5c>
    1b48:	20 31       	cpi	r18, 0x10	; 16
    1b4a:	81 f1       	breq	.+96     	; 0x1bac <__ultoa_invert+0x6c>
    1b4c:	e8 94       	clt
    1b4e:	6f 93       	push	r22
    1b50:	6e 7f       	andi	r22, 0xFE	; 254
    1b52:	6e 5f       	subi	r22, 0xFE	; 254
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	8f 4f       	sbci	r24, 0xFF	; 255
    1b58:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5a:	af 4f       	sbci	r26, 0xFF	; 255
    1b5c:	b1 e0       	ldi	r27, 0x01	; 1
    1b5e:	3e d0       	rcall	.+124    	; 0x1bdc <__ultoa_invert+0x9c>
    1b60:	b4 e0       	ldi	r27, 0x04	; 4
    1b62:	3c d0       	rcall	.+120    	; 0x1bdc <__ultoa_invert+0x9c>
    1b64:	67 0f       	add	r22, r23
    1b66:	78 1f       	adc	r23, r24
    1b68:	89 1f       	adc	r24, r25
    1b6a:	9a 1f       	adc	r25, r26
    1b6c:	a1 1d       	adc	r26, r1
    1b6e:	68 0f       	add	r22, r24
    1b70:	79 1f       	adc	r23, r25
    1b72:	8a 1f       	adc	r24, r26
    1b74:	91 1d       	adc	r25, r1
    1b76:	a1 1d       	adc	r26, r1
    1b78:	6a 0f       	add	r22, r26
    1b7a:	71 1d       	adc	r23, r1
    1b7c:	81 1d       	adc	r24, r1
    1b7e:	91 1d       	adc	r25, r1
    1b80:	a1 1d       	adc	r26, r1
    1b82:	20 d0       	rcall	.+64     	; 0x1bc4 <__ultoa_invert+0x84>
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <__ultoa_invert+0x48>
    1b86:	68 94       	set
    1b88:	3f 91       	pop	r19
    1b8a:	2a e0       	ldi	r18, 0x0A	; 10
    1b8c:	26 9f       	mul	r18, r22
    1b8e:	11 24       	eor	r1, r1
    1b90:	30 19       	sub	r19, r0
    1b92:	30 5d       	subi	r19, 0xD0	; 208
    1b94:	31 93       	st	Z+, r19
    1b96:	de f6       	brtc	.-74     	; 0x1b4e <__ultoa_invert+0xe>
    1b98:	cf 01       	movw	r24, r30
    1b9a:	08 95       	ret
    1b9c:	46 2f       	mov	r20, r22
    1b9e:	47 70       	andi	r20, 0x07	; 7
    1ba0:	40 5d       	subi	r20, 0xD0	; 208
    1ba2:	41 93       	st	Z+, r20
    1ba4:	b3 e0       	ldi	r27, 0x03	; 3
    1ba6:	0f d0       	rcall	.+30     	; 0x1bc6 <__ultoa_invert+0x86>
    1ba8:	c9 f7       	brne	.-14     	; 0x1b9c <__ultoa_invert+0x5c>
    1baa:	f6 cf       	rjmp	.-20     	; 0x1b98 <__ultoa_invert+0x58>
    1bac:	46 2f       	mov	r20, r22
    1bae:	4f 70       	andi	r20, 0x0F	; 15
    1bb0:	40 5d       	subi	r20, 0xD0	; 208
    1bb2:	4a 33       	cpi	r20, 0x3A	; 58
    1bb4:	18 f0       	brcs	.+6      	; 0x1bbc <__ultoa_invert+0x7c>
    1bb6:	49 5d       	subi	r20, 0xD9	; 217
    1bb8:	31 fd       	sbrc	r19, 1
    1bba:	40 52       	subi	r20, 0x20	; 32
    1bbc:	41 93       	st	Z+, r20
    1bbe:	02 d0       	rcall	.+4      	; 0x1bc4 <__ultoa_invert+0x84>
    1bc0:	a9 f7       	brne	.-22     	; 0x1bac <__ultoa_invert+0x6c>
    1bc2:	ea cf       	rjmp	.-44     	; 0x1b98 <__ultoa_invert+0x58>
    1bc4:	b4 e0       	ldi	r27, 0x04	; 4
    1bc6:	a6 95       	lsr	r26
    1bc8:	97 95       	ror	r25
    1bca:	87 95       	ror	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	ba 95       	dec	r27
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <__ultoa_invert+0x86>
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	61 05       	cpc	r22, r1
    1bd8:	71 05       	cpc	r23, r1
    1bda:	08 95       	ret
    1bdc:	9b 01       	movw	r18, r22
    1bde:	ac 01       	movw	r20, r24
    1be0:	0a 2e       	mov	r0, r26
    1be2:	06 94       	lsr	r0
    1be4:	57 95       	ror	r21
    1be6:	47 95       	ror	r20
    1be8:	37 95       	ror	r19
    1bea:	27 95       	ror	r18
    1bec:	ba 95       	dec	r27
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__ultoa_invert+0xa2>
    1bf0:	62 0f       	add	r22, r18
    1bf2:	73 1f       	adc	r23, r19
    1bf4:	84 1f       	adc	r24, r20
    1bf6:	95 1f       	adc	r25, r21
    1bf8:	a0 1d       	adc	r26, r0
    1bfa:	08 95       	ret

00001bfc <_exit>:
    1bfc:	f8 94       	cli

00001bfe <__stop_program>:
    1bfe:	ff cf       	rjmp	.-2      	; 0x1bfe <__stop_program>
